[{"title":"相机使用指南","path":"/2025/01/05/study/我的运动相机/","content":"骑行设置 https://www.bilibili.com/video/BV1La4y1k7dL 降低亮度到一半 关闭高光助手 抗闪烁&#x3D;&#x3D;》推荐调成50赫兹，就能获得一个流畅的画面，也不会有异常闪烁 视频编码&#x3D;&#x3D;》默认 H.265 码率&#x3D;&#x3D;》默认标准 视频锐度&#x3D;&#x3D;》设置成“低”，显示会更自然一些 拍摄比例&#x3D;&#x3D;》16:9 防抖等级&#x3D;&#x3D;》设置“标准” 视角&#x3D;&#x3D;》运动广角 日常骑行，选择的是4K60帧 进阶参数 快门速度&#x3D;&#x3D;》降低到1&#x2F;120、或者1&#x2F;100、1&#x2F;60，都可以获得一个比较不错的动态模糊 不过快门速度越慢，防抖会越下降 ISO&#x3D;&#x3D;》推荐自动就好 up主是选了1600（不需要画面太亮） 夜景录像模式 4K25帧或4k30帧，30帧会看起来更流畅些 运动广角 如果觉得骑行特别抖，可以使用“抖动模糊改善”，适当的把快门速度放快一点 https://www.bilibili.com/video/BV1GRquYmE8s 夜景参数设置 1、模式选择：夜景录像模式 2、运动场景参数设置 分辨率及帧率：4K25帧 曝光策略：抖动模糊改善 3、日常记录参数设置 分辨率及帧率：4K25帧 曝光策略：抗频闪 摄影旅拍技巧 https://www.bilibili.com/video/BV1KPyHYdEzL 可以简单的把空景分为大中小三类来进行拍摄，大到城市高楼景点全景，中到建筑一角局部特色，小到细节特写纹理层次 大景拍摄会建议选择Mega View【自然广角】，更广的视角更小的边缘畸变，都会让你得到更好的大景拍摄效果。利用框体结构和引导线进行前推运镜，或者在高耸的建筑全景下去使用上摇运镜，都会帮助你在拍摄大景画面时更能展现场景的宏大 中景拍摄如果想要更自由的后期裁剪空间，可以选择【8K 30帧】拍摄，如果想要高效直出建议使用【4K 无损变焦】。旋转运镜，由小见大的后拉运镜拍摄，以及顺应建筑线条推移运镜，都可以放大中景画面的动感张力，加强观众代入感 运动相机的小景拍摄，需要我们关注那些不曾注意到的细节点。小景拍摄通常需要应变较为复杂的光线，选择【4K 60帧】开启HDR模式，在高光比明暗复杂或是高速运动场景下都会让画面细节更加丰富 摆拍技巧 利用背景框体倒退式运镜拍摄（需要背景中有框体结构或线条结构），人物前行的同时轻微转动相机，画面效果立马加分 利用墙面做参照物向前推进（需要背景中有线条结构），后方跟随时运动轨迹会更大更出片 人物到达目的地，相机先动人物后入画（需要人物与镜头协同前进），站定后相机前推越过人物拍摄风景 拍摄人物建议使用线性视角，避免运动相机畸变现象 开启相机的2倍无损变焦，在拍摄人物运镜跟随B-roll场景时会获得一个更适合旅拍人像的焦段 在高光比环境或是逆光场景下，一定要开启【4K60帧】运动HDR，能保留住画面更多的细节，同时高帧率的拍摄也能方便后期愉快的变速调速 拍人文 推荐使用【滤镜色彩指出——徕卡自然滤镜】 使用【I-log模式】则能获得更自由的调色空间 如果可以，尝试让被摄者和镜头产生互动会大大加强现场感 相比平行拍摄，近距离或是俯拍视角去抓取色彩鲜艳的人文产品也是一个小秘诀 VLOG拍摄 推荐使用【人像滤镜】，AI自动提亮肤色，美颜效果很不错 音频模式选择【智能人声增强】 运镜技巧 https://www.bilibili.com/video/BV1Vk4y1N7iS 1、环绕+下摇 在环绕运镜的基础上，加上下摇的镜头运动，能增强画面的沉浸感，展现出清晰且生动的环境氛围 2、抬升式运镜 在推镜头的同时，采用上摇抬升的镜头运动方式 3、对冲镜头 当模特向前移动时，摄影师采用反方向跟随拍摄方式，镜头可适当运用POV模式 4、跟随上升镜头 首先从侧方跟随镜头拍摄，随后缓慢的拉升，呈现出全景画面，十分适合用于视频开头 5、长焦运镜+Flow智能追踪 在拍摄时可以巧妙的运用前景以凸显速度感，同时在进行变焦拍摄时容易产生画面晃动（可以框选画面人物触发Flow特有的长焦追踪功能进行辅助拍摄，让画面变得平滑稳定） 转场公式 https://www.bilibili.com/video/BV12h4y1V7dR 1、方向动作匹配转场 拍摄时利用人物动作或动势的匹配性进行转场，精髓在于人物或镜头的运动方向或动作相匹配 2、遮挡物转场 在镜头结尾利用遮挡物对画面进行遮挡，在第二个镜头开始时，利用遮挡物衔接第一个镜头 3、相似转场 利用画面内容的相似性，进行上下画面具有关联的转场 4、颜色匹配转场 利用上下两个画面的颜色，相互匹配的元素进行转场 5、声音匹配转场 前期拍摄或者后期时，利用声音的爆发性、延续性，进行上下画面的衔接 延时摄影 https://www.bilibili.com/video/BV1WpyUYtE5X 适合在固定场景拍摄自然风光，获得时光流逝的画面效果。 将相机使用三脚架等配件进行固定，并调整好构图，进入模式切换菜单选择“延时摄影”模式 对延时摄影参数进行设置。设置好录制时长与拍摄间隔后，相机将自动计算对应成片的时长 当相机处于固定状态时，建议将防抖等级设定为关闭状态，可获得更广阔的视野范围 点击快门键即可开始拍摄，屏幕中将显示实际录制时长及对应成片时长，相机在达到设定的录制时长后将自动停止拍摄，途中也可以按快门键来中断录制，相机将自动生成延时视频 对延时视频进行编辑 点击“轨迹延时”，可将固定机位的延时素材转化为轨迹延时效果，还可以选择并预览不同的轨迹预设 移动延时适合在移动场景拍摄城市街景，获得穿梭空间的画面效果。 进入模式切换菜单选择“移动延时”模式，将屏幕准心对准被摄景物并调整好构图 点击快门键开始拍摄，在移动时请尽量保持步伐稳定，并确保准心始终对准被摄景物 拍摄过程中点击左下角按钮，即可在常速与变速间进行切换，相机将自动生成平滑变速效果 HDR https://www.bilibili.com/video/BV16nz3YiEbZ HighDynamic Range Imaging（高动态范围成像） 在日光、日落等光比较大的场景下拍摄时，画面可能会出现亮度过曝，暗部欠曝的情况，此时开启HDR就能保留更多的高光和阴影细节，呈现更真实的视觉效果 平衡曝光当全景相机在前后方向明暗差距较大的场景，例如车载场景拍摄时，可能会出现车外风景颇亮，车内人物过暗的情况。这时可以将平衡曝光选项设置为“标准”或“高”，两侧镜头将分别自动调整曝光值，让风景和人物都能获得合适的曝光。但此时画面衔接处会出现明显的色差~ 曝光三要素 https://www.bilibili.com/video/BV1HkqVYGEyc/ 1、图像是怎么在相机里形成的？ 首先被摄物体的光线进入镜头，然后穿过光圈再经过快门，最后到达相机的传感器，也就是CMOS，光到了这里便形成了图像。 我们可以理解为光是传感器的食物，有光进入它便能生成图像。但如果传感器吃进去的光太多，画面就会过曝；如果吃的太少，画面就会欠曝；只有吃的刚刚好，画面才能够曝光正常，高光阴影的细节才能够保留 2、那要怎样才能够拍出曝光准确的画面呢？ 这就要求我们学会控制光圈、快门、ISO 光圈光圈越大进去传感器的光线越多，画面就越亮。 相机界面上带F的数字就是光圈数值，那常见的光圈数值有F1.2-F22，可以根据需求来调整光圈的大小。光圈数值跟光圈大小是反着来的，数值越大代表光圈越小，得到的画面就越暗。 光圈除了影响画面的亮度，还会影响背景虚化。比如光圈越大（F1.8），背景虚化就越强。反之光圈越小（F22）背景虚化就越弱 快门当我们按下快门按钮时，传感器前面就会出现一个快速开合的门帘，它就是传说中的快门！当快门的开合时间越久，能进去的光线就越多画面就越亮；反之当快门的开合时间越短，进去的光线就越少，画面就越暗。 相机界面上，几分之几的数值就是快门速度，常见的快门速度有30秒到1&#x2F;8000秒。 快门除了影响进光量，还会影响运动模糊。例如1&#x2F;50秒的慢快门速度，会把物体这段时间（1&#x2F;50秒内）的运动轨迹全都记录下来，导致物体看起来很模糊。但如果快门足够快，比如1&#x2F;1000秒，在这么短的时间内物体位置几乎没有发生变化，所以就能拍出一张物体相对静止的清晰照片。所以想把动起来的拍摄对象拍清晰，比如车辆、动物、跑步，就需要用到速度快的快门 ISOISO是感光度，可以简单地理解为是传感器（CMOS）底下的一盏灯，打开它就能够把传感器的图像强行提亮 所以当我们在这种比较暗的环境下拍摄，我们已经把光圈调到了最大，在保证画面清晰的前提下快门也拉到了极限，但画面还是太暗，这个时候ISO就出来救场了，调高它就可以粗暴的把画面再次提亮。为什么说是“粗暴”呢？因为ISO是强行拉高画面的亮度，代价是噪点会变多 建议大家在调整曝光的时候，优先调整光圈跟快门，最后再调ISO，这样画面才能够更加纯净 那这三者要怎么样配合使用呢？ 很简单，首先要搞清楚你要的是怎样的画面效果 比如在这种光线充足的户外，想要一张背景虚化的照片。那这个时候光圈就是老大了，快门跟ISO都得服务它。我们可以先把光圈固定在F1.8不变，但这个时候画面过曝了，ISO降到了最低画面还是太亮，所以这个时候可以把快门速度调快减少进光量，就能够得到这张曝光正常，背景虚化的照片了 再举个例子，想把行驶中的车辆拍清晰。那这个时候就轮到快门做老大了，我们先把快门调到1&#x2F;400秒不动，这样能够把运动的车辆拍清晰。但因为是夜晚画面会曝光不足，这时就可以把光圈调大（F2.8），那画面虽然变亮了，但还是不够。所以我们可以再拉高ISO，现在就能够得到曝光正常的画面了 剪辑提升速度感 https://www.bilibili.com/video/BV1MwCVYwETr 动态模糊效果，是模拟高速行驶时人眼看到的画面，让两侧建筑条纹模糊化，就会显得速度快，有动感。相反画面两侧太清晰，车和建筑的相对速度看起来就慢 在app中编辑素材的时候，选择ND镜特效，点开就自动生成动态模糊效果，也可以调整范围和强度，数值越大动态就越明显。拍的时候可以挑选两侧有景物的场景，这样视觉冲击力会更强 调色工具 https://www.bilibili.com/video/BV1ZKCNYxEgd 在app里选择素材后进入编辑页面，可以看到颜色下方的调色工具（根据手机性能不同功能可能会有些许差异） 杜比视界：让画面更通透 开启后可以发现画面的层次更清晰了，这个效果会让画面的反差更强，画面的清晰度更高，很适合明暗反差比较大的画面 色彩增强：画面色彩更加鲜艳 可以调大数值，发现画面中的细节、颜色饱和度都增加了，这个效果可以让画面中的颜色更丰富，适合拥有较多色彩的画面。如果画面中色彩比较少，那效果将不会那么强烈 通透增强：突出主体，增加清晰度 开启后，画面中除天空以外的亮度会加强，人物会更加清晰突出 滤镜：电影感风格大片一键设置 内置了丰富适用于各种场合的滤镜，点击一下即可应用 调色：自由调整画面风格 可以根据自身喜好，调整画面的各个参数 提高剪辑效率 https://www.bilibili.com/video/BV1tn14YVEy9 1、标记素材 2、双屏剪辑（大屏专门用来剪辑，小屏幕专门用来看文稿找素材） 3、工程文件分类。剪辑一条视频会产生各种素材，所以一定要对自己的剪辑文件进行分类整理 4、积累素材库。把用过的音乐、音效、网络素材分类放好，并且日常要注重积累，多更新素材库 5、智能字幕。可以直接用剪映的智能字幕 6、即拍即剪。如果过了太久才来剪辑，不仅得重新熟悉素材，还得重新构思","tags":["摄影"],"categories":["技能"]},{"title":"我每天都好困","path":"/2024/12/01/other/我每天都好困/","content":"我每天都好困先围绕标题说说。最近一个月在忙几个项目的上线工作，被折磨的那叫一个苦不堪言，用测试大哥的话来说就是，设计这个产品的人已经走了，开发这个项目的人也走了，测试这个应用的人更加走了。所以我们经常是徒劳无功的一天，其中还要对比数据，眼睛都要看瞎。。测试同志们也跟着遭殃，忙飞，她们在企业微信上换了几个很有意思的签名：大润发杀🐟中（这个是原话）。最有意思的是这个——磨有100个 驴只有1个。真的笑死🤣 我也跟着打趣，把个性签名换成了“我每天都好困”。其实也没带啥意思，只是刚好想到这么个话而已。结果呢，后台组开周会，组长貌似因此被拿去“批斗”了（捂脸），原因是领导看到我的个性签名，以为我被压榨了😂，我们工作安排不合理。这个倒是挺戏剧的，合不合理倒另说，我倒好奇领导居然关心起咱的个性签名来了，有点东西 一定要开心随着工作渐入佳境，我想，我已经完全融入大家了。我很喜欢“上班”，但我不是真的喜欢上班，而是喜欢我所在的公司，这里有很nice的同事。可这个篇章，我想带点情感色彩，写给一位——我喜欢的女生。 刚认识的时候，我俩小心翼翼，都是刚来到这个新环境，分不清的东南西北，找不到的凌乱工位，身边满是陌生人，而她只是一名实习生。繁重的工作压得我们喘不过气来，彼此的接触也越发频繁，工作之中仍然了解了很多。后来我才知道，那段时间她很焦虑，情绪莫名的低落，各个方面都可能让她觉得压力大。那时，我是不是一种精神寄托呢？而我，也很期待——她的信息 当她聊起自己喜欢的明星，那种激动感真的每次都要蹦出屏幕，给我推荐了很多很多歌，很好听，但我发现，自己没那么喜欢听，自己的风格就是不喜欢刻意的去听。令我惊讶的是，对于喜欢的东西你们居然了解得如此深厚，古今中外，各种来龙去脉，仿佛有过过命的交情一样。起初我总纳闷，怎么这人老喜欢发一连串的“哈哈哈哈哈”的，笑得没心没肺，给我一种笑声都要跳到脸上来的感觉，但看着她确实就是喜欢发，慢慢也就习惯，干脆我也效仿，我觉得这是拉近距离的一种方式。要知道以前，我就是以逗女生笑为己任的。时间过的很快，苦逼的日子就这样熬过去了，她也跟大家熟络起来，肉眼可见的开心。 又是写信哇不过这次不一样那天，你说自己有男朋友，我瞬间就觉得一种被欺骗，背叛的感觉，为啥我们之间不保持点距离呢？说不失落是假的，我以为我们是在相互吸引的。你说，我可能是对感情认知不敏感，是吧，我的确白痴，对情感不敏感的话，那为什么周围的人会对我们有那种看法呀？是有人在八卦，觉得我们不简单吗？你到底是如何想的呢？你说过，你是个慕强的人，真的只是把我当弟弟看吗？虽然你后面澄清这是个好的评价。我丝毫不怀疑我们之间的真诚，我很想知道你对我究竟是什么看法中间有位同事提了新车，请客吃饭，我很开心，因为饭局中有你，而且我们一行一共才五个人。那次饭局聊得还不错，但我也才恍然大悟，好像我们除了社交软件上的聊天其实也没怎么打过交道，我有点投入过头了。认识好歹有段时间了，平日里却很少见面聊天的机会。。除了工作，相遇的可能小得可怜，真恨不得在人群中一眼就能发现你。但是，你跟zh认识都没几天，就已经叫他出来吃饭了吗，不管是不是开玩笑的那种。郭总说，zh其实很能撩的，有些人大抵就是与生俱来的这种本事。我还是太差劲了，也许你对我也没啥兴趣，我太简单，一眼就能看个通透那种，这种人处起来很无聊吧——就跟我的名字一样，HWL，好无聊。我真的是五味杂陈，伤心，失落，不知所措，以及深深地羡慕…你咋不邀请我嘞，对不起，老是惹你不开心。有过两次直男般的邀请，都被你以工作忙拒绝了，还一直总说，有机会，有时间。。真的是巨大的饼我在同事面前从不提起你，害怕他们出言不逊。但是聚餐时他们又评价到你了，说你身材好，穿衣打扮，化妆都很在线。人也不简单，段位高，大致翻译下，就是觉得你情场方面是高手吧，之前去深圳的时候我跟同学提起过我们的事，他也是这样认为的，要是你能普通点该多好。我的确很在乎别人如何看待你，因为我对你了解的太少了，想不放在心上都难，我现在内心真的是有一百个疑问，好想当面问问你。上次你说，我可能是被一部分环境因素误导了，误以为自己喜欢你，但是我觉得我没有被误导，我的确是喜欢你，只是在一直扭捏，不肯承认。就这样，你给我的印象很深刻，得知你有男朋友后，失落的那段时间，我每天都在疯狂地骑车，中午顶着巨大的太阳也出去，晚上更是骑到不知什么时候，我是想保持距离，但是好像，眼里全是你，忘不了你，对你在乎的过分了。我的情感一直在压抑，一直在克制，如果我能谈上恋爱，那绝逼也是个恋爱脑。我人有点愚笨，我不想再错过，很多美好的东西已经失去了，这些教训，应该够了吧。购入这辆自行车，也是这件事才促使我行动的，在此之前我并没那么依赖骑行，所以我很生气，你说骑车就是我的娱乐方式。跟朋友打趣道，我骑车这么猛，你是有很大功劳的，紧随着而来的朋友一句话便是：我跑步这么猛，她也是有很大功劳的男生也这么奇怪，沦陷得不明不白。最近晚上老是在想这些事情，睡不着觉，乱七八糟，心烦意乱的，好想，大大方方的，去喜欢一个人。不过，太理想了。我们之间，其实也感觉很难融入对方的生活，你的身世，家庭，让我很有心理落差。xy是值得信赖的，所以我有跟她说过我的困惑，这里我也只跟她说过，她开导我：没必要~一些东西我们改变不了，那就改变自己，过上想要的生活。希望我可以稍微强势一点，不然容易被欺负。本来我一直是一个快乐小孩的，但就是在渴望某些东西，我好想有人在乎我，记得我。照你所说，感情随缘，我知道，我一定会恋爱的，因为我的品行很好（应该吧），也算是个与众不同的人，有些人事物我是绝对不会去模仿的，他们我也融入不了，有嫌弃老婆的，抱怨这抱怨那的，不尊重女性的……至于你说的，趁现在还是自由恋爱的时期多谈几段，我是不认同的，谈恋爱就应该全心全意的谈，如果这种事情还考虑留有余地，那未免也太牵强了那天，要是没聊那么多就好了，话题大概就停在——你说“我跟弟弟一样”就行。这样，我也不用心怀叵测，我一个人知道就好，不会给你造成困扰。这不是卑微，这只是我尊重感情的态度，就像，单车让我度过了悲惨而又抑郁的青年大半时间，这就是我生活的态度。你提到过很多次，你对自己的相貌不满意，是的，用大众的眼光来看，的确算不上一张漂亮的脸蛋。但是，你应该知道，你是属于耐看型的，越看越有一种美感。你很吸引人，请你不要自卑，别再焦虑。后面，一起做个快乐小孩好了~不管怎么样，我还是那句话，我可能不靠谱，但绝对值得信赖我现在的状态太糟，想说的话太多，所以写了这封信，释然一下。如有冒犯，多多包涵。日后，还请一定要开心^_^空空落落又满满当当，昏昏沉沉又明明白白——2024.07.23晚 我其实知道，什么时候，应该去哪里能够大概率遇到她，但我已经不愿意了。去制造学生时代那一般的“偶遇”，我的表现还是那么木讷，每次在她面前好像都是笨拙，幼稚的。我经常干的事——企微翻看她的在线状态，还偷偷“关注”她的抖音。为啥是偷偷呢？之前分享给我东西的时候还煞有其事地涂了鸦，但其实emm，我早在其他同事作品评论区下发现她，id真的太有她的风格了！但是，我又不敢直接关注，就时不时点出去瞅瞅喽，现如今已常驻在《常访问的人》一栏中。车牌号，我也记着，其实也不用记，那家伙的车太显眼，少女粉，颜色太有辨识度。中午出去骑车的时候，悄悄跟过她，奈何两个轮子跑不过四个轮子。朋友圈更是别提关注得多用心了，有一次发的风景照，我突然意识到——我可以找到你的家！！！男生搜集信息的能力从此刻开始全功率运转，不错我如愿以偿地找到了，虽然它带给我的又是好一阵心理落差。从那以后，我依旧有意无意的就去溜达，明明知道做的这些没什么意义，但就是控制不住 对所有人都可以大方善谈，唯独看见喜欢的人张了张嘴却怎么也说不出风趣幽默的话，还是装作满不在乎地转身走开，却又不甘地回回头 我渐渐意识到，喜欢一个人，比上班更累。我没有情感经历，一切都是靠自己悟出来，或者别人教的。在此之前，我也认识过一个女孩子，那段经历也教会我很多，即使很多都是我单方面的发挥。如今，保持距离是我应该做的。冥冥之中自有天意，后面她被调到其他项目组，虽然事实证明这是一件好事，新的项目组并没有这么忙，而且更有学习空间，只是她跟我们几乎不再有交集。我知道，是时候专注自己了，逐渐开始注意自己的形象，更加积极的去买衣服，思考如何穿搭会更好看点。 12月6日，迎来了自己的24岁生日，我让自己的这一天和她生日的那一天尽量过得相近点，可她，是能收获五个蛋糕的人 筋斗云女生很奇特，很容易就让我这样的人产生心理依赖。我什么都可以一笑而过，可在感情上总是耿耿于怀。有人好奇，都什么年代你还搞纯爱呢，有人教我，水至清则无鱼。我懂得什么意思，哀莫大于心死，可我就是我，那个意气风发的我。任你们肆意地开黄腔，扯黄段，但我不是那个年纪，现在不是，将来也不会是。 筋斗云——一朵有灵性的云，与主人心意相通，只有内心纯洁之人才能乘坐。 工作上，领导们对我的评价很高，强哥说我工作很熟练，一点都不像零零后的样子。和我吃饭很爽，因为看我吃饭就很香的样子，挺多人都说我单纯，对我印象好，不会生气的那种，还都喜欢教我怎么和女生相处。有人还希望我强势点，胆大点，更心细些（我已经开始逐渐说不，开始反驳了）。阿中则说我腼腆，纯粹，内向但是幽默，肯定能哄好女孩子，还一本正经的教我买香水。我超开心，这都是对我极大的认可。而最为关键的，我得到了我想要的答案，原来她是这样看待我的——心态会很好，内核比较稳定， 活泼、乐观、健谈、骑行、自由。我很荣幸，还有一句我认为最高的评价：“你是真的让我觉得上了几年班都没有被社会风气给感染的一个人。”这些太深刻了，我知道，以后回忆中永远会有她的身影。 在这里，加班的总是我们三个，阿中，阿龙，阿贤。 有意思的是，加班的总是我们三个。有一次捎带上了强哥，本就自来熟，深夜更是免不了一番高谈阔论，我突然意识到还没加强哥微信，还强烈要求强哥以后记得给我点赞，于是乎话题就被我岔到朋友圈上。紧接着就是一波感慨，他们不约而同地看着我，又发出那句听过无数遍的“年轻真好”。贤哥迫不及待地给我们看自己当年的学生照，那是一个真的稚嫩啊，比起现在，发福已经是手下留情了，沧桑才是最大的刻刀。强哥也好不到哪去，说自打结婚之后就没咋发朋友圈，跑步也丢掉了，慢慢的就有了娃。他一个劲地翻着朋友圈，我就很好奇的边指边问，他还十分肯定，我以后也会这样，这是男人躲不过的命运，给我看了很多以前他玩过的地方，列举参加过的活动，那时候每天的分享根本停不下来。有了家庭之后，就会退出很多活动，而时间线，正是结婚的那一年。我清晰地看到，强哥朋友圈有一条点赞很多，是新生命诞生的那一条，下面还有着很多很多很多的祝福，可惜我不记得那条的文案了。。 冬至那天晚上，贤哥邀请我过去吃汤圆，我本来不好意思去的，因为我知道大家肯定都在，他爸妈，他媳妇，小朋友们。到了晚上，直接给我打电话，我犹豫了下还是过去，一时紧张还跑错楼，进门果不其然，大家都在。贤哥的两个小朋友巨可爱，女孩文文静静的，男孩活泼俏皮，管我叫龙叔，诶这词好熟悉，这不成龙历险记里的嘛哈哈哈哈。我吃了碗汤圆，还顺带吃了碗饭，中间唠着家常，这里一点都没让我觉得生疏，90后，00后，10后，20后，你猜怎么着，聚齐了！贤哥老爸中间还端来荷包蛋，和奶奶做的很像，回味无穷~我看叔叔手上就没停过🤣，一直给老铁扣着点赞，饭后即兴还要去跳广场舞。这就是家的味道啊，已经有段时间没回去了，奶奶膝盖疼，好不容易上一次广东，可我也只是急急忙忙回去待了一天。 他是个有家室的人，他不回来，难道是想外面有个家吗？这是贤哥媳妇说的，这句话我也是后知后觉才反应过来的。终于理解强哥，顶着莫大的工作压力，只要晚上不加班，熬着一两个小时的公交都要回去 我仍然坚持着每天八点打卡，早晨上班有半个小时的缓冲时间，我会用来去看书，一楼大厅的图书角。久而久之搞卫生的阿姨已经认识我，有的时候来太早，阿姨都以为自己上班晚了。中午台球室我总是第一个到的，如果我没有到，那么我一定在骑车，而现在我又多了一项活动，便是和一个家伙在后面广场里练漂移板，虽然他已经学会了，他老是“纠缠”我，让我也买一个跟他玩，而我还是在考虑中🤔。晚上下班，公司园区里如果有个家伙在疯狂兜圈，那绝逼是我，除了我没人能干出这么无聊的事。我一个人骑车，也总是骑得不亦乐乎 工作提供了意义、身份、圈子和收入，是一种在变得更难的同时也变得更有趣的东西。 这里有位同事很奇葩，独来独往一匹孤狼，群里又属他最活跃，喜欢晒自己的存款、基金，说话从来不会看着你，朋友圈的配字永远只有一个黄豆表情，不刮胡子，单人往返游玩水上乐园的双人票，这个事迹更是在我们这传开了（虽然我能理解他，但他老是做些恶趣味的事）。 有人大大咧咧，平日里经常听到他那魔性的“扯犊子”，却因为不知道怎么回复刚认识的女生发来的信息到处请教。 恰恰相反的是，有人轻浮，刚入职就到处加女生微信，平时里的话语总是那么轻佻，任谁都知道他的目的。 也有人明明一直想要甜甜的恋爱，结果每次相亲感觉至上，觉得不喜欢，拉黑转身一气呵成，头都不带回的。。我都不懂怎么做到的这么果断？到底是浮躁，等不及真心换真心，还是真的执着，可明明试图寻找的是完美的另一半，却妄想在几秒钟内做出决定么？ 与他相同至今单身的，却也有人花心大萝卜，刻在骨子里的基因一样，无时不刻撩着女生。 有人给B站上擦边的up主充电，还一个劲地煽动大家伙一起，真的是笑死我。 印象最深的，lh，浩哥，比我大一点，有着一个独特的发型，从不拿我们当外人，被我们一致认为是最骚的男人。看到漂亮女生会向我仰头示意，老是一本正经地提起他和女友之间的那些二三事，搞得我几度面红耳赤，而他自己却是话未停心不跳。 在这负责团队氛围建设的老哥，时刻保持着精致，总喷着那让我头昏的香水，桌子上满是一些稀奇古怪的玩意儿，扬言跑步是为了更好的抽烟🚬。 还有人一副乖乖女的模样，但其实背地里是搞笑的角色，相当富有责任心，即使被工作压得抬不起头，也不忍心大家牵扯进来。 有的领导平易近人，也有的臭味相投，并称三姐妹花的老巫婆，无一例外端着一口纯粹的官腔，稀里糊涂地凑着热闹，说着不流利的废话，更是有着经典永流传的逆天发言… 1、如果“严重问题”觉得可以延后，那是不是就不“严重”？那需要进行标准对齐和确认； 2、如果确实“严重”，那就不应该“延后”，上线前搞定； 这是我的理解，大家可以评估下。 这下一个很“惹人烦”的家伙不得不提一下，真的是咄咄逼人！虽然在工作上，他的出发点都是好的，行事也是真的让人放心，我们都明白他是刀子嘴豆腐心，但他真的太狠了，见到他底气瞬间泄掉。。其实私底下还是能和大家打成一片的 最最最值得一提的，很特别的一位朋友，真的是每天都来公司，同样独来独往，少与人交流，只要你不找他他绝对不会来找你，同样没有什么欲望。但他爱好广泛，乒乓球，桌球，骑车，跑步，漂移板，下棋，电子鼓，画画，K歌，基金…很多事情他都是一个人默默学会的，至少我看到的都是，如此专心沉迷自己的世界中，这种专注足以让人称奇。而在这里，我们也会一直玩下去….. 每个人都很有个性，每个人都是不可或缺的一环，每个人都发挥着自己举足轻重的力量。这些趣事，都是大家茶饭之余拿来津津乐道的。人与人的关系就是这么奇妙，生命的长河里，我用我的文字记下你们。2024在这样的陪伴下过去，相信载着我的筋斗云仍然能一如既往地向前驰骋。 临走撂下一包华子水哥把更多的时间花去生活，在这方面获得的开心就会比较多，相对来说在工作上能力上的成就感就会少。这也是自己主动的一种选择，以后会怎么选我不太知道，但目前来说我个人还是能自洽的，就是指这个得失还是可以自洽的B站：不高兴就喝水","tags":["近况"],"categories":["生活纪实"]},{"title":"一周是一年的2%","path":"/2024/04/27/other/网络日志/","content":"20242024年2月2日，小太阳老鼠工地的一位好兄弟结婚了，相识的时候是高中同学，那年15岁，八年友谊如今他步入婚姻的殿堂，新娘却也是高中同学，而且与我们都挺熟络的。这俩家伙也是可恶，结婚前一天才告诉我们，哥几个都惊讶到不知所措了。搞地下恋情，四五年俩人愣是一个朋友圈都没发过，如今还是怀孕瞒不住大伙了必须得结婚。。结婚当天，大伙都还在外地，只有一个放寒假的同学在老家，只能委托他代替大伙去见证这一幸福时刻，穿西装的男人就是帅啊！还有联系的同学中，他是第一个结婚的，我们去看了婚房，小两口打造的有点随意，却处处透露着温馨。他们热情了招待我们，啤酒，烧烤，炸鸡，畅饮到半夜两点，几个同学才中途离场，剩下我们几个打算过夜的，依旧恋恋不舍地聊到四点，彷佛有说不完的话题。 这个消息当时真的是炸了群，心理落差一下就显现出来。明明都是同一个世界出来的人，有的在外工作，有的做好回老家的打算，有人还在上学，有人却已经结婚生子。男人的角色——男孩到丈夫到父亲，真的是一气呵成。我们都是零零后，今年是本命年，也是我工作的第三年。可我到底是个什么情况，从来没想过未来，好像还带点幼稚？ 令人疑惑的我今年进24岁，对自己的人生轨道仍旧一无所知，只想着赚钱，省钱。但其实我是个十足的败家子，买东西前犹犹豫豫，买东西时又几乎不带砍价，买东西后各种后悔，不是买贵就是买过剩，一个十足的烂好人，虽然我知道确实是需要它。 时至今日，社会已经变了很多，小的时候活跃在荧幕上的各种公益广告，耳熟能详的节约，用纸用水用电，光盘行动…仿佛没有人再当回事，可这些习惯我都无一例外的保留着，不变的是我；自新冠疫情之后，经济一蹶不振，在这个风雨飘渺的社会里，工作也越来越难找，大家都在调侃也许今年是往后最好的一年呢，但我的初心还在，它还没被落下；比起微信，我还是喜欢用QQ，那里全是还没长大的我们，它已经很久很久没有红点了，更不记得特别关心的铃声有多久没响起过，明知大家都不再活跃，可还是忍不住地翻下QQ空间。这些习惯也许永远都改不掉吧，在我有限的生活里固有的一环。对我这样的人来说，手机根本没什么用，没有人会记得我，会主动找我。早上7点出门，晚上10点到宿舍，手机还剩70的电。正如我的名字那样，HWL——好无聊 可以看QQ个人名片的能量值，如果对方还经常用QQ的话，能量值应该是不少的，我的是750，也就在群里发发消息，逛逛空间 有些人上了大学，社交属性仿佛一下就打开了，而有些人则走向沉默…我很孤独，活跃的同学群只剩小太阳老鼠工地，而这个群除了开黑，日常还是我在活跃气氛，大家都有自己的圈子，形影不离也只适合学生。家乡只有冬，再无春夏秋。近乎是一年回来一次，回来也仅仅一周的时间，曾经的同学们很难再相聚，大家都是身不由己，能够保持联系已经很难得了。但我始终相信，穿梭在大街小巷的我们，如果还能遇到，那么彼此都会大声呼唤对方的名字，我们的友谊地久天长。 很多时候喜欢怀念过去，但又止不住地展望未来。自己一直没刮过胡子，就是在妄想能有一个人，一件事能够改变我，让我能够重视起自己的外在，哪怕是惊起稍微一点点的波动。我最终妥协了，买了把飞科剃须刀，郑重地刮去我那“引以为傲”的胡子。 在旷野中寻找人生的轨道why他们都说人生是旷野，不是轨道。放在二十岁出头的时候，我相信，并且奉行。但是现在三十岁了，我开始主动在旷野中寻找我的轨道。一个阶段有一个阶段的该做的事情。至少与我而言，在某个阶段之前，人生就该是旷野。但是到了某个阶段之后，有条轨道没什么不好的。你说这是一种认命的表现吗？我不知道，但是我满足于此。公众号：why技术 老实说，我开始觉得，自己的日子过得太单调了，空白的感情史，无欲无求的生活，背井离乡的奔波。我要有责任，想有自己的空间，我也要有自己的天地，那种归属的感觉，我应该要有牵挂，要有依靠。男子汉贯彻自己的信念肯定是一件很酷的事。 我并不是一个墨守成规的人，很多时候我会刻意挑战规则，想做点不重复的事。这次好朋友突如其来的结婚，让我意识到，也许是该改变下自己，一直以来，其实还是带点选择性磨练的色彩，不够担当。 最近的工作很忙，经常忙到凌晨下班，回到宿舍就躺死在床上，然后第二天迷迷糊糊醒来继续重复，中午总是奇饿无比，下午永远是被呼唤来呼唤去，每天要接触很多的人，处理不同的事，以至于白天几乎不可能静下来写代码，白天的时间就这样被光明正大的偷走了。但其实我很有干劲，因为这里做的东西对我来说是很新颖的，我最缺的，就是目标了。这里有很多优秀的人，他们做事的速度，思考的方式，无一不让我感叹自己与他们的差距。我想学习他们的那种老练，其实我的性格很难，或许自己的思考方式并不弱他们多少，但是说话永远不如他们那般强势。还有一点，让我不得不承认——自己并不擅长现场思考，更喜欢事后琢磨。不过，优秀归优秀，这里终究还是职场，我也看到了背面，或多或少总带着点戾气，有人很不耐烦，有人说话总带官腔，有人小题大做，总喜欢长篇大论。 曾经的虞大少幼稚有余，可他说自己活不到需要油滑那天，不学也罢 西西影馆——我的团长我的团 没有人经得起别人的挑剔。我丝毫不关心这些，每个人都有自己的为人处世方式。我只希望他们做朋友的时候，不带有工作的那种严肃。男生建立起友谊很简单，打一次乒乓球、打一次台球就够了，我认识了很多人，并且是和乐意和我打招呼的人。本来什么都不会的，可总会有人教我 思考近几天，主动联系了一位老友SILVERriver，这是我们在交谈中他说的话。生活完全过的下去，但是感觉没有什么色彩，很单调，也没有目标 当下的我们，都陷入了这种状态，当新的事物出现，会不由自主地联想到旧事物，仿佛总是沉浸在过去之中。我们在寻找能激发动力的事，SILVERriver说或许给我写作他会有动力！用邮件的形式，对内心的整理，我能明白他的感受，好友的行为必须重视！ 如果这次面试顺利的话，我就把“没人要”收养了，但我还是没能做到“没人要”是一只流浪猫，很温顺，是我给它取了这名。她很粘人，尾巴老是甩个不停的，跟我很亲近，喜欢屁颠屁颠的跟着我，就是很挑食。有段时间没见她了，我特意去找过她，早上和晚上，打着手电，在一条条巷子里寻找，还是不见踪影，也许已经有归宿了吧。如果她能说话，她也会想给我取名“没人理”的。 明明有很多的事情想做，明明知道时间不够用，但就是管不住的挥霍，一种近似报复性的摆烂。一直在存钱，虽说有存款才有安全感，但真的要被房子和车子牢牢拴住吗。已经开始尝试多和女生打交道，看看身边的人是怎样生活的，看看大家对自己的评价，可伴随着的还是会有一种失落。言语之间对方家庭的优渥。。原来，真的有这种心理落差啊。在我坐公交、蹬单车的时候，她们出行已经纯自驾了，当升学的时候，她们有考虑出国留学，而我是没有选择的，家里忙不过来会请保洁阿姨，而我的老妈就是做家政工作的…令我疑惑的是，尽管如此，她们也还是会莫名的焦虑，一种自己都说不清，道不明的焦虑。相比之下，我的生活，单调但是轻松啊。 嗯，下阶段，争取找个在乎自己的人吧 不能为了恋爱而恋爱","tags":["近况"],"categories":["生活纪实"]},{"title":"找工作","path":"/2024/01/15/other/选择/","content":"前言8月份裸辞，10月份拿到驾照，11月正式开始找工作，截止到12月中旬，只有一个offer（有些差太多我直接拒绝了，还是太年轻起码留作保底的），身心疲惫。 找工作的时候，最能感受到世界的荒诞 进厂 说到这个offer，当时不想再找了，接受这家的，空调厂，包吃住，但是单休，只有五险试用期还不交。。地点在佛山，貌似还有点偏，说自己是甲方，工作内容是运维开发，不知是否有诈...真就Java从入门到进厂，过完23岁的生日就去入职。 到了那，情况非常不对劲，整个公司从上到下都给人一种很明显的随意，消极。给我安排的电脑勉强能用，里头很多重要文件（薪资，架构，工作安排）。头几天，上班没事做下班更没事，真就是每天至少八小时的睡眠，但是我又看他们老员工忙得飞起，纳闷🤔。后续奇怪的事情来了，我要负责一个PLM项目的运维，跟乙方的实施打交道，那家伙老油条，成天笑呵呵，搞得我浑身不自在😣，结果他告诉我运维就只是涉及到权限的分配和管控…让我在那画了几天的Excel表说是熟悉项目，还要向三个不同的对象做日报，吐血。没有办法，权衡利弊后还是撂挑子——不干了。 也因此和麦哥有了一次谈心，麦哥是我的直属上级，人挺好，无论是否在工作中与这种人相处都会很愉快。才得知好几个同事都是像我这样开发招进来做项目运维的，这里的IT部也一直是这种模式。待了两周吧，中间找到大学室友游玩了一天，现在还是要告别食堂的打饭大哥，决定提桶&#x2F;_ \\ 我给出的辞职理由是这样的一个是我对现在的工作没啥热情，对公司也没啥感觉二是我也怕自己以后的发展，工作内容有点大相径庭三是这边太偏还单休，我没车，就相当于哪都去不了一直在厂里面的，没有社交我觉得挺可怕 这公司我也是无语&#x3D;_&#x3D;，辞个职费了好大劲，各种手续，拿材料，到处寻人，找人签字，走之前还跟HR发生了一点矛盾，得亏意识得早。 觉得自己挺失败的，找的工作都是这么不堪，灰溜溜的又回去，真窝囊。马上就是过年，老妈让我避开春运提前回去，相个亲啥的。。他们不是这个行业的，但他们也知道今年工作难找，在父母眼里，大概找对象和找工作都是重要的事。 奇葩 BOSS直聘挺多奇葩的，各种不读不回，已读不回，有些主动索要简历，有些准备约面试，或者提出加微信，结果加完微信约面试又不理。约面试几乎都是线下，一来二去成本贼高，到后面再有线下面我直接拒了，各个环节HR们都可能会玩失踪。当然，主要还是大环境不好，求职的人多如牛毛，稍微留意下就会发现——凡是最近发布的岗位，都会有上百次回复。 这段时间东奔西跑，各种交通方式组合，去了佛山，广州，惠州，住了一次青旅，在表姐家借宿过一晚，在凌晨1点打车回家。我终于理解了为什么同事们每天都在吐槽公司却又从不考虑换工作，找工作太糟心。 我依稀记得第一次面试的时候，在南京，没坐过地铁又不愿尝试，硬生生地骑共享单车十公里去面试。作为学生，时间和体力是我能付出的最大成本了。回去的时候胆怯骑车，才知道公司楼下就是地铁站。那次面试，真的把大学生在求职环境下的各种不知所措表现得淋漓尽致，我全程被牵着鼻子走——《当代大学生最大弱点：太有素质》，遇到那些职场上的老油条，处处显弱，不够强硬，不会拒绝。 后面也长见识了，自己意识到这些玩意儿都是培训班的套路。培训班这种现象已经持续很多年了，打着招聘的名义邀你进去搞培训，还美其名曰没有学费，提供吃住，后续只要你肯为他们工作一段时间，或是自主择业拿出工资“回馈”。现如今，外面的招聘都要求三到五年的工作经验，那么有些培训班就会要求早几年毕业的，以此来方便他们的学员包装工作经验——从学历到离职证明、工资流水，都有造假的渠道。这个社会有点畸形 比起这些，面试本身也是充满了稀奇古怪。中间有一家很干脆直接约面试，我稍稍问了下面试流程和薪资范围，到现场是一个商场，一个正在装修中的健身房？面试过程一言难尽。。问我一些基本情况，有没有创业的想法做技术合伙啥的，他们是拒资本的。本着好奇的心理，中间看了一段简陋的小视频，看了一本册子，有一首自己写的词，大抵是在介绍他们自己，什么草根，什么五年规划，还讲到他们老板的发家史，整个挺牛的背景，说是搞总裁培训的，人脉之广无法想象，有二十多年的健身房行业经验。一个挺漂亮的女生主动聊起自己的经历，刚毕业一年，是做设计出身的，刚来到这里也是我这种心态，觉得不可思议，打工太卷了便想尝试下跟随导师创业。。 后面在那里吃了顿大锅饭，晚上见到老板，下了好一阵象棋，结束后一个个围成圈坐在那，一顿吹嘘，话都说不圆含糊不清，本来还有点好奇的，顿时没了兴致。那家伙讲得太浮夸，现代社会还整的自己手眼通天一样。对了，他们搞了个团队介绍，讲讲自己来这里之前的一些经历，以及为什么选择跟着老板创业的。我没啥心思听，权当看乐子，比较惊讶的是他们的年龄，大都和我差不多，毕业一两年，工作情况都不太顺的样子，我猜这共同特征也是他们老板有意筛选的结果，最大的应该25岁，最小的才18。实在听不下去了，如坐针毡，但是那么多人自己实在不好脱身，于是给出一副漫不经心的样子，熬到好不容易结束，老板提出有床位让我留下来，和团队相处三天看表现，我反正是一声不吭，这tm绝逼是不能待的。散会，有个老哥一直缠着我，想把我领宿舍去…一路上说的乱七八糟，我真是服了：这家伙怎么这么能说，说的还牛头不对马嘴。本着最后一丝耐心和理智，到了他们小区门口，我开始反击，反问他们：我估摸着他们来到这的时间也挺短，怎么就这么对老板说的话深信不疑呢？老板真就这么大威望？额，具体的回答不太记得，好像是说刚开始也是我这样想的，但是相处后觉得老板挺有魄力的。那好，再问——这段时间内有实质性的工作内容吗，答没有，目前还是在跟着老板学技能，给我看了下他们的群聊，大概就是在群里“传授”些所谓的经验；问有工资吗，答没有，我们是做股东的，以后是要拿分红；问怎么入股的，答用的信用卡，交五万块钱。。得嘞，拜拜了您啦。中间还有点火药味，被我打哈哈带过去了，是他们略带炫耀似地谈起这段时间的经历，讲自己见过什么什么场面，跟同龄人比咋样咋样。展示了一段视频，遭人举报派出所上门稽查，阵仗还挺大。如何收尾的咱也不知道，但是我就寻思着一帮二十多岁的人从何谈起的阅历。不敢逗留，连夜打车回家。 后来发现BOSS直聘上他们的账号被冻结了，上网一搜，招聘也挺久了，小红书上有人发帖，评价这是庞氏骗局🤣，整个传销一样的套路。我也在这记录一下，佛山的美力时代健身，虽说浪费了半天的时间，但也好，哥们也算涨点见识。出门在外一定要学会拒绝！ 这件事情告一段落，来看一个知乎回答，好友老谷写的，他的一个切身经历，外面这都是些什么牛鬼蛇神啊，就没点稍微正常的工作吗？ https://www.zhihu.com/question/595259223/answer/3341924695https://www.zhihu.com/question/595259223/answer/3341924695 抉择 先说我的去向吧，接下了一个外包的offer，工作地点在东莞长安，离深圳挺近。没错，我还是没有去成大城市，虽然东莞也很好——湖南人的第二个故乡，从小就在这来返了，这边挺多外地人，大家都热情，跟我之前在南京实习相比好太多，那边给我的印象只有冷漠。东莞其实挺受人诟病的，但是不可否认这里还蛮适合生活的，认识的很多同事已经结婚生子了，上小学的都有，刚开始我还挺诧异，后来才发现这是个普遍现象，他们每天都驱车二三十公里上下班，甚至有跨市上班的。 聊回工作，最开始我的确对外包是嗤之以鼻的，但是就是这么现实，他们找到我就直接投简历了。说下待遇，提供吃住（单间，有餐补），据说很实惠；上下班有班车；六险一金，但是买深圳的；有下午茶；有转内编机会，后续面试问了需要熬年限的（很严苛）；有绩效奖金，无年终；上班时间早八点就开始，周一和周三需强制加班到九点（无加班费），周末加班能调休；线上面试；试用期六个月，薪资打折了一点点；总体来说，好坏参半吧，工资倒是不错。 外包，头一次面，在此之前就会告知你一些工作情况，不是藏藏掖掖的（这点挺好），会了解你的学历，目前状况，期望薪资，离职原因啥的。面试流程正式且繁琐，一共面了四轮，两轮技术，一轮项目经理，一轮人事，整体面试节奏快，考察的东西多，总之或多或少都会问一句。我除了第一面表现很烂外，后面的都还不错，都是甲方项目组在面，用的腾讯会议，中间两面露脸了（我是看面试官开摄像头了就跟着开，不过是用手机面的）。HR全程跟进，还会好心告知大致的面试方向，一些可能问到的题，让我们打有准备的仗🤣，后面我才知道她们是靠这个提成的。总体下来面试体验还是不错！发offer前要求提供个人所得税上的流水，有性格测评（做题）和背调（填个人信息，说是会委托第三方公司），挺正式。后续的话挺重视体检，这个只能说懂得都懂（没有个好的身体怎么敢让你猛加班啊），然后就是催入职😂，不过这倒无所谓，没想到的是合同居然还能线上签，内容有点霸王条款的味道。其实去拿体检结果的时候，我还莫名的有点怕，毛病终究是有的，视力下降了，脊柱呈生理性弯曲，血小板偏高，建议是要注意用眼和耳道卫生，才上两年班就开始燃烧生命了~ 现阶段就是留在东莞了，下一次自己没有足够的底气前，还是不要轻举妄动。如今已是2024年，龙年，第一批00后的本命年，太多的人活得迷茫，坎坷，只希望我们都能得偿所愿。一切，为了发展自己，连接更大的世界 心路历程很长一段时间没写博客。忙于找工作，前期自信狂妄，中期自我怀疑，后期焦虑摆烂。 刚开始准备的时候，一切还能按部就班，作息正常，锻炼照旧，学习不落。当随着简历很难投出，投出去的大部分也没回应，我开始意识到不对劲，去网上借鉴别人的简历，才反应过来自己的简历过于精简，后面大大小小地修了好几次，如果一开始够重视，兴许机会会好点。慢慢的，开始有了面试，但都是线下的，对我来说还是异地，劳神伤财免不了，几次下来身心俱疲，有些是工资给的不行，有些是技术太老，浪费了很多时间以及若干money。 很多面试随意、跳跃，喜欢问一些始料未及的问题，主打一个随机应变，纵使我不愿意撒谎，但面试的时候还是会鬼使神差地“胡扯”，能做到不卑不亢已经很好了。有些面试卑微的程度。。两句话就让你花出一个小时的时间，赢麻了 面试我都有录音，回去复盘，也是一种收获，发现短板。我以为自己交流方面应该还算可以的，但回看实际表现还是差强人意。 技术问题倒是能招架，但是回答时没有思路，没有条理，给人一种想到什么就说什么的感觉，而且回答得很急（如果遇到较真的面试官，追问深问，我大概率会被刷下去）； 表现有点僵硬，说话时而停顿，而且语速稍快，脑子还没想清楚就直接脱口而出，造成说话磕巴，中间还带一堆的”然后”（这种情况下如果对方不开口，自己就会很尴尬，因为自己可能也不知道卡顿的地方。我觉得很难给面试官留下好印象）； 老实，说话保守，不太会反驳； 好在后面我主动去搜寻了一些面试话术，锻炼一下，并主动联想一些问题，上面的短板修复不少。在面试中小试牛刀，但换来的还是一句“不太合适”。我很纳闷，每次面试都是满怀期待地去准备、应对，过程也是给我一种交谈甚欢的感觉，可怎么结果就这么不尽人意？离了个谱。我当然明白自己的弱势，首先是学历低，英语水平弱，找的时间稍晚，项目没什么竞争力，很多公司又往往要求具备该行业的从业经验，要求挺高，眼光挺刁，自己沟通方面还是欠缺。那些刷kpi的就不多说了，简直不干人事，一直挂着招聘，长年累月在上边收集简历。找工作我用了两个号，BOSS直聘开个分身分别登上去，有的时候这家投了没反应过几天换个号继续投，往往效果会好点，精心准备了一段招呼语（简短阐述自己的优势），尽量找HR们在线的时间段去聊，如果当前不在线，可以先收藏后面留意下，有的时候觉得自己非常符合条件但是消息已经已读了，可以再主动聊一次。 跟很多朋友聊过，大家的现状都不太妙，阿胖已经接近半年没工作，他还有房贷要还，老赵也是被降薪50%，老谷考研没把握，找工作也在犹豫…这么一看，身边尽是些负能量。慢慢的，不想打开BOSS了，开始堕落，连续通宵两三天整夜整夜地打游戏，不带停的，白天就睡大觉，浑浑噩噩，自我麻痹。我想有目标，我想做一个特别的人，我想充实自己。孤独的时候，我会很渴望说话，面对面的那种。虽然很会给自己解闷，会去模仿电视里、电影里的人物，但其实能够留给我的还是自言自语，这样的状态很不对劲。 想起离职的时候，我还甩给同事一句很酷的话：人总是会有办法的。我并没有后悔这一次的裸辞，因为我知道，如果不吸取这一次教训，倘若没这次经历往后迟早也会这样，自己永远都体会不到这种心境。这次经历是难得的，别人的劝诫不会再轻视，得亏现在年轻的时候试错成本小，下次就不会这么冲动。我的确欠缺太多，因此才拓宽了一些眼界，认识到很多优秀的人，以为自己不急躁，但其实还是不够沉稳。迷迷糊糊可能持续了一两周吧，中间稀里糊涂地面过几家，开始觉得打游戏也累，直到佛山的那家工厂给了offer，才结束这段荒诞的日子。本来想着进厂就进厂呗，能认识厂妹也好，可事情还是想得简单了。run之后，外包找到我，也就有了上文的抉择。 可是，没有牵挂，那你就会有去新环境适应的动力吗？我的动力，我好像没有什么动力，一开始裸辞的确是想换个新环境，但是这段时间找工作却很是消磨热情。大家都在拼了命的活着，我们更多是受父母的影响，受经过的教育影响，想挣扎出个人样，过得光鲜亮丽一些。 眼界决定了你的上限，很多会不会的东西其实就是知不知道的问题。在上大学之前，对外面的世界一无所知，当时的我没坐过电梯，没听过菜鸟驿站，不知道编程，吃喝玩乐永远都是那几样。当我意识到自己的家乡是如此的落后，开始不自主的嫌弃它了。虽然我的大学生活也并不丰富，但它让我真正知道什么是学无止境，很多东西都逐渐有了第一次尝试。直到参加工作，迷茫是长大的必修课。对于家庭出身一般的人来说，走开发这条路是对的。三百六十行，IT行业是最有希望让一个农村孩子靠自己买房买车的行业。每个时代有每个时代的局限和机会，今天也是一样。 工作感受前段时间广西妹子也找到我，但是她已经换地方，如今好像在做电商，问她位置却不肯告诉我，这样一来在长安就只有以前的组长了。此前她就在长安上班，这也是我想来长安的一个原因，奈何缘分不够，之前还在那可笑的记着别人早晚班的日子。幸好，这些可笑的事只有我自己知道，这次我不想理她，没有说话的欲望，与这种人打交道太累，不该倾注那么多的热情。另一半应该是相互吸引的人，也罢，往后应该也分不了心了。独立的人很难打交道，未来我也很迷茫。没有那种年龄焦虑，我希望自己能够尽快独当一面，不光是事业上的，还有一些家庭决策上的。 如今我的生活只剩下工作，是对技术的热爱，对新东西的好奇驱使着我，但我不知道这种热情会持续多久，我眼里的光什么时候会被淹没。我只想让那一天尽可能来的晚一些，有趣的灵魂多保持一天。 在这快一个月了，虽说我是外包驻场，但是这里工作氛围挺不错，没有什么特别的歧视，工号不同，权限小，充饭卡麻烦点，平时吃饭大伙也会在一块儿。工作压力可以预想到，往后应该挺大的。这段时间，我们组吃了个年饭，去了KTV，席间还介绍了一下我们新人，再到参加部门年会。独来独往惯了的一个人一下面对一大堆热情似火的同事，就是这么不知所措。 眼前这个小鬼让他刮目相看，他这一生都在反抗别人，是为了让自己看起来很重要 我的心态也是真的变了，老是带点卑微、害怕，要知道此前入职过的两家公司，都展现出了放荡不羁的一面。尽管他们已经尽力消除隔阂了，但现实中的各处差异一直告诉着我，你是个外包仔。根据在这里跟大家的接触，有很多潜规则。。人再次被分为三六九等，只不过没有人会明说 中间闹过一个大笑话，某天早上乘电梯，被人群挤在了最里面，瞅准机会拍了下前边人的手臂，叫了声大哥，让帮按下楼层，他也不吭不响帮按了。他出电梯后，旁边的人面面相觑，一脸错愕地看着我，问我刚才你叫他什么，我说大哥啊，怎么啦。这回是带点嬉笑的问我，你知道他是谁吗，我脱口而出不知道，这下把前面的女生也逗笑了，回过头来欲言又止🤔，我有点手足无措，说道怎么了。这时到了楼层，一开始对我发问的人和我一起走出电梯，说：你不知道他是谁吗？又问我叫啥名，哪个科室的，认识他吗，我如实回答了，不认识他，还问他是哪个科室的，结果他一脸好气又好笑的样子，我更加懵逼，但是看他又停到我组长位置上，我只好径直走向了工位。我还有点遗憾，没把事情搞清楚。紧接着，组长就问我了：你不认识咱们部门的总经理嘛？上次部门年会上致辞的那位，然后又说咱们软件科的科长也不认识吗？我靠，好家伙，部长、科长都在电梯里，我不认识，还管部长叫大哥，让帮按下楼层，跟科长并肩走出电梯，还在那一个劲地问怎么啦。这下好了，双方都认识了，现在想想我这家伙也真是傻的可爱，难怪那时电梯里大家那样表现🤣，我这吊毛…前几天的开工红包算是白拿了 我在这里认识的第一个人是一个很酷的朋友，酷到什么程度呢，人很酷，说的话和说话的方式都很酷，做事的方式更酷！入职第一天，是他带我到食堂吃饭，还帮我刷的卡，大我两岁，考研落榜才选择了工作，每天上班总是来得最晚的一个。emm，他口中的考研失败其实是指上不了名校。这家伙平时挺不苟言笑的，但其实很好相处，也喜欢骑车，带我打乒乓球，还教我打台球，现在午饭后第一个到台球室的几乎必是我😁。在这一直做的是公司并发量最高的一个项目，据他所说，对并发场景啥的已经无感了。。工作中写了诸多脚本，还写了个管理页面方便自己使用，LeetCode 更是刷了超一千两百道题，恐怖如斯！我寻思着，跟他打交道定能学到很多有趣的东西，可惜呀，他告诉我他准备离职了，自己存不住钱，得涨涨薪，将来会去广州，后面也许只剩一个月的相处时间。 他问我，会打算在这里干多久呢？当时没想好，现在我想应该清楚了，当我在这里学不到东西的时候，当我在这里只是一昧地做重复工作的时候，当我不满足于我的薪资的时候。这应该也是他的工作方式吧，那位很酷的朋友~","tags":["近况"],"categories":["生活纪实"]},{"title":"分布式事务详解","path":"/2023/11/09/study/分布式事务详解/","content":"这是一篇转载文章，感觉挺有帮助的~ 原文链接：语雀 分布式事务：在分布式系统中一次操作需要由多个服务协同完成，这种由不同的服务之间通过网络协同完成的事务称为分布式事务 一、2PC2PC，两阶段提交，将事务的提交过程分为资源准备和资源提交两个阶段，并且由事务协调者来协调所有事务参与者，如果准备阶段所有事务参与者都预留资源成功，则进行第二阶段的资源提交，否则事务协调者回滚资源。 第一阶段：准备阶段由事务协调者询问通知各个事务参与者，是否准备好了执行事务，具体流程如下： ① 协调者向所有参与者发送事务内容，询问是否可以提交事务，并等待答复 ② 各参与者执行本地事务操作，将 undo 和 redo 信息记入事务日志中（但不提交事务） ③ 如参与者执行成功，给协调者反馈同意，否则反馈中止，表示事务不可以执行 第二阶段：提交阶段协调者收到各个参与者的准备消息后，根据反馈情况通知各个参与者 commit 提交或者 rollback 回滚 （1）事务提交 当第一阶段所有参与者都反馈同意时，则意味着完成事务，协调者发起正式提交事务的请求，具体流程如下： ① 协调者节点向所有参与者节点发出正式提交的 commit 请求。 ② 收到协调者的 commit 请求后，参与者正式执行事务提交操作，并释放在整个事务期间内占用的资源。 ③ 参与者完成事务提交后，向协调者节点发送 ACK 消息。 ④ 协调者节点收到所有参与者节点反馈的 ACK 消息后，完成事务。 正常提交时，事务的完整流程图 （2）事务回滚 如果任意一个参与者节点在第一阶段返回的消息为中止，或者协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时，那么这个事务将会被回滚，具体流程如下： ① 协调者向所有参与者发出 rollback 回滚操作的请求 ② 参与者利用阶段一写入的 undo 信息执行回滚，并释放在整个事务期间内占用的资源 ③ 参与者在完成事务回滚之后，向协调者发送回滚完成的 ACK 消息 ④ 协调者收到所有参与者反馈的 ACK 消息后，取消事务 2PC的缺点二阶段提交确实能够提供原子性的操作，但是二阶段提交还是有几个缺点的： （1）性能问题：执行过程中，所有参与节点都是事务阻塞性的，当参与者占有公共资源时，其他第三方节点访问公共资源就不得不处于阻塞状态，为了数据的一致性而牺牲了可用性，对性能影响较大，不适合高并发高性能场景 （2）可靠性问题：2PC非常依赖协调者，当协调者发生故障时，尤其是第二阶段，那么所有的参与者就会都处于锁定事务资源的状态中，而无法继续完成事务操作（如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题） （3）数据一致性问题：在阶段二中，当协调者向参与者发送 commit 请求之后，发生了局部网络异常或者在发送 commit 请求过程中协调者发生了故障，这会导致只有一部分参与者接收到 commit 请求从而执行提交操作，但是其他部分未接到 commit 请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据不一致性的现象。 （4）二阶段无法解决的问题：协调者在发出 commit 消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了，那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否已经被提交。 二、3PC3PC，三阶段提交协议，是二阶段提交协议的改进版本，三阶段提交有两个改动点（1）在协调者和参与者中都引入超时机制（2）在第一阶段和第二阶段中插入一个准备阶段，保证了在最后提交阶段之前各参与节点的状态是一致的。 所以3PC会分为3个阶段，CanCommit 准备阶段、PreCommit 预提交阶段、DoCommit 提交阶段，处理流程如下： 阶段一：CanCommit 准备阶段协调者向参与者发送 canCommit 请求，参与者如果可以提交就返回 Yes 响应，否则返回 No 响应，具体流程如下： （1）事务询问：协调者向所有参与者发出包含事务内容的 canCommit 请求，询问是否可以提交事务，并等待所有参与者答复。 （2）响应反馈：参与者收到 canCommit 请求后，如果认为可以执行事务操作，则反馈 yes 并进入预备状态，否则反馈 no。 阶段二：PreCommit 阶段协调者根据参与者的反应情况来决定是否可以进行事务的 PreCommit 操作。根据响应情况，有以下两种可能： （1）执行事务 假如所有参与者均反馈 yes，协调者预执行事务，具体如下： ① 发送预提交请求：协调者向参与者发送 PreCommit 请求，并进入准备阶段 ② 事务预提交 ：参与者接收到 PreCommit 请求后，会执行本地事务操作，并将 undo 和 redo 信息记录到事务日志中（但不提交事务） ③ 响应反馈 ：如果参与者成功执行了事务操作，则返回 ACK 响应，同时开始等待最终指令。 （2）中断事务 假如有任何一个参与者向协调者发送了 No 响应，或者等待超时之后，协调者没有接收到所有参与者的响应，那么就执行事务的中断，流程如下： ① 发送中断请求 ：协调者向所有参与者发送 abort 请求。 ② 中断事务 ：参与者收到来自协调者的 abort 请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。 阶段三：doCommit 阶段该阶段进行真正的事务提交，也可以分为以下两种情况： （1）提交事务 ① 发送提交请求：协调接收到所有参与者发送的 ACK 响应，那么他将从预提交状态进入到提交状态，并向所有参与者发送 doCommit 请求 ② 本地事务提交：参与者接收到 doCommit 请求之后，执行正式的事务提交，并在完成事务提交之后释放所有事务资源 ③ 响应反馈：事务提交完之后，向协调者发送 ack 响应。 ④ 完成事务：协调者接收到所有参与者的 ack 响应之后，完成事务。 上图的“第五步”是错误的，应该是”执行事务但不提交事务“ （2）中断事务：任何一个参与者反馈 no，或者等待超时后协调者尚无法收到所有参与者的反馈，即中断事务 ① 发送中断请求：如果协调者处于工作状态，向所有参与者发出 abort 请求 ② 事务回滚：参与者接收到 abort 请求之后，利用其在阶段二记录的 undo 信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。 ③ 反馈结果：参与者完成事务回滚之后，向协调者反馈 ACK 消息 ④ 中断事务：协调者接收到参与者反馈的 ACK 消息之后，执行事务的中断。 进入 doCommit 阶段后，无论协调者出现问题，或者协调者与参与者之间的网络出现问题，都会导致参与者无法接收到协调者发出的 doCommit 请求或 abort 请求。此时，参与者会在等待超时之后，继续执行事务提交。这其实基于概率来决定的，当进入第三阶段时，说明第一阶段收到所有参与者的 CanCommit 响应都是 Yes，意味着大家都同意修改了，并且第二阶段所有的参与者对协调者的 PreCommit 请求也都是同意的。所以，一句话概括就是，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到 commit 或者 abort 响应，但是他有理由相信：成功提交的几率很大。 3PC的优缺点与2PC相比，3PC降低了阻塞范围，并且在等待超时后，协调者或参与者会中断事务，避免了协调者单点问题，当阶段三中协调者出现问题时，参与者会继续提交事务。 数据不一致问题依然存在，假设参与者收到 preCommit 请求后等待 doCommit 指令时，此时协调者请求中断事务，如果因为网络问题无法与所有参与者正常通信，会导致部分参与者继续提交事务，可能造成数据不一致。 2PC和3PC都无法保证数据绝对的一致性，一般为了预防这种问题，可以添加一个报警，比如监控到事务异常的时候，通过脚本自动补偿差异的信息。 三、TCC什么是TCCTCC（Try Confirm Cancel）是应用层的两阶段提交，所以对代码的侵入性强，其核心思想是：针对每个操作，都要实现对应的确认和补偿操作，也就是业务逻辑的每个分支都需要实现 try、confirm、cancel 三个操作，第一阶段由业务代码编排来调用 Try 接口进行资源预留，当所有参与者的 Try 接口都成功了，事务协调者提交事务，并调用参与者的 confirm 接口真正提交业务操作，否则调用每个参与者的 cancel 接口回滚事务，并且由于 confirm 或者 cancel 有可能会重试，因此对应的部分需要支持幂等。 TCC的执行流程TCC的执行流程可以分为两个阶段，分别如下： （1）第一阶段：Try，业务系统做检测并预留资源 (加锁，锁住资源)，比如常见的下单，在 try 阶段，并不是真正的减库存，而是把下单的库存给锁定住。 （2）第二阶段：根据第一阶段的结果决定是执行 confirm 还是 cancel Confirm：执行真正的业务（执行业务，释放锁） Cancle：是对 Try 阶段预留资源的释放（出问题，释放锁） TCC如何保证最终一致性 TCC 事务机制以 Try 为中心的，Confirm 确认操作和 Cancel 取消操作都是围绕 Try 而展开。因此，Try 阶段中的操作，其保障性是最好的，即使失败，仍然有 Cancel 取消操作可以将其执行结果撤销。 Try 阶段执行成功并开始执行 Confirm 阶段时，默认 Confirm 阶段是不会出错的，也就是说只要 Try 成功，Confirm 一定成功（TCC设计之初的定义） Confirm 与 Cancel 如果失败，由 TCC 框架进行重试补偿 存在极低概率在CC环节彻底失败，则需要定时任务或人工介入 TCC的注意事项 （1）允许空回滚 空回滚出现的原因是 Try 超时或者丢包，导致 TCC 分布式事务二阶段的回滚，触发 Cancel 操作，此时事务参与者未收到 Try，但是却收到了 Cancel 请求。 所以 cancel 接口在实现时需要允许空回滚，也就是 Cancel 执行时如果发现没有对应的事务 xid 或主键时，需要返回回滚成功，让事务服务管理器认为已回滚。 （2）防悬挂控制 悬挂指的是二阶段的 Cancel 比一阶段的 Try 操作先执行，出现该问题的原因是 Try 由于网络拥堵而超时，导致事务管理器生成回滚，触发 Cancel 操作，但之后拥堵在网络的 Try 操作又被资源管理器收到了，但是 Cancel 比 Try 先到。但按照前面允许空回滚的逻辑，回滚会返回成功，事务管理器认为事务已回滚成功，所以此时应该拒绝执行空回滚之后到来的 Try 操作，否则会产生数据不一致。 因此我们可以在 Cancel 空回滚返回成功之前，先记录该条事务 xid 或业务主键，标识这条记录已经回滚过，Try 接口执行前先检查这条事务 xid 或业务主键是否已经标记为回滚成功，如果是则不执行 Try 的业务操作。 （3）幂等控制 由于网络原因或者重试操作都有可能导致 Try - Confirm - Cancel 3个操作的重复执行，所以使用 TCC 时需要注意这三个操作的幂等控制，通常我们可以使用事务 xid 或业务主键判重来控制。 TCC方案的优缺点（1）TCC 事务机制相比于上面介绍的 XA 事务机制，有以下优点： 性能提升：具体业务来实现，控制资源锁的粒度变小，不会锁定整个资源。 数据最终一致性：基于 Confirm 和 Cancel 的幂等性，保证事务最终完成确认或者取消，保证数据的一致性。 可靠性：解决了 XA 协议的协调者单点故障问题，由主业务方发起并控制整个业务活动，业务活动管理器也变成多点，引入集群。 （2）缺点：TCC 的 Try、Confirm 和 Cancel 操作功能要按具体业务来实现，业务耦合度较高，提高了开发成本。 四、Saga事务什么是Saga事务Saga 事务核心思想是将长事务拆分为多个本地短事务并依次正常提交，如果所有短事务均执行成功，那么分布式事务提交；如果出现某个参与者执行本地事务失败，则由 Saga 事务协调器协调根据相反顺序调用补偿操作，回滚已提交的参与者，使分布式事务回到最初始的状态。Saga 事务基本协议如下： （1）每个 Saga 事务由一系列幂等的有序子事务(sub-transaction) Ti 组成。 （2）每个 Ti 都有对应的幂等补偿动作 Ci，补偿动作用于撤销 Ti 造成的结果。 与 TCC 事务补偿机制相比，TCC 有一个预留(Try)动作，相当于先保存一个草稿，然后才提交；Saga 事务没有预留动作，直接提交。 Saga的恢复策略对于事务异常，Saga 提供了两种恢复策略，分别如下： （1）向后恢复(backward recovery) 当执行事务失败时，补偿所有已完成的事务，是“一退到底”的方式，这种做法的效果是撤销掉之前所有成功的子事务，使得整个 Saga 的执行结果撤销。如下图： 从上图可知事务执行到了支付事务T3，但是失败了，因此事务回滚需要从C3,C2,C1依次进行回滚补偿，对应的执行顺序为：T1,T2,T3,C3,C2,C1。 （2）向前恢复(forward recovery) 对于执行不通过的事务，会尝试重试事务，这里有一个假设就是每个子事务最终都会成功，这种方式适用于必须要成功的场景，事务失败了重试，不需要补偿。 Saga事务的实现方式Saga 事务有两种不同的实现方式，分别如下： （1）命令协调（Order Orchestrator） 中央协调器（Orchestrator，简称 OSO）以命令&#x2F;回复的方式与每项服务进行通信，全权负责告诉每个参与者该做什么以及什么时候该做什么。整体流程如下图： ① 事务发起方的主业务逻辑请求 OSO 服务开启订单事务 ② OSO 向库存服务请求扣减库存，库存服务回复处理结果。 ③ OSO 向订单服务请求创建订单，订单服务回复创建结果。 ④ OSO 向支付服务请求支付，支付服务回复处理结果。 ⑤ 主业务逻辑接收并处理 OSO 事务处理结果回复。 中央协调器 OSO 必须事先知道执行整个事务所需的流程，如果有任何失败，它还负责通过向每个参与者发送命令来撤销之前的操作来协调分布式的回滚，基于中央协调器协调一切时，回滚要容易得多，因为协调器默认是执行正向流程，回滚时只要执行反向流程即可。 （2）事件编排（Event Choreographyo） 命令协调方式基于中央协调器实现，所以有单点风险，但是事件编排方式没有中央协调器。事件编排的实现方式中，每个服务可以产生自己的事件并监听其他服务的事件来决定是否采取行动。 在事件编排方法中，第一个服务执行一个事务，然后发布一个事件，该事件被一个或多个服务进行监听，这些服务再执行本地事务并发布（或不发布）新的事件。当最后一个服务执行本地事务并且不发布任何事件时，意味着分布式事务结束，或者它发布的事件没有被任何 Saga 参与者监听到都意味着事务结束。 ① 事务发起方的主业务逻辑发布开始订单事件。 ② 库存服务监听开始订单事件，扣减库存，并发布库存已扣减事件。 ③ 订单服务监听库存已扣减事件，创建订单，并发布订单已创建事件。 ④ 支付服务监听订单已创建事件，进行支付，并发布订单已支付事件。 ⑤ 主业务逻辑监听订单已支付事件并处理。 如果事务涉及 2 至 4 个步骤，则非常合适使用事件编排方式，它是实现 Saga 模式的自然方式，它很简单，容易理解，不需要太多的代码来构建。 Saga事务的优缺点 （1）命令协调设计的优缺点 ① 优点： 服务之间关系简单，避免服务间循环依赖，因为 Saga 协调器会调用 Saga 参与者，但参与者不会调用协调器。 程序开发简单，只需要执行命令&#x2F;回复(其实回复消息也是一种事件消息)，降低参与者的复杂性。 易维护扩展，在添加新步骤时，事务复杂性保持线性，回滚更容易管理，更容易实施和测试。 ② 缺点： 中央协调器处理逻辑容易变得庞大复杂，导致难以维护。 存在协调器单点故障风险。 （2）事件编排设计的优缺点 ① 优点： 避免中央协调器单点故障风险。 当涉及的步骤较少服务开发简单，容易实现。 ② 缺点： 服务之间存在循环依赖的风险。 当涉及的步骤较多，服务间关系混乱，难以追踪调测。 由于 Saga 模型没有 Prepare 阶段，因此事务间不能保证隔离性。当多个 Saga 事务操作同一资源时，就会产生更新丢失、脏数据读取等问题，这时需要在业务层控制并发，例如：在应用层面加锁，或者应用层面预先冻结资源。 五、本地消息表什么是本地消息表本地消息表的核心思路就是将分布式事务拆分成本地事务进行处理，在该方案中主要有两种角色：事务主动方和事务被动方。事务主动发起方需要额外新建事务消息表，并在本地事务中完成业务处理和记录事务消息，并轮询事务消息表的数据发送事务消息，事务被动方基于消息中间件消费事务消息表中的事务。 这样可以避免以下两种情况导致的数据不一致性： 业务处理成功、事务消息发送失败 业务处理失败、事务消息发送成功 本地消息表的执行流程① 事务主动方在一个本地事务中处理业务和写消息表操作② 事务主动方通过消息中间件，通知事务被动方处理事务消息。消息中间件可以基于 Kafka、RocketMQ 消息队列，事务主动方主动写消息到消息队列，事务消费方消费并处理消息队列中的消息。③ 事务被动方通过消息中间件，通知事务主动方事务已处理的消息。④ 事务主动方接收中间件的消息，更新消息表的状态为已处理。 一些必要的容错处理如下当①处理出错，由于还在事务主动方的本地事务中，直接回滚即可当②、③处理出错，由于事务主动方本地保存了消息，只需要轮询消息重新通过消息中间件发送，通知事务被动方重新读取消息处理业务即可。如果是业务上处理失败，事务被动方可以发消息给事务主动方回滚事务如果事务被动方已经消费了消息，事务主动方需要回滚事务的话，需要发消息通知事务主动方进行回滚事务。 本地消息表的优缺点 （1）优点 从应用设计开发的角度实现了消息数据的可靠性，消息数据的可靠性不依赖于消息中间件，弱化了对 MQ 中间件特性的依赖 方案轻量，容易实现 （2）缺点 与具体的业务场景绑定，耦合性强，不可公用 消息数据与业务数据同库，占用业务系统资源 业务系统在使用关系型数据库的情况下，消息服务性能会受到关系型数据库并发性能的局限 六、MQ事务消息MQ事务消息的执行流程基于 MQ 的分布式事务方案本质上是对本地消息表的封装，整体流程与本地消息表一致，唯一不同的就是将本地消息表存在了 MQ 内部，而不是业务数据库中，如下图： 由于将本地消息表存在了 MQ 内部，那么 MQ 内部的处理尤为重要，下面主要基于 RocketMQ4.3 之后的版本介绍 MQ 的分布式事务方案 RocketMQ事务消息在本地消息表方案中，保证事务主动方发写业务表数据和写消息表数据的一致性是基于数据库事务，而 RocketMQ 的事务消息相对于普通 MQ 提供了 2PC 的提交接口，方案如下： （1）正常情况 在事务主动方服务正常，没有发生故障的情况下，发消息流程如下： 步骤①：发送方向 MQ Server(MQ服务方) 发送 half 消息 步骤②：MQ Server 将消息持久化成功之后，向发送方 ack 确认消息已经发送成功 步骤③：发送方开始执行本地事务逻辑 步骤④：发送方根据本地事务执行结果向 MQ Server 提交二次确认（commit 或是 rollback） 最终步骤：MQ Server 如果收到的是 commit 操作，则将半消息标记为可投递，MQ 订阅方最终将收到该消息；若收到的是 rollback 操作则删除 half 消息，订阅方将不会收到该消息 （2）异常情况 在断网或者应用重启等异常情况下，图中的步骤④提交的二次确认超时未到达 MQ Server，此时的处理逻辑如下： 步骤⑤：MQ Server 对该消息发起消息回查 步骤⑥：发送方收到消息回查后，需要检查对应消息的本地事务执行的最终结果 步骤⑦：发送方根据检查得到的本地事务的最终状态再次提交二次确认 最终步骤：MQ Server基于 commit&#x2F;rollback 对消息进行投递或者删除 MQ事务消息的优缺点（1）优点：相比本地消息表方案，MQ 事务方案优点是： 消息数据独立存储 ，降低业务系统与消息系统之间的耦合 吞吐量大于使用本地消息表方案 （2）缺点： 一次消息发送需要两次网络请求(half 消息 + commit&#x2F;rollback 消息) 业务处理服务需要实现消息状态回查接口 七、最大努力通知最大努力通知也称为定期校对，是对 MQ 事务方案的进一步优化。它在事务主动方增加了消息校对的接口，如果事务被动方没有接收到主动方发送的消息，此时可以调用事务主动方提供的消息校对的接口主动获取 在可靠消息事务中，事务主动方需要将消息发送出去，并且让接收方成功接收消息，这种可靠性发送是由事务主动方保证的；但是最大努力通知，事务主动方仅仅是尽最大努力（重试，轮询….）将消息发送给事务接收方，所以存在事务被动方接收不到消息的情况，此时需要事务被动方主动调用事务主动方的消息校对接口查询业务消息并消费，这种通知的可靠性是由事务被动方保证的。 所以最大努力通知适用于业务通知类型，例如微信交易的结果，就是通过最大努力通知方式通知各个商户，既有回调通知，也有交易查询接口。 八、各方案常见使用场景总结 2PC&#x2F;3PC：依赖于数据库，能够很好的提供强一致性和强事务性，但延迟比较高，比较适合传统的单体应用，在同一个方法中存在跨库操作的情况，不适合高并发和高性能要求的场景 。 TCC：准备阶段业务多，锁粒度小，性能要求高， 只要把 try、confirm、cancel 各阶段的逻辑捋清楚就可以使用 TCC 了， 但是存在业务耦合。 本地消息表&#x2F;MQ 事务：适用于事务中参与方支持操作幂等，对一致性要求不高，业务上能容忍数据不一致 到一个人工检查周期，事务涉及的参与方、参与环节较少，业务上有对账&#x2F;校验系统兜底。 Saga 事务：由于 Saga 事务不能保证隔离性，需要在业务层控制并发，适合于业务场景事务并发操作同一资源较少的情况。Saga 由于缺少预提交动作，导致补偿动作的实现比较麻烦，例如业务是发送短信，补偿动作则得再发送一次短信说明撤销，用户体验比较差。所以，Saga 事务较适用于补偿动作容易处理的场景 Seata AT 模式 AT 模式，是 seata 的默认&#x2F;独有模式，也是实际项目中比较常用的一种模式，采用的也是两阶段提交，不过弥补了 XA 模式中资源锁定周期过长的缺点，相对于 XA 来说，性能更好一些，但缺点就是数据不是强一致，因为它的数据会真实的提交到数据库的，而如果后面做分支事务有问题的话，回滚靠的是日志来实现最终一致。 AT 模式需要用到几张数据库表： 镜像日志表：undo_log 分支事务表：branch_table 全局事务表：global_table 全局锁表：lock_table 一阶段1、解析 SQL：得到 SQL 的类型（UPDATE），表（table），条件（where name &#x3D; ‘xxx’）等相关的信息2、查询前镜像：根据解析得到的条件信息，生成查询语句，定位数据，得到前镜像3、执行业务 SQL：操作这条记录4、查询后镜像：根据前镜像的结果，通过主键定位数据，得到后镜像5、插入回滚日志：把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 UNDO_LOG 表中6、提交前，向 TC 注册分支：申请 table 表中，等于该主键值的记录的全局锁 7、本地事务提交：业务数据的更新和前面步骤中生成的 UNDO_LOG 一并提交8、将本地事务提交的结果上报给 TC二阶段-提交1、收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC2、异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录二阶段-回滚收到 TC 的分支回滚请求，开启一个本地事务，执行如下操作：1、通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。2、数据校验：拿 UNDO LOG 中的后镜像与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改。这种情况，需要根据配置策略来做处理，默认会有重试机制。3、根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句4、提交本地事务，并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC","tags":["转载","分布式"],"categories":["技能"]},{"title":"23种设计模式","path":"/2023/11/03/study/23种设计模式/","content":"使用书籍：《大话设计模式》——程杰著 相关代码：Gitee 使用设计模式的目的：可维护、可扩展、可复用、灵活性好 装逼，写一些别人看不懂的代码 一、简单工厂模式个人理解：通过创建同一类型下的不同子类来实现多态，难点在于定义抽象类，需要找出共同特征，确保需要实现的方法返回值相同，参数一致 二、策略模式 面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类 用工厂来生成算法对象，这没有错，但算法本身只是一种策略，最重要的是这些算法是随时都可能互相替换的，这就是变化点，而封装变化点是我们面向对象的一种很重要的思维方式 策略模式是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合 当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的 Strategy类中，可以在使用这些行为的类中消除条件语句 个人理解：在简单工厂模式的基础上增加了一层 context，使得具体的业务策略与客户端分离，减少了各种算法类与使用算法类之间的耦合 三、单一职责原则就一个类而言，应该仅有一个引起它变化的原因 四、开放封闭原则 对于扩展是开放的，对于修改是封闭的 我们在做任何系统的时候，都不要指望系统一开始时需求确定，就再也不会变化，这是不现实也不科学的想法 开发人员应该仅对程序中呈现出频繁变化的那些部分 做出抽象，然而， 对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要 五、依赖倒转原则 抽象不应该依赖细节，细节应该依赖于抽象 针对接口编程，不要对实现编程 里氏代换原则：子类型必须能够替换掉它们的父类型 一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化 也正因为有了这个原则，使得继承复用成为可能。只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为 正是由于子类型的可替换性才使得使用父类类型的模块在无须修改的情况下就可以扩展 六、装饰模式 动态地给一个对象添加一些额外的职责 把类的装饰功能从类中搬移去除，这样可以简化原有的类 有效地把类的核心功能和装饰功能区分开了，而且可以去除相关类中重复的装饰逻辑 个人理解：首先区分出装饰者与被装饰者，比如人被球鞋，裤子，T恤装饰；将所有的装饰者提取出一个父类，该父类与被装饰者具备一个共同特征（需要抽象为接口），其实就是需要装饰的具体功能，比如人和衣物能够对外展示；该父类还需提供一个被装饰者的属性，这个例子中，衣物的展示本质上是调用被装饰者的展示；具体的子类在装饰功能中不能忘记以 super 的方式调用上级装饰 七、代理模式为其他对象提供一种代理以控制对这个对象的访问 应用场景 远程代理，也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实 虚拟代理，是根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象 安全代理，用来控制真实对象访问时的权限 智能指引，是指当调用真实的对象时，代理处理另外一些事 个人理解：找到需要被代理的类，根据它的行为创建出代理类（实现同样的行为接口）；在代理类中具有被代理类的一个属性，可以在代理类初始化的时候为被代理类赋值；代理类的行为实际上是调用被代理类的行为方法 八、工厂方法模式定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类，是对简单工厂模式的进一步抽象和推广，本质是对获取对象过程的抽象 个人理解：在简单工厂的基础上，将具有共同特征的子类又划分了一层工厂，使用者根据参数决定使用哪个工厂，工厂来负责实例化具体对象 九、原型模式从一个对象再创建另外一个可定制的对象，而且不需要知道任何创建的细节 一般在初始化的信息不发生变化的情况下，克隆是最好的办法。这既隐藏了对象创建的细节，又对性能是大大的提高。不用重新初始化对象，而是动态地获得对象运行时的状态 super.clone() 方法 如果字段是值类型的，则对该字段进行逐位复制，如果字段是引用类型，则复制引用但不复制引用的对象；因此，原始对象及其副本引用同一对象 个人理解：一种能创建对象且复制对象属性值的方式，需要实现 Cloneable 接口，重写 clone 方法。需要注意的是，如果是引用类型的属性，则该引用类型也要重写 clone 方法，这样引用的才不会是原始对象。 重写示例12345678910@Overridepublic WorkDemo clone() &#123; WorkDemo object; try &#123; object = ((WorkDemo) super.clone()); &#125; catch (CloneNotSupportedException e) &#123; throw new RuntimeException(&quot;clone失败&quot;); &#125; return object;&#125; 十、模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤 模板方法模式是通过把不变行为搬移到超类，去除子类中的重复代码来体现它的优势 个人理解：定义一个抽象类，提供一些抽象方法交由子类实现，这些抽象方法只有抽象类中的普通方法 能调用，在普通方法中提供通用实现 十一、迪米特法则迪米特法则，也叫最少知识原则：如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法，可以通过第三者转发这个调用 在类的结构设计上，每一个类都应当尽量降低成员的访问权限类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及 十二、外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用 使用场景 首先，在设计初期阶段，应该要有意识地将不同的两个层分离 其次，在开发阶段，子系统往往因为不断地重构演化而变得越来越复杂。增加外观 Facade 可以提供一个简单的接口，减少它们之间的依赖 第三，在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了 个人理解：其实就是分层的概念，由上层来封装下一层具体的调用过程 十三、建造者模式将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示 指挥者：用它来控制建造过程，也用它来隔离用户与建造过程的关联 建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式 个人理解：核心部分为一个指挥者类和一个建造者的抽象类，指挥者需要对外提供一个方法，负责去调用建造者中的抽象方法，这个方法就是建造过程，参数为一名建造者 十四、观察者模式观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。 使用场景 当一个对象的改变需要同时改变其他对象的时候 不知道具体有多少对象需要改变 当一个抽象模型有两个方面，其中一方面依赖于另一方面，这时使用观察者模式可以将这两者封装在独立的对象中使它们各自独立地改变和复用 个人理解：两个关键角色，抽象观察者和抽象通知者。抽象观察者中通常具备一个事件类型的属性，再提供一个改变自身行为的抽象方法，由通知者来调用；抽象通知者中会有一个抽象观者者类型的数组，这里就是所有需要通知的观察者，并提供方法入口用来添加和删除它们；当通知者发起通知时，就是遍历该数组，提供事件类型，并调用观察者中的改变方法 十五、抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类 个人理解：提供一系列接口，由访问者类根据情况决定具体实例化某个类 十六、状态模式状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。 当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式了。 状态模式的好处是将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。 个人理解：提供一个实体类和一个抽象状态类，实体类中可以设置不同的状态（初始化实体的时候可以提供一个状态），抽象状态类则有一个抽象的行为方法，参数为实体类；实体类中需要提供一个工作方法，用来调用自身当前状态的行为方法；在抽象状态类的行为方法中，子类在这里实现不同的行为，且可以改变实体的当前状态，改变状态之后再调用实体的工作方法。这样就完成了一个事物经过不同状态时的变化 十七、适配器模式适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况 个人理解：核心思想也是加了一层，当通用的调用逻辑不满足时，新建一个具体的实现类，由具体实现类来处理新的逻辑，通用的调用逻辑改为调用该新类的逻辑。 十八、备忘录模式在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态 Originator（发起人）：负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态。Originator可根据需要决定Memento存储Originator的哪些内部状态 Memento（备忘录）：负责存储Originator对象的内部状态，并可防止Originator以外的其他对象访问。备忘录有两个接口，Caretaker只能看到备忘录的窄接口，它只能将备忘录传递给其他对象。Originator能够看到一个宽接口，允许它访问返回到先前状态所需的所有数据 Caretaker（管理者）：负责保存好备忘录Memento，不能对备忘录的内容进行操作或检查 个人理解：提供一个备忘录类，能够保存目标实体中的属性值；而目标实体中需要自己决定如何创建备忘录，备忘录中保存哪些数据，同时还要提供一个能根据备忘录恢复的方法；还要有一个管理者类，专门负责保管备忘录（内存中） 十九、组合模式整体与部分可以一致对待 何时使用组合模式 希望可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就可以考虑使用组合模式 个人理解：适用于功能一致的一组对象，实现同一个抽象类，每一层只实现自己需要的功能，常用于表示父子组合；“父”中会有一个 children 属性，当“父”实现自身功能时，可以遍历 children 并调用其中的”子”功能（各司其职，“父”的职责就是调用”子“的功能） 二十、迭代器模式迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可以让外部代码透明地访问集合内部的数据。 个人理解：其实就是各大语言中都有的遍历的概念，讲究一个遍历的规则 二十一、单例模式保证一个类仅有一个单例，并提供一个访问它的全局访问点 单例模式因为单例类封装它的唯一实例，这样它可以严格地控制客户怎样访问它以及何时访问它，简单来说就是对唯一实例的受控访问 饿汉式单例类：静态初始化，在自己被加载的时候就将自己实例化。会提前占用系统资源 懒汉式单例类：在第一次被引用时，才会进行实例化。面临多线程访问的安全性问题，需要做双重否定的处理 个人理解：隐藏构造方法，提供一个静态的 getInstance 方法。 代码示例123456789101112131415161718192021222324public class Singleton &#123; private volatile static Singleton instance; // 静态初始化 // private static Singleton instance = new Singleton(); private Singleton() &#123; &#125; /** * 双重否定 */ public static Singleton getInstance() &#123; if (instance == null) &#123; synchronized (Singleton.class) &#123; if (instance == null) &#123; instance = new Singleton(); &#125; &#125; &#125; return instance; &#125;&#125; 二十二、桥接模式桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化 尽量使用合成&#x2F;聚合，而不是使用类继承 聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强的“拥有”关系，体现了严格的部分和整体关系 个人理解：将A类对象和B类对象抽象出两个类，A抽象类中有B抽象类的属性并提供赋值方法，使它们能够自由组合 二十三、命令模式命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分隔开 个人理解：需要有一个抽象命令类与命令执行类，命令执行类为抽象命令类中的一个属性，抽象方法为执行命令，我们使用的时候是使用具体的命令类 二十四、职责链模式使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止 职责链可简化对象的相互连接，它们仅需保持一个指向其后继者的引用，而无需保持它所有的候选接受者的引用 个人理解：首先封装一个条件类，该条件类通常具备一些条件类型，条件内容，数量等字段；然后抽象出一个管理者类，也就是来处理条件的，一定要有一个处理条件的抽象方法；管理者们通常会有层级之分，所以管理者的抽象类会有一个类型为自身的属性，这个属性代表上级管理者；在处理条件的方法中，如果当前管理者发现自身处理不了该条件，则需要将条件传递给上级去处理 二十五、中介者模式用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互 中介者模式一般应用于一组对象已定义良好但是复杂的方式进行通信的场合。 个人理解：首先有一个抽象的实体类和一个抽象的中介者类，抽象实体类中有一个抽象中介者类的属性；它们都有一个声明的方法需要子类去实现，不过中介者的声明方法中会多一个实体类的参数，而实体类中的声明方法本质上是在调用中介者类的声明方法，并且是将自身作为参数，委托给中介者类去执行实体类中的其他业务方法 二十六、享元模式运用共享技术有效地支持大量细粒度的对象 在程序设计中，有时需要生成大量细粒度的类实例来表示数据。当这些实例除了几个参数外基本相同时，如果能将参数移到类实例的外面，并在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数量。 个人理解：就是利用内存减少创建对象的数量。一个工厂类中维护着一个 Map，这里存放的都是具有相同特征的实体 二十七、解释器模式如果一种特定类型的问题发生的概率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题 解释器模式的不足：解释器模式为文法中的每一条规定都至少定义了一个类，因此包含许多规则的文法可能难以管理和维护。建议当文法非常复杂时，使用其他的技术如语法分析程序或编译器生成器来处理 个人理解：有一个抽象表达式类，需要子类实现解释操作，解释的对象定义一个公共的实体… 二十八、访问者模式访问者模式适用于数据结构相对稳定的系统 它把数据结构和作用于结构之上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化 个人理解：重点在于定义一个抽象实体类和一个状态抽象类，抽象实体类中有一个应用的抽象方法，参数就是一个状态抽象类，这个方法的目的是实体针对不同状态的处理；可预计的抽象实体类有多少个子类，在状态抽象类中就会有个多少个抽象方法，这些方法的含义是当前状态遇到某种实体时的反应，参数为具体的某一种实体类型；在抽象实体类的实现中，应用方法其实就是去调用状态抽象类中对应自己为参数的那一个抽象方法，写法是以 this 传递；状态的实现类，则按正常业务处理即可 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * 抽象实体类 * 人类 */public abstract class Person &#123; public abstract void accept(Action visitor);&#125;/** * 男人 */public class Man extends Person &#123; /** * 去调用状态抽象类中对应自己为参数的那个抽象方法 */ @Override public void accept(Action visitor) &#123; visitor.getManConclusion(this); &#125;&#125;/** * 状态抽象类 */public abstract class Action &#123; /** * 男人的反应 */ public abstract void getManConclusion(Man concreteElementA); /** * 女人的反应 */ public abstract void getWomanConclusion(Woman concreteElementB);&#125;/** * 成功 */public class Success extends Action &#123; @Override public void getManConclusion(Man concreteElementA) &#123; System.out.println(concreteElementA.getClass().getSimpleName() + &quot; &quot; + this.getClass().getSimpleName() + &quot;时，背后多半有一个伟大的女人&quot;); &#125; @Override public void getWomanConclusion(Woman concreteElementB) &#123; System.out.println(concreteElementB.getClass().getSimpleName() + &quot; &quot; + this.getClass().getSimpleName() + &quot;时，背后大多有一个不成功的男人&quot;); &#125;&#125;","categories":["技能"]},{"title":"考驾照的那些事儿","path":"/2023/10/02/other/考驾照的那些事儿/","content":"辞职犹犹豫豫，还是选择了裸辞，原因很多，不想多说。本来打算请同事们吃个饭的，但是因为种种原因放弃了，只约成了两个要好的朋友聚餐。 这意味着，我拥有大把时间，没有经济压力，也没有心理压力，至少目前是这样。可事实证明，我这种家伙就不该闲下来，无所事事的尽头就是一个人玩到昏天黑地，挥霍了很多时间。驾校那边离职前就已经报名了，原本想着这个空档期去学车好让自己有点事做，然而不练车的时间里还是没有利用好。 学车科目一学了（玩了）一星期后去学车，从基础的打方向盘开始。第一次练车，我这家伙穿的凉鞋←_←，教练告诉我不好踩离合，那玩意踩起来真的难，需要段时间适应，习惯了就好很多。坐上驾驶位，与这个随处可见的大家伙如此亲密接触，是无比的令人兴奋，浑身的血液彷佛跟随着引擎盖一同颤抖。我就觉得，真的很难忍住不开车啊！ 新手应该都是这样，对速度的概念一无所知，踩离合的力度不会把握，手中的方向盘也不自觉地倾斜。练了两次直行开始教倒车入库，教练有点凶，话讲得很快，有时没听清想让他再复述下就开始不耐烦，我好无奈╮(╯▽╰)╭，硬着头皮开，当时满脑子想的是早点拿到驾照摆脱他，不过还好后面基本没跟他打过交道。相比之下，其他教练表现得挺随和，顶多有点恨铁不成钢，没有那种咄咄逼人的气势。 那段时间心情很低沉，几乎天天都去驾校，上午去下午也去，后面发现周末人太多就不去，再后面干脆偷懒下午也不去。 接触不同的人，看到不一样的东西，对我来说都是一种期待。这里很多有趣的事，有人能把车的踏板踩掉，有人不顾一切地倒车差点开到花台上，有人直角转弯撞到墙边轮胎直接卡缝里，有人开车撞到休息用的亭子，车直接瘪了一大块😂… 有辆车的方向盘很重，离合也很重，女生们都不愿意开，男生倒挺乐呵，因为我们也嫌弃另一辆车离合太轻不好控制，有人甚至在这车练出了单手拧方向盘。记得有一次，有位女生着急练车，选择了这台车，下车时却找不到手机又很肯定自己把手机带上车了，后面用我手机打个电话找到的🙈，原来是掉到座椅下面去了。朋友得知这事后，调侃我小子不经意间又拿到人家女生的微信，得向我学习。。 所见所闻练车的热情会被慢慢消磨掉抽不出时间只能隔三岔五地练习，炎热的天气，再加上练车时漫长的等待，还有教练不争气的话语。但我还好，不会像大多数人坐在那玩手机，我很会给自己找乐子，到处乱窜，各种凑热闹。提醒别人车胎有点瘪了，教练教学员时我会过去旁听，时不时去跟车，或者坐车上，义务给练车的同志看点位，告诉他 or 她的不足，指出错误，警告对方的危险行为。练车的时候还被我发现了一只很大的蜗牛，抓着它到处跑，后面给它放回原处，结果第二天发现给太阳晒硬了。。让老哥停好车，不踩刹车松开手刹，我去尝试着推车，嗯推得动。有的时候我也跑累了，会拿出带来的书找个阴凉的地方看，读书这件事感觉除了自己熟悉的地方其他地方哪都读得进去，还是身边的诱惑太大。这些可能表现得很另类，或者幼稚，但其实无所谓，没有人会在乎你，他们只会觉得你很活泼，事实是我们放大了别人的想法。 那个时候暑假刚好结束，练车的学生们都返校了。我明明一直留着很长的胡子，可他们还是很随意的就觉得我年纪小，不止一个地认为我还在上学。。有个朋友告诉我，可以把练车看作是一个跨层次的社会活动，我觉得很对。我最喜欢听大伙的聊天，他们聊的啥都有，从练车到如何防晒，从工作到家庭，从小孩到彩礼，我插不上嘴，但我很乐意听，时不时语出惊人一下。大家相处的时间有限，轮流练车换下来的人也会参与到讨论中，从而开辟出新的话题。甚至有个大哥郑重其事地告诫我们这帮毛头小子，讨老婆得去越南⁉️ 在这里我得知了教练的工资非常出乎意料，每月只有四五千？没有底薪的那种，据说被取消了。。全部靠的提成，每个人虽然都带很多学员，但是没有竞争，提成是平分的。学员去考试，通过了才有提成，如果没有通过，他们相当于是在免费上班…所谓的福利只有包吃包住，社保没有，法定的节假日也是被阉割的，每天上十个小时的班，每个月休息的天数未知。好离谱啊，和我想象地截然不同。据当时那位教练说，他已经是不想待的，顶多干完今年，日后的打算是想自己开驾校。教练应该也隶属于服务行业吧，在我印象中普通服务员的工资也仅仅三四千。这是之前有次吃饭的时候，正好有人在向店长咨询工作的事，我从他们的对话中听到的，这才是大多普通人的样子。 有个老哥很悲催，科二挂了两次，一次下雨视线被影响，一次半坡起步超时。好不容易过了，去科三考场之前信誓旦旦地跟我们说，这次肯定一把过，再不过回来的话又要被我们这帮小崽子笑。然而据他同事所说，科三还是挂了，可能太紧张方向盘打反了🤣。后面还知道，有个女生科二考了五次极限过的，她才18岁哦🙈，不过科三一次过了 他们考试的人走后，那里的常客便是我们。练科二的时候，各种搞名堂 我们会趁教练不在偷偷开空调，其他人要放哨，被发现可是要挨叼的（只有VIP车可以光明正大地关窗开空调，但是学费要贵三千块），但其实开空调车声音挺大的。 她们女生倒库慢经常会堵车，等前车移动的时候，我们常常把玩车上的按钮，再故意将收音机的声音开的很大很大，然后一脸老爷相地望着她们(→_→)。 偶尔再按下喇叭，教练会投来疑惑的目光，紧接着就是警告。 我们还尝试过将离合全部松开感受下速度，并没有想象的那么快，后来教练告诉我只有半联动的时候速度才快。 偷偷踩过油门，老实说有点慌，不过有些车是锁死的。 如果后面的车隔得远，我们会不走寻常路，在直角转弯那反复地压弯，在坡道那故意溜车几次再重新上坡定点，倒库明明是先右倒库，我们非要先开过头完成一次左倒库。 … 教练也会耍酷😝，用娴熟的动作，飞快的速度完成所有项目，完事后还不忘带戏谑我们。 当时我是这样认为的，练不练习无所谓，重要的是有车开，开车感觉挺爽的(¬‿¬)。倒库后面的项目我都是去旁听学来的，我的进度很快，练车时间也多，赶上了一帮子人，可惜驾校文员好多东西都没跟我说，导致我学时打得晚，好不容易学时满了可以预约考试，但是没有排期又预约得晚了点。记得第一次练完全程，教练还夸赞我不错，基本没啥大问题，有事离开一会儿还会让我看着点练车的他们。在这里长个记性，当自我感觉差不多的时候就可以约考试了，一定要提前，不然中间那段时间其实有点难熬的。 练车场地 印象最深的，他们在练侧方停车，教练就抽根烟的功夫，就有人把车冲上台阶，前轮跨了过去底盘与台阶亲密接触。几个教练尝试多种方法无果后，最后把千斤顶撤了大家合力抬车头，台阶旁再垫了砖块，辅助开车解决的。我第一次见这场面，以为这是一件再简单不过的事，上前帮忙抬车，感受到那不可撼动的重量。我这小子是真的不知道天高地厚，对未知的东西总抱着某种幻想。正如那句话，没有上过战场的人，容易把自己想象得英勇无畏 我也惹过祸，转弯时不小心撞到了前车，还好速度够慢。碰巧被教练发现，那么大个车头都能撞上，教练满脸黑线(￣_￣|||)，说话彪呼呼的，我真不是故意的，瞅着好像不会碰到啊？你小子还没驾照就先追个尾是吧？ 中秋恰逢中秋，很多人都赶着这个时候，在过节的前一天考试。我们一行七人，最后通过的是五人。我是位于通过的行列之中，但是我用了第二次机会＞﹏＜。考试那天等了很久，幸好有人陪着一起，大家相互聊天保持状态。 过程结果轮到我考试，当时真的不紧张，很放松，车开得快也很顺利，自我感觉完美通过。就是觉得车的离合要抬很高不太习惯，刚好车座下的毯子踩离合那里有一道沟壑，松离合的时候脚后跟会陷入那道沟壑，正好被抵住，很是别扭😣。上车的时候就发现了，还尝试过把毯子扯出来，但是扯不动，我有种被暗算的感觉。果不其然，半坡起步那里因为这个出了大问题。。挂掉了&#x2F;_ \\，再次尝试。回到起点停车等待的时候，亲眼见证了一位大叔在倒库环节挂掉，手忙脚乱地打方向盘，好不容易完成了右倒库，结果出库时方向打反，这下一发不可收拾，紧接着就是停车，熄火，然后好像直接考试结束。这一次我就真的很紧张，各种后怕，踩离合的脚也莫名的感觉到累，每个项目貌似都差点出问题，颤颤巍巍地来到坡道环节。看到后面没有来车，我停下来，好好地放松下脚，这次卯足了劲，有惊无险好在是通过了。出考场我是蹦着出去的，没注意当时候考的人是怎样的眼光，没办法，止不住地兴奋呀，恨不得逢人就吹嘘一番。考驾照的费用大致是这些：学费3680+体检费30+科二半小时的模拟费150+科三模拟费400随行的人一起去查成绩，留下了这张照片 考试过了的人都兴高采烈，但是我没有分享的人，只能在练车的群里说一声，跟要好的大哥互发表情包便结束了对话。 其实她是知道我考试日期的，也许忙于工作了吧。说来有点奇怪，在我的视角里我们是突然断了联系，聊天记录定格在我最后发的消息上，自那以后聊天窗口就慢慢沉底了。我开始模仿她，所有的群聊都解除免打扰，消息弹窗也任由它胡闹，改掉红点强迫症，不应该那么刻意地去关注信息。 中秋节到了，老妈回去了，舅舅他们也是，有假期都想回老家，还在劳动节的时候就开始筹划国庆假期，一直叮嘱我抢票。他们操劳了大半辈子，也是时候为自己着想了。奶奶说我们脚大，以后是走四方的人，老妈也讲我们几个都是不想家的，印象中我几乎从未给爸妈主动打过电话。男孩子或许都这样吧，从不轻易想家，真正想家了也会嘴硬一番。这辈子做过两件很后悔的事，一是当众攻击女同学，还有就是对老妈冷暴力了。 晚上很冷清，跑到外面ಠ_ಠ。广场附近转了很多圈——很害怕这种漫无目的地飘，随处可见成群结队的人，只有天上的月亮是孤零零的。本来约表弟他们出来吃饭的，但是被推辞了。也不知道她过的怎么样，看最近的抖音貌似还在熬夜，很烦恼。 十字路口 接下来还有个科三，平均下来一个人只有半天的练车时间。。我也很快通过（第一次机会忘踩刹车挂了🤣），后面就该跟驾校告别了。在这里可以很轻易地认识各个年龄阶段的人，或许会有代沟，但大家目的是一样的。和大伙打交道，挺有意思的！ 所想做事情自信起来真的顺利很多有些人只要在人多的场合就会紧张，但其实大家真的不在乎，如果你做得很糟糕，他们可能会发笑片刻，但很快就会忘记。事实是我们放大了别人的想法。有人说的很对：我们在想象中比在现实中，遭受更多的痛苦。 良好的家庭教育给与我很好的成长环境，告诉我做人的根本，但是封建的思想也打压了我们塑造自信的能力。从小到大，遇到事情我总是害怕，逃避，不敢当众表现，比起面对——我选择的，要么就是哗众取宠，要么就是从众，去当第二个、第三个出头鸟。很多事情就这样被埋没在记忆里，它们本该是最值得回忆的。 你变强了呢直到参加工作，不得不面对一个个陌生的环境，好奇促使着我。我找回了自己的初心，我的本质从未改变，我告诉自己应该自信，我要积极去尝试那些未知的事物。 现在的重点是找工作，可是这个去处，挺犯难的。要不要去找妹子呢","tags":["近况"],"categories":["生活纪实"]},{"title":"SpringBoot大文件上传","path":"/2023/09/24/practice/SpringBoot大文件上传/","content":"MyGitee 介绍分片上传分片上传就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（我们称之为 Part）来进行分别上传，上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件。 小文件（图片、文档、视频）上传可以直接使用很多 ui 框架封装的上传组件，或者自己写一个 input 上传，利用 FormData 对象提交文件数据，后端使用 Spring 提供的 MultipartFile 进行文件的接收，然后写入即可。但是对于比较大的文件，比如上传2G左右的文件（http上传），就需要将文件分片上传（借助于 file.slice() ），否则中间 http 长时间连接可能会断掉。 断点续传断点续传是在下载或上传时，将下载或上传任务（一个文件或一个压缩包）人为的划分为几个部分，每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传或者下载未完成的部分，而没有必要从头开始上传或者下载。 断点续传可以看成是分片上传的一个衍生，因此可以使用分片上传的场景，都可以使用断点续传。 核心逻辑在分片上传的过程中，如果因为系统崩溃或者网络中断等异常因素导致上传中断，这时候客户端需要记录上传的进度。在之后支持再次上传时，可以继续从上次上传中断的地方进行继续上传。 为了避免客户端在上传之后的进度数据被删除而导致重新开始从头上传的问题，服务端也可以提供相应的接口便于客户端对已经上传的分片数据进行查询，从而使客户端知道已经上传的分片数据，从而从下一个分片数据开始继续上传。 整体过程前端将文件按照百分比进行计算，每次按照百分比上传文件(文件分片，指定分片大小)，给文件分片做上序号后端将前端每次上传的文件，放入到缓存目录等待前端将全部的文件内容都上传完毕后，发送一个合并请求（后端自行判断也可）后端使用 RandomAccessFile 进多线程读取所有的分片文件，一个线程一个分片后端每个线程按照序号将分片的文件写入到目标文件中在上传文件的过程中发生断网了或者被手动暂停了，下次上传的时候发送续传请求，让后端删除最后一个分片前端重新发送上次的文件分片最后上传缺少的分片即可 秒传秒传通俗地说，你把要上传的东西上传，服务器会先做MD5校验，如果服务器上有一样的东西，它就直接给你个新地址，其实你下载的都是服务器上的同一个文件，想要不秒传，其实只要让MD5改变，就是对文件本身做一下修改（改名字不行），例如一个文本文件，你多加几个字，MD5就变了，就不会秒传了。 参数设计参考官方文档 字段名 类型 释义 chunkNumber Integer 当前块的次序，第一个块是 1，注意不是从 0 开始的 totalChunks Integer 文件被分成块的总数 chunkSize Long 分块大小，根据 totalSize 和这个值就可以计算出总共的块数。注意最后一块的大小可能会比这个要大 currentChunkSize Long 当前块的大小，实际大小 totalSize Long 文件总大小 identifier String 这个就是每个文件的唯一标示 filename Sting 文件名 relativePath String 文件夹上传的时候文件的相对路径属性 file MultipartFile 文件块 流程设计 https://doc.bulkall.top/spring/big-file/#%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E3%80%81%E7%A7%92%E4%BC%A0%E3%80%81%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0https://doc.bulkall.top/spring/big-file/#%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E3%80%81%E7%A7%92%E4%BC%A0%E3%80%81%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0 校验前端首先计算文件 md5 值，在上传文件前调用接口查询服务器是否存在该文件，如果不存在，直接按业务准备接下来的文件上传；如果存在则跳过该文件的上传并返回可访问的文件 url，以此实现秒传效果；部分存在，需要查找已经上传过的分片，有多种方案可选，这时前端再根据该集合上传未上传的分片即可。 文件的分片上传记录如果使用磁盘存储，可以通过表查询已经上传的分片数 分片上传通常也可以使用 Redis 来记录，以此来返回需要上传的分片集合 读取 .conf 文件内容，创建的 conf 文件长度为总分片数，每上传一个分块即向 conf 文件中写入一个127，那么没上传的位置就是默认的 0，已上传的就是127 12345678List&lt;Integer&gt; uploadedChunks = new LinkedList&lt;&gt;();byte[] completeStatusList = Files.readAllBytes(confFile.toPath());for (int i = 0; i &lt; completeStatusList.length; i++) &#123; if (completeStatusList[i] == Byte.MAX_VALUE) &#123; uploadedChunks.add(i); &#125;&#125; 上传的文件分片保存时可以通过规律数字命名的方式，通过检查分片是否存在也可得到 上传开始执行文件上传，后端用两种方式实现文件写入 RandomAccessFile Java 除了 File 类之外，还提供了专门处理文件的类，即 RandomAccessFile（随机访问文件）类。 该类是 Java 语言中功能最为丰富的文件访问类，它提供了众多的文件访问方法。RandomAccessFile 类支持“随机访问”方式，这里“随机”是指可以跳转到文件的任意位置处读写数据。在访问一个文件的时候，不必把文件从头读到尾，而是希望像访问一个数据库一样“随心所欲”地访问一个文件的某个部分，这时使用 RandomAccessFile 类就是最佳选择。 RandomAccessFile 对象类有个位置指示器（文件指针），指向当前读写处的位置，当前读写 n 个字节后，文件指示器将指向这 n 个字节后面的下一个字节处。我们可以通过 RandomAccessFile 的 seek(long pos) 方法来设置文件指针的偏移量（距文件开头 pos 个字节处）。如果想要获取文件指针当前的位置的话，可以使用 getFilePointer() 方法。 刚打开文件时，文件指示器指向文件的开头处，可以移动文件指示器到新的位置，随后的读写操作将从新的位置开始。 RandomAccessFile 类在数据等长记录格式文件的随机（相对顺序而言）读取时有很大的优势，但该类仅限于操作文件，不能访问其他的 I&#x2F;O 设备，如网络、内存映像等。 RandomAccessFile 类的构造方法12345// 创建随机存储文件流，文件属性由参数File对象指定RandomAccessFile(File file , String mode)// 创建随机存储文件流，文件名由参数name指定RandomAccessFile(String name , String mode) 这两个构造方法均涉及到一个 String 类型的参数 mode，它决定随机存储文件流的操作模式，其中 mode 值及对应的含义如下： r：以只读的方式打开，调用该对象的任何 write（写）方法都会导致 IOException 异常 rw：以读、写方式打开，支持文件的读取或写入。若文件不存在，则创建之。 rws：以读、写方式打开，与 rw 不同的是，还要对文件内容的每次更新都同步更新到潜在的存储设备中去。这里的 s 表示synchronous（同步）的意思 rwd：以读、写方式打开，与 rw 不同的是，还要对文件内容的每次更新都同步更新到潜在的存储设备中去。使用 rwd 模式仅要求将文件的内容更新到存储设备中，而使用 rws 模式除了更新文件的内容，还要更新文件的元数据（metadata），因此至少要求1次低级别的 I&#x2F;O 操作 保存文件分片代码实现 1234567891011121314// try 自动资源管理try (RandomAccessFile randomAccessFile = new RandomAccessFile(fullFileName, &quot;rw&quot;)) &#123; // 分片大小必须和前端匹配，否则上传会导致文件损坏 long chunkSize = dto.getChunkSize() == 0L ? defaultChunkSize : dto.getChunkSize().longValue(); // 偏移量, 意思是从一个位置开始往文件写入，每一片的大小 * 已经存的块数 long offset = chunkSize * (dto.getChunkNumber() - 1); // 定位到该分片的偏移量 randomAccessFile.seek(offset); // 写入该分片数据 randomAccessFile.write(dto.getFile().getBytes());&#125; catch (IOException e) &#123; log.error(&quot;文件分片上传失败：&quot; + e); return false;&#125; MappedByteBuffer java io 操作中通常采用 BufferedReader，BufferedInputStream 等带缓冲的 IO 类处理大文件，不过 java nio 中引入了一种基于 MappedByteBuffer 操作大文件的方式，其读写性能极高，想要深入了解的话可以读一下《深入浅出MappedByteBuffer》 如果用的是第三方存储，那么只要调用第三方提供的分片上传 api 即可 记录分块位置服务端创建 .conf 文件用来记录分块位置，.conf 文件长度为总分片数，每上传一个分块即向 .conf 文件中写入一个 127，那么没上传的位置就是默认的 0，已上传的就是 Byte.MAX_VALUE 127 服务器按照请求数据中给的分片序号和每片分块大小（分片大小是固定且一样的）算出开始位置，与读取到的文件片段数据，写入文件。 12345678910111213141516171819202122232425262728293031/** * 是否上传完成 * * @param dto 文件参数对象 * @param confFile .conf 文件 * @return true 文件上传完成 */public synchronized boolean checkUploadStatus(FileChunkDTO dto, File confFile) &#123; try (RandomAccessFile confAccessFile = new RandomAccessFile(confFile, &quot;rw&quot;)) &#123; // 设置文件长度 confAccessFile.setLength(dto.getTotalChunks()); // 设置起始偏移量 confAccessFile.seek(dto.getChunkNumber() - 1); // 将指定的一个字节写入文件中 127， confAccessFile.write(Byte.MAX_VALUE); byte[] completeStatusList = Files.readAllBytes(confFile.toPath()); // 创建conf文件文件长度为总分片数，每上传一个分块即向conf文件中写入一个127，那么没上传的位置就是默认的0,已上传的就是127 for (byte b : completeStatusList) &#123; if (b != Byte.MAX_VALUE) &#123; return false; &#125; &#125; &#125; catch (IOException e) &#123; log.error(e.getMessage(), e); return false; &#125; // 上传成功记得删除conf文件 confFile.delete(); return true;&#125; 分片全部上传完成其实之前的分片一边上传，一边已经做到了文件合并 （每次调用上传接口其实读写的都是同一个 tmp 文件），所以这时的 tmp 文件其实就是完整的原文件，仅仅文件名不同，我们可以多校验一下 md5 值，确保文件没有损坏，确认过后将 tmp 文件重命名即可，至此文件上传全部完成 123456789101112131415161718192021222324252627282930313233/** * 检查md5是否一致 */public boolean checkFileMd5(File tmpFile, String md5) &#123; try (FileInputStream fis = new FileInputStream(tmpFile)) &#123; String checkMd5 = DigestUtils.md5DigestAsHex(fis); return checkMd5.equals(md5); &#125; catch (Exception e) &#123; log.error(&quot;check file md5 error:&quot; + e); throw new RuntimeException(&quot;校验md5值时发生错误&quot;); &#125;&#125;public void cleanUp(File tmpFile) &#123; if (tmpFile.exists()) &#123; tmpFile.delete(); &#125;&#125;public void renameFile(File tmpFile, String fileName) &#123; // 检查要重命名的文件是否存在，是否是文件 if (!tmpFile.exists() || tmpFile.isDirectory()) &#123; log.info(&quot;File does not exist: &quot; + tmpFile.getName()); return; &#125; String parent = tmpFile.getParent(); File newFile = new File(parent + File.separator + fileName); // 如果存在, 先删除 if (newFile.exists()) &#123; newFile.delete(); &#125; tmpFile.renameTo(newFile);&#125; 还有一种处理方案，上传接口每次保存的都是一份 tmp 文件，当分片全部上传完成后需要执行合并分片，这里给出伪代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/** * 合并分片 * * @param chunkFileFolderPath 分片保存目录 * @param fileSavePath 文件合并后保存的目录 * @param totalChunks 分片数量 */private boolean mergeChunks(String chunkFileFolderPath, String fileSavePath, Integer totalChunks) &#123; // 检查分片是否都存在 if (this.checkChunks(chunkFileFolderPath, totalChunks)) &#123; File chunkFileFolder = new File(chunkFileFolderPath); File mergeFile = new File(fileSavePath); File[] chunks = chunkFileFolder.listFiles(); // 排序 List fileList = Arrays.asList(chunks); Collections.sort(fileList, (Comparator&lt;File&gt;) (o1, o2) -&gt; &#123; return Integer.parseInt(o1.getName()) - (Integer.parseInt(o2.getName())); &#125;); try &#123; RandomAccessFile randomAccessFileWriter = new RandomAccessFile(mergeFile, &quot;rw&quot;); byte[] bytes = new byte[1024]; for (File chunk : chunks) &#123; RandomAccessFile randomAccessFileReader = new RandomAccessFile(chunk, &quot;r&quot;); int len; while ((len = randomAccessFileReader.read(bytes)) != -1) &#123; randomAccessFileWriter.write(bytes, 0, len); &#125; randomAccessFileReader.close(); &#125; randomAccessFileWriter.close(); &#125; catch (Exception e) &#123; return false; &#125; return true; &#125; return false;&#125;/** * 检查分片是否都存在 */private boolean checkChunks(String chunkFileFolderPath, Integer totalChunks) &#123; try &#123; for (int i = 1; i &lt;= totalChunks + 1; i++) &#123; // tmp文件命名为 1.tmp、2.tmp File file = new File(chunkFileFolderPath + File.separator + i); if (!file.exists()) &#123; return false; &#125; &#125; &#125; catch (Exception e) &#123; return false; &#125; return true;&#125; 项目运行简单实现：MyGitee 为了方便演示使用，本项目使用的是前后端不分离的架构 确认文件上传路径 默认是 F:\\tmp 可在 application.yml 中进行修改 连接自己的数据库，导入 sql 目录下面的 db.sql（注意 application.yml 中的数据库名，用户名密码） 分片大小，前后端要对应相同才行（默认是相同的20M不用改） BigfileUploadApplication 是启动类，直接启动即可 启动后访问：http://localhost:8080/page/index.html","tags":["Java"],"categories":["技能"]},{"title":"游龙当归海，海不迎我自来也","path":"/2023/09/07/other/游龙当归海/","content":"心血来潮，想写一下自己的情感生活。再不宣泄一下，我们这种永远没人来开的罐头就要发霉了 曾经的你许巍曾梦想仗剑走天涯看一看世界的繁华年少的心总有些轻狂如今你四海为家曾让你心疼的姑娘如今已悄然无踪影爱情总让你渴望又感到烦恼曾让你遍体鳞伤每一刻都是崭新的 此前在主人公登场之前，请先允许我回忆一下往事。印象中自初三以后就再也没有过女同桌，座位也是被老师安排在最后一排，没啥女生缘。倒也喜欢过好几个女孩，初三的YSY，高一的ZJQ，高三的LYT，PHX，大二的CQM，她们吸引过我相当长的一段时间，还躺在我的特别关心列表里。仔细想想，高中毕业那次表白绝对是我做过最勇敢的行动了。 我永远不会忘记那个英文笑话那是一次听力练习，我坐在她旁边，没有试卷，和她共用一张。我一脸傻样，用手指着“taxi”这个词问：“塔西，是什么啊？”她噗嗤一声地笑了出来，“taikesri，是出租车啊！”。我才反应过来，相视一笑，然后我们的听力就错过了道题 其实以前挺受女生欢迎的。有人执意要跟我做同桌，有经常请教问题，想找我学象棋做师傅的，毕业留言上很刻意的——勿忘我，专门问我的想法买零食买奶茶…还有女生当众拥抱我，却被我呵斥滚。。。（真的很对不起，我是个混蛋，我从未忘记这件事，也一直记得你的名字，TMN）其实挺多了，而且我还挺有印象，可我。。当时真的不知道，没感觉，或者说没反应过来，用同学的话来说就是张白纸，个白痴，情商低的要命，班上的八卦一概不知，每天的精力永远在玩上面。在他们的评价里，我是个猴子，上蹿下跳的。我居然还一直以为我是属于早熟的，谁知自己才是最天真的那个，那个时候还莫名的有种执着，只要喜欢一个女孩子，其他的女生好像都会被忽略，甚至还会感到反感。 那么，我又是什么时候才反应过来上面这些的呢？ 我们早已习惯独自消化所有的情绪大概是实习那会儿一个人熬不下去的时候，回忆起以前的美好，我才发现——错过了很多。工作后，好像已经很难喜欢上一个人，即使已经很刻意了。在准备离职的那段时间里，我是坐公交上下班的，持续了大半年。渐渐地，常坐那趟公交的面孔都眼熟了，其实我是有想和大家认识的，和其中的几位打过招呼，男女都有，结果显而易见——大多不搭理我。我敢打赌，他们对我肯定也有印象，因为我总是带着本书，有时提个水壶，坐在最后一排，算是个显眼包。现在的社交真的很难呐！但也有例外，“巧合”之下结识了一个小姐姐（后面得知的确是同龄人），几次结伴买早餐，终于在一次我帮她叫停公交后，我加到了微信🤣。至于后续，她是有男朋友的呃，我也不好意思再聊。和朋友们聊到这段，他们简直不可思议，发现我胆还挺大的，居然敢去主动搭讪女孩子，而且还不是一次两次。额，其实吧，我觉得搭讪没啥，又没啥目的接近的。 对22岁的自己的评价一事无成，孑然一身，孤身一人 突如其来的一次吃饭，长辈组织的，当时刚下公交🚌，接到老爸电话后一路小跑过来，一手拿着本书一手提了壶水，饭桌上认识了她，最后结束时不太情愿地加了微信。我表现的挺抗拒的，我自然知道长辈们的意思，我是很想谈恋爱，但真的不想这种事情有他们掺和进来。 老规矩，还是习惯性地去看朋友圈。出乎意料，居然能看到全部的，很多的记录生活，家人、朋友、搞怪，我的第一感觉就是她很真实，很难得~ 相识 经过一天的思想斗争，还是放下所谓的面子，向妹子发出了第一句聊天。我这个逼倒也直接，几番话后开门见山，问妹子有没有男朋友或者喜欢的人😂。呃，这里其实是我以为她知道长辈们的意思的，所以这么不知好歹。和大多数人一样，我们有一句没一句地聊着，不过我是真的笨，明明平常很自然的。那话题是从什么哪里开始的呢？她要买电脑，寻求我的帮助，这我定当义不容辞，几番打探，一点波折，最后拍板了2020款的苹果电脑。当时其实是超出她预算的，我主动借了点钱－O－，不过几天后她就马上还了，为表感谢主动提出请我吃饭，只可惜没吃成。。😭 简单介绍一下QGM，01年的，比我小半岁，广西人，家里还有弟弟妹妹，爸爸在这边上班，她在海南上大学，护理专业，实习已经结束准备返校毕业，经常熬夜，但是是被室友影响的，未来不太想做护士，因为护士要上夜班太辛苦，只想要一份有午睡没夜班的工作就好。喜欢吃的东西很多，清淡饮食，非常喜欢打羽毛球，人很漂亮，我有给朋友们看，戴个眼镜还蛮可爱，可惜呀发际线开始高了.jpg 电脑到货了，插曲也来了。苹果电脑对于妹子来说太难用，可这玩意激活就不让退，跟客服扯死活也不同意，然后我就陷入个两难的境地。妹子觉得不好用又不能退换，可电脑是我推荐的，甚至几度想过自己买下来，再给妹子重新买个，但实在下不了决心，挺惭愧的，后面不了了之。。怪我，当初不该逞英雄的，没考虑清楚，给妹子找了一个B站的学习视频，希望她能掌握吧 分享熟识来自广西的 aurora. 使用 iPhone 13 拍摄本来以为，这样尴尬收场会没下文的，但是后面我们居然还聊到一块去了，而且我这家伙表现的还不错！？妹子也是一直在给我分享吃喝玩乐，我也效仿，话题就是这样源源不断的。在这期间，我玩起了抖音快手，为的就是一个互关，发朋友圈也会要对方点赞。我甚至听从了朋友的一个天才建议，开始筹划五一去海南找她玩，当我告诉她之后她还不假思索地答应了！不然就我这榆木脑袋，肯定想不到这种和女生打交道确实让我耳目一新，很是期待，甚至有点飘飘然。这是从来没有过的感觉。朋友们知道之后很是看好我，各种出谋划策😝，就连我自己也想着，我的阳光就要来啦。可是呢，也并不是真的那么美好她很信任我，很多时候都会先想到我。我一直以为聊天对于双方都是一件值得期待的事。但她，老是个行踪不定的，不爱理人也是真的，屏幕那边是个飘忽不定的影子期间我几度以为她觉得我烦，因为在聊天中会有一种被无视的感觉，回消息有时很慢，有时又很奇怪，还会选择性的忽视，直接问她又说没有。起初我以为是男女生相处的方式不一样，男生之间几乎是有求必应，有应必答，表达个意思坦坦荡荡，女生消化东西慢可能就只回重要的消息吧？有的时候我不知道她想表达什么，每次说话之前得斟酌一番，有的时候她又误解我的意思，我得忙着去解释QAQ。正所谓剪不断理还乱，有点话题终结者的味道。答应过同学们，不舔，保证不舔，我就跟自己赌气，绝不主动说话，那样子太煎熬（感觉还是卑微🙃了）。后面一位女同事跟我说，其实正常，只有我们这种依靠电脑工作的人才更加关注微信啊。我一想也是哦，但又感觉不太对，她自己其实也意识到这个问题的。最让我生气的是什么呢？就是这家伙有的时候宁愿一直玩抖音，也不看一眼微信。真的很无奈，最终吐槽她一番，无果，但是发来一个录屏，内容是微信的聊天页面。看完我才知道：她妈妈和妹妹早就对她这样子很无语😶了，弹窗满天飞，微信一千多个好友，消息都是99+，还有很多人骚扰她，很赤裸的那种骚扰。。由此——心中最大的疑惑被解开，她还告诉我，当时加微信只是想应付长辈，倘若刚开始不是我介绍电脑，有一些共同话题，聊得来，发现我是一个积极向上，好学习的人，那我肯定也是像他们那样尬聊，落得一个躺在列表里的下场。我还是告诫了她，如果不改正的话这样势必会影响以后做事效率的，消化东西太慢。果不其然，现在参加工作的她就吃亏了。当然，这是后话。一直玩抖音，她告诉我，一天之中，只有这个时候属于自己。我能理解，但是我不希望她的娱乐活动只剩下抖音 她喜欢拍照，也喜欢自拍，有很多作品，但是不注重保护隐私😑，稍微有点心的人就能找到她的各种社交平台 事情如果一直这样发展下去也许也挺好的。 三月二十八日晚二十二点五十一分，得知女孩的爸爸生病住院，检查结果——肝癌晚期。天大的一个噩耗，女孩哭到吐了，我也不知所措…第二天她就买票回去了，家里人一并做了检查，这时已经没有收入来源，后面用了水滴筹，但只筹到一万八千多。她为了爸爸多次往返学校和老家，还错过了考试，中间要办理很多事情，住院转院、饮食起居、医保报销、租房退房……都是她在忙前忙后，当时我很负责任地说，遇到她我很幸运，需要帮助的时候直说就好，我们约定，有什么事都可以跟对方分享。 还关注了她妈妈的抖音，时不时会发作品记录生活，看到了她们家以及家人。 她们都很会记录分享，其乐融融，没有夸张的动作，没有刻意的修饰，只有朴实无华的拍摄，应景的BGM。一直以来我对抖音都是带着极大的偏见的，直到遇到她们我才知道抖音在普通人手里，才是真正的记录美好生活。后面我就多了个习惯，总喜欢看她们的作品，再瞥下妹子的在线状态。 发生了这种情况，劳动节的游玩计划无疑是夭折😞。中间我们通过一次电话，我说起劳动节的去处，她压低声音，“要不要来看望我爸爸呀”，我当真了，当即准备火车票(→_→)。本来都商量的很好的，我还戏称这算不算见家长呀⁉️同事为了支援我甚至都把他们婚后旅游做的攻略图给了我。可关键时刻她却退缩了：家里人太多，不知道怎么向他们介绍我。她告诉我她是希望我去找她的＞﹏＜，但是又觉得不太好意思，主要是家人那边不好解释，最后居然改口说之前是在开玩笑的。无奈，准备退票，如果见到她爸妈，我的确挺怕的，好像用什么身份都不妥。当时极其地郁闷，聊了那么久她居然没当真。后面他们家里人商量准备出院回家，这样的话我彻底也没去的必要了，病情已经是事实，女孩也知道这是个坎，需要漫长的心理准备。退票之后她察觉到我不开心，主动打了电话，但是那次我很语无伦次，不知道说什么，更不知从哪里说起… 女孩爸爸的身体每况愈下，疼痛难忍，病情时而好转时而恶化，呕吐得厉害，吃不下东西，很瘦很虚弱，坐也不是睡也不是。最好的都不信，干吗信最坏的啊？我们一直都盼望着奇迹的发生。可是，最坏的情况还是来了，六月二十九日早八点二十五分，女孩的爸爸在家人的陪伴下永远地离开了，年仅42岁。 女孩的生辰第二天是女孩的生辰，听从家里人的话她不能上孝。她频繁地记录着，她知道以后某个时间一定会特别怀念这个时光，想起送山场景该多难忘，多痛苦啊。愿天堂没有病痛！抖音永远少不了有人在指指点点——很快涌现了一批人在批评女孩不孝，指责她虚伪。我和女孩都发现了，她说想怼他们，我拦住了，更建议她花精力去做一个回忆录。虽然有不少人在帮忙，但女孩还是没忍住，回复了他们，我还发现了妹妹的号，也在竭力维护着姐姐，可她那未经世事的解释很干脆，很无力。评论区愈演愈烈，不少人已经吵起来了，各种污言秽语。我义愤填膺，实在看不下去，征得女孩同意：只怼一句，便参与了评论。我从各个角度尽可能地用尖酸刻薄的词语，浓缩成一句话去怒怼那帮家伙，不为别的，只为女孩出一口恶气。反正一时有点气血上涌，有几个人已经删评论了，我tm认真起来很厉害的（拒绝网络暴力）。我尝试过爬取抖音的数据，要把那些站在道德制高点的家伙一个一个揪出来，但难度实在太高只好找了个第三方的api用，只能获取一级评论，作用不大，但是可以下载她们的作品直到这时我才知道，原来她高中有谈过一次恋爱啊(•_•) 这次真的很容易就共情，虽然从来没见过她爸爸，但是女孩给我分享了很多照片，父女之间的事，我会一直记得他，一位素未谋面却对他的面容早已烂熟于心的叔叔。往日的美好生活很难再复现，发生这种事太痛苦。睹物思人，以后的思绪要怎么控制呢 久违 尘埃落定，她要开始找工作了。她没有选择留在家乡，做事雷厉风行的，我聊着聊着才知道，她已经找好工作租好房了，而且第二天就要上班了！找了一份销售的工作，新人要守很多规矩，要求背诵，还要考核，每天又是总结，又是朗读分享的，她还找到我模仿她的口吻来做这个每日总结😂。工作很累，让人迷茫，职场不顺，使人心累，都开始慢慢经历到了。 一直在相互约定见面的日子，但总是没能如愿。八月二十七号这天她突如其来地说了一句，“今天早班，有没有空过来”。这我肯定不能错过啊，满口答应，周末本来就人多，不去练车正好。 差不多六个月没见，其实此前总共也就见过两三次，但是我们倒也挺熟络的。但是，此刻能见到她我是无比地期待，背个包带了一瓶她想要的糯米酒出发，路上是地铁🚇转公交🚌，总共用了两个多小时。 在店门口正对面荡秋千那里远远地望着，掏出手机打开相机放大搜寻着她的踪迹没穿工作服，是一身便衣，说是可以假装店里的客人制造氛围，平日里那个萌萌的大眼镜倒是没戴，穿着一件近似咖啡色的上衣加吊带牛仔长裙，人很瘦吊带还老是掉下来(￣﹃￣)，头发后端有个很好看的粉红蝴蝶结🎀，踩着凉鞋步伐倒挺快的。 顺手拍了几张发给她，她们在店外开会的时候我还偷偷绕到身边，没想到她也一眼认出我了 来自广东的 sentry 使用 小米 12 Pro 拍摄 等她下班，此时我已经守在外边快两个小时了，她工作的地方周围我都转了一遍，还饶有兴致地数起来她们店的同行有多少家。我从来没逛过夜市的，一是没人一起，二是选择困难，害怕这种漫无目的地飘，这次难得，看着外面人山人海，热闹非凡，至少我知道我也有个期待。晚上吃饭兜兜转转，她是想听我的主意的，但其实我压根就不知道自己想吃啥ಠ_ಠ。后面给我买了一杯杨枝甘露，选了一家桂林米粉吃起来，中间有那么一会儿她一直踩着我的脚，一边酣笑着聊米粉，一边拍打我的脚。我当时那个激动啊，恨不得一蹦三尺高，好不容易压住内心的雀跃，强装镇定，但脸上收不住笑，脚更是不敢移动分毫，这种很奇妙的感觉 已经很晚了，晚上我是回不去的，她带我找住的地方，后面是在她公寓那里找的一间日租房，70块钱一晚。当时我挺惊讶的，完全没想到她为人处事方面，其实比我强太多，也是一个很独立的人，之前了解得完全太片面，我一直都小看她了。她带着我吃东西，找住的地方，在房东那还砍了价，然后还给我拿来了一次性杯子，牙刷，沐浴露啥的，很细心很周到。第二天我很早就醒了，后面睡不着，在床上做了几个仰卧起坐就坐等天亮。 有缘再见？ 第二天她穿的很清凉，很漂亮！活脱脱一个邻家小妹妹(☆▽☆)，可我当时为什么没有夸她呢。。。。本来以为可以到处玩会儿的，多点时间相处，可她十点才收拾好。。下午要上晚班，中午需要午睡。哎，总不能为难人家吧。 她问我想吃啥，我还是个不知道的，又是她做的主，选了一家香油鸡饭，点的菜有点多，被她抢着结了帐。我们聊的很多，天南地北，再唠唠家常。让我没想到的是她夸我皮肤好，说我水嫩水嫩的。和女生聊天并没有想象中的那么难，我就是觉得，不要带着目的去接近别人。真诚是我除了懦弱，唯一拿得出手的东西了 快乐的时光总是短暂的。饭后我们只是在楼下买了点东西，她便想午睡了。送她回去，电梯里，我想起同事教我的，跟她打趣道：“七夕都没送你什么东西，就送你回家好啦”。她说我好土哇🙈，居然听信这种话。到了门口，依依不舍是真的。可这时，她微掩房门，抢先开口，却没由来地说了一句，“那，有缘再见了”。 我顿时人傻了，脑袋一片空白，本来到了嘴边的话只好咽了回去，默默走进了电梯。这样的告别可真是无情啊。为什么要这样说呢？？我想，这句话会让我耿耿于怀好一阵子吧。。。。。。。。那颗被烧得炙热的心好像跌进了海底，笼罩的将是黑暗 我的生活注定回归平静在回家的公交上，我找了这张图——自来也与纲手，有点符合现在的意境吧。那天之后，不知道是不是她工作忙的缘故，无论有意还是无意地疏远，我们的联系的确变少，微信聊天窗口挤得越来越下，我们都在一点一点地从对方的世界里消失。微信上我压根就没有给她备注，我觉得，足够亲近的人是不需要备注的，还有的话就是以后生活中不会有交集的人不需要备注，而有备注的在我看来往往都是普通朋友。人与人的界限是分明的，但我愿意去搭讪，主动去跟别人建立联系，我会有必要的积极，只要不会妨碍到别人与自己的生活。一直以来，聊天列表亮起的红点都会受到我的尊重，突然每天有个红点找我，我会更加的在乎。虽然期待交流，但一定不能给别人增添太多困扰。也许她是对的。。她不再需要我的帮助，她需要的是走出失去父亲的悲痛，家人的陪伴，我们以后的路，各自的家庭背景也很难产生交集。一切，只是我太期待，太憧憬… 刚开始的确是抱着目的去接近她的，但是很快我就发现，这是在浪费她的天真。直至现在，所做的一切只想她能够开心，或者——不那么伤心。这些天，我真的好失落。她答应过我的，以后不管怎么样，都会搭理我 煎熬 当你离开学校，踏入社会，就会发现没人在乎你。没有人关心你是谁、你知道什么、你在做什么。每个人都忙于自己的生活，他们的注意力都在自己那里。 我也想有人能够在乎我啊写这篇文章的时候，一直在翻聊天记录，真的很长很长，也许，比我任何一篇聊天记录都要长（回看起来我挺多时候都一根筋的）。她说第一个分享的是妈妈，第二个就是我。和她相处真的很愉快，我们互相分享，互相倾诉，没有顾忌，偶尔会给她买点东西。唯一会发生不快的地方就是她那个臭毛病，其实我就觉得每天能聊下天就挺开心的。这是爱情吗？我喜欢上她了吗？我想我没有，我不知道，我不确定…但是我在想她，我是清醒的吗？可我们都是那么扭捏，什么时候该热情呢？我真的想大大方方地去关心啊。那我们这究竟算什么呢？我又在干什么呢？我想，如果换做一个同样友好的女生，我应该也能相处成这样吧。那么她呢？她对你又是什么感觉呢？不得而知，她对很多人都是这般的友好我不知道，就觉着与她相处挺好的，如果能去掉小心翼翼，再有个重新认识或者追求的机会那更好了。男生总会念念不忘，圈子可以不大，但一定要留住自己想留的人 初中懵懵懂懂，高中浑浑噩噩，大学邋里邋遢，平日短衣短裤，总穿拖鞋，不懂穿搭，不理头发，不剃胡子，以前的自己是个小人，我最讨厌的那种人。遇到她的这段时间里，我整个人都非常的有朝气，生龙活虎的，这个状态倒还挺像初中那会儿。有人说我不知天高地厚，知情的人说我是情窦初开，也许是吧… 初中遇到那个喜欢的女生时，那是我第一次发自内心地不想过周末，不愿待在家里，只想上学能和她待一块儿，我可以全心全意的去逗她笑。和同学曾经聊起过，如果还能与最开始喜欢的那个女生有交集，能有一次选择的机会，我想我还是愿意去追求最开始的那个她。她对我的影响是最大的，如今我还是喜欢她，或许只是喜欢当年喜欢她的那种感觉。心里空荡荡的，想有个牵挂，能有个期待，能有个念想。只要她对我感兴趣，我会被她吸引 来自B站某不知名网友的一条评论我们总是容易用一种自虐的方式制造出一种痴情的假象来使得自己站在感情的道德制高点上，获得一种畸形的满足感和安全感。其实无论是雪夜去对方家楼下站会儿或者是冒着大雨给她送一杯奶茶什么的，自己回想起来往往觉得如乔峰大战聚贤庄、关羽千里走单骑一样壮怀激烈，而对于对方来说，一杯奶茶就是一杯奶茶，无法承载起你想要在上面寄托的山崩地裂般的情怀。少年的时候，总是迫不及待地将自己的满腔爱意表达出来，而结果往往是陷入表演之中而不自知。所以两个人的记忆才会出现偏差，那些你觉得刻骨铭心的过去，对方往往没有同样的感觉，甚至茫然不知。成长的标志就是懂得克制自己。克制自己的情绪，克制自己的表演欲，甚至克制自己的喜欢。少年时候，喜欢一个人恨不得把她变成自己身体的一部分。她刚说冷，我这边心里已经结冰了，她说难过，我立马如丧考妣，比她还难过，唯恐无法将自己的爱意表达出来。而事实上，谁也无法承担起另一个人的价值寄托，只有做一个独立、有价值的人，才能真正学会去爱另一个人。也千万不要尝试改变另一个人，这注定是徒劳的。做自己就好，爱情的真谛在于相互的吸引、志趣相投的同行，而不是追逐和依附以及自我感动。 它点醒了我，很多时候都是我们的一厢情愿，自我陶醉，应该很多人都会有这样的感觉。B站简直有毒，给我推了很多这种情感方面的视频。但是我发现，原来男生在女生需要帮助的时候都会表现得那么无畏，如出一辙，甚至说的话都是一模一样的。 我喜欢观察别人。经常发现很多男生在微信上长篇大论（在公交上很容易看到前座手机屏幕O.o），可对方的回复大都寥寥无几，或者说少的可怜。他们总是不停地开屏，打开微信，再QQ那样下拉似地刷新动作，然后漫不经心地翻找着什么，最后径直地锁屏，动作一气呵成。有点病态，不过我不知道他们的情况，不做评价，但有个结论应该是对的，女生貌似都是一种不太懂拒绝的生物，而很多时候男生不知道如何与女生相处（反过来也是吧）。同样的还有，感觉表白的含义已经被扭曲了，表白是表达一段感情，而不是索求一段关系 To 阳光明 媚. 那次见面我真应该有主见一点她教会了我很多，让我和女孩子聊天有了这么一个好的锻炼机会，虽然聊的“费劲”，但其实还算轻松愉快。让我学会了分享，不然我还是一个老是闷着等着别人来开的罐头。以后面对女生应该不会再扭捏，不会再不知所措，或许要表现得强势点。如今把它写出来，一遍一遍地整理补充，再把抖音快手卸载掉，感觉好受了一点……珍惜所有不期而遇，看淡你的不辞而别","tags":["近况"],"categories":["生活纪实"]},{"title":"IDEA快捷键大全","path":"/2023/09/05/study/IDEA快捷键大全/","content":"IDEA jetbra 文本编辑 Ctrl + D：复制行 Ctrl + Alt + Shift + C：复制引用（复制多级包目录时更有用） Ctrl + Shift + C：复制文件路径 Ctrl + Alt + I：自动缩进行至规范位置 Shift + Enter：开始新行 Ctrl + Alt + Enter：在当前行之前开始新行 Ctrl + Y：删除行 Ctrl + Shift + U：大小写转换 Ctrl + Alt + Shift + Ins：创建临时文件 Ctrl + Shift + Ins：从打开的剪贴板中选择粘贴内容 Shift + F4：在新窗口中打开 Ctrl + Alt + M：抽取代码为公共方法 光标操作 Ctrl + ←：左移一个单词 Ctrl + →：右移一个单词 Home：移动至行首 End：移动至行尾 Ctrl + Shift + M：移动至大括号 Ctrl + [：移动至代码块开始 Ctrl + ]：移动至代码块末尾 Alt + ↓：下一个方法 Alt + ↑：上一个方法 Ctrl + PgUp：移动至页面顶部 Ctrl + PgDn：移动至页面底部 PgUp：向上翻页 PgDn：向下翻页 Ctrl + Home：移动至文件开头 Ctrl + End：移动至文件末尾 文本选择 Shift + ←：向左选择 Shift + →：向右选择 Ctrl + Shift + ←：向左选择一个单词 Ctrl + Shift + →：向右选择一个单词 Shift + Home：向左选择至行头 Shift + End：向右选择至行尾 Shift + ↑：向上选择 Shift + ↓：向下选择 Ctrl + Shift + [：选择至代码块开头 Ctrl + Shift + ]：选择至代码块结尾 Ctrl + Shift + PgUp：选择至页面顶部 Ctrl + Shift + PgDn：选择至页面底部 Shift + PgUp：向上翻页选择 Shift + PgDn：向下翻页选择 Ctrl + Shift + Home：选择至文件开头 Ctrl + Shift + End：选择至文件结尾 Ctrl + W：扩展选择 代码折叠 Ctrl + +：展开代码块 Ctrl + -：折叠代码块 Ctrl + Alt + +：递归展开 Ctrl + Alt + -：递归折叠 Ctrl + Shift + +：全部展开 Ctrl + Shift + -：全部折叠 Ctrl + .：折叠选择 多个插入符号和范围选择 Alt + Shift + 鼠标左键点击：在指定的位置添加/删除插入符号 Alt + Shift + Ins：切换列选择模式 双击Ctrl + ↑：向上克隆插入符号（按Ctrl键两次，然后在不松开的情况下按向上箭头键） 双击Ctrl + ↓：向下克隆插入符号（按Ctrl键两次，然后在不松开的情况下按向下箭头键） Alt + Shift + G：将插入符号添加到选中的每一行末尾 Alt + J：选择单位下次出现的位置 Alt + Shift + J：取消最后一次选择 Ctrl + Alt + Shift + J：选择所有出现的位置 Alt + Shift + 鼠标长按左键：创建选择区（会选中经过的行） Alt + 鼠标长按左键：拖拽以创建矩形选择区 Ctrl + Alt + Shift + 鼠标长按左键：拖拽以创建多个矩形选择区 查看信息 Ctrl + Alt + F12：打开类所在文件夹 Ctrl + F12：查看类结构信息 Ctrl + H：查看继承类 Ctrl + Alt + U：查看maven依赖关系或者类继承关系 Ctrl + Alt + H：查看方法调用链 Ctrl + F12：查看类中的所有方法 Alt + 7 页面操作 Ctrl + F4：关闭当前页 Ctrl + E：最近的页面浏览 Shift + F6：文件重命名（变量重命名） Ctrl + B：快捷跳转 Ctrl + Alt + B：快捷跳转 F11：为当前行添加书签 Shift + F11：查看所有书签 Alt + ~：打开 Git 操作面板","tags":["IDEA"],"categories":["技能"]},{"title":"服务器搭建","path":"/2023/08/29/study/服务器搭建/","content":"安装Redis7下载地址：https://redis.io/download/ 1、必须先具备 gcc 编译环境 1234# 安装c++库环境sudo apt install gcc# 查看版本gcc -v 2、将下载后的包放入 Linux 目录（我放到了 /root） 12# /root目录下解压tar -zxvf redis-7.2.0.tar.gz 需要手动安装make工具1sudo apt install make 3、安装 1234567# 移动redis目录mv /root/redis-7.2.0 /usr/local/redis# 进入目录cd /usr/local/redismake PREFIX=/usr/local/redis install 这里多了一个关键字 PREFIX= 它的作用是编译的时候用于指定程序存放的路径，比如我们现在就是指定了 redis 必须存放在 /usr/local/redis 目录。 假设不添加该关键字Linux 会将可执行文件存放在 /usr/local/bin 目录，库文件会存放在 /usr/local/lib 目录，配置文件会存放在 /usr/local/etc 目录，其他的资源文件会存放在 /usr/local/share 目录。这里指定好目录也方便后续的卸载，后续直接 rm -rf /usr/local/redis 即可删除 redis 4、移动配置文件到安装目录下，以后就使用这一份配置文件 1234mkdir etccp redis.conf /usr/local/redis/etc/vim /usr/local/redis/etc/redis.conf 默认 daemonize no 改为 daemonize yes 默认 protected-mode yes 改为 protected-mode no 默认 bind 127.0.0.1 改为 直接注释掉(默认 bind 127.0.0.1 只能本机访问)或改成本机IP地址，否则影响远程IP连接 添加 redis 密码，则修改 requirepass 项为你需要设置的密码 这里列举下比较重要的配置项： 配置项名称 配置项值范围 说明 daemonize yes、no yes表示启用守护进程，默认是no即不以守护进程方式运行。其中Windows系统下不支持启用守护进程方式运行 port 指定 Redis 监听端口，默认端口为 6379 bind 绑定的主机地址如果需要设置远程访问则直接将这个属性注释或者改为 bind *这个属性和下面的 protected-mode 控制是否可以远程访问 protected-mode yes 、no 保护模式，该模式控制外部网是否可以连接redis服务，默认是yes，所以默认我们外网是无法访问的，如需外网连接则需要将此属性改为no timeout 300 当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能 loglevel debug、verbose、notice、warning 日志级别，默认为 notice databases 16 设置数据库的数量，默认的数据库是0。这个通过客户端工具可以看得到 rdbcompression yes、no 指定存储至本地数据库时是否压缩数据，默认为 yes。Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大。 dbfilename dump.rdb 指定本地数据库文件名，默认值为 dump.rdb dir 指定本地数据库存放目录 requirepass 设置连接密码，如果配置了连接密码，客户端在连接Redis时需要通过 AUTH &lt;password&gt; 命令提供密码，默认关闭 maxclients 0 设置同一时间最大客户端连接数，默认无限制。Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息 maxmemory XXX 指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理后，仍然达到最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区。配置项值范围列里XXX为数值。 logfile 日志文件。默认在控制台打印，不会记录到文件，可以指定日志文件路径(日志文件的目录须提前创建) dir 数据持久化目录 默认数据保存在当前目录，可以指定数据保存目录(目录也需要提前创建好) 5、启动 Redis 将 redis-cli 、redis-server 拷贝到 /usr/local/bin 下，让 redis-cli 指令可以在任意目录下直接使用12cp /usr/local/redis/bin/redis-server /usr/local/bin/cp /usr/local/redis/bin/redis-cli /usr/local/bin/ 启动命令 1redis-server /usr/local/redis/etc/redis.conf 可能会出现以下警告消除redis启动警告12345WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.内核参数说明内核参数 overcommit_memory 实现内存分配策略，可选值有三个：0、1、20 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则内存申请失败，并把错误返回给应用进程1 表示内核允许分配所有的物理内存，而不管当前的内存状态如何2 表示内核允许分配超过所有物理内存和交换空间总和的内存 12345678# 消除方法vim /etc/sysctl.conf# 在末尾添加，保存并退出vm.overcommit_memory = 1# 检查sysctl -p 6、查看 Redis 是否运行 采取查看进程方式 采取端口监听查看方式 7、让外网能够访问redis （一）开放防火墙端口 12firewall-cmd --zone=public --add-port=6379/tcp --permanentfirewall-cmd --reload （二）修改配置文件（见上） 8、卸载redis 123456# 停止redispkill redis# 删除安装目录rm -rf /usr/local/redis# 删除所有redis相关命令脚本rm -rf /usr/local/bin/redis-* 9、补充 检测是否有安装 redis-cli 和 redis-server 12whereis redis-cliwhereis redis-server 使用 redis-cli 连接命令 1234redis-cli -h 127.0.0.1 -p 6379 -a zmd123# 关闭redisshutdown 安装RabbitMq查看 erlang 与 rabbitmq 版本对应关系：RabbitMQ Erlang Version Requirements — RabbitMQ 使用包管理工具安装1、需要先安装 erlang 1234apt-get install -y erlang-nox# 查看 erlang 版本erl -v 安装curl1apt install curl 2、选择 rabbitmq 版本 直接安装最新版本 1sudo apt-get install rabbitmq-server 安装指定版本 查询可以安装的版本 1apt-cache madison rabbitmq-server 准备环境 1curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.deb.sh | sudo bash 安装 1sudo apt-get install rabbitmq-server=3.9.17-1 查看安装结果。RabbitMQ 会被安装在 /usr/lib/rabbitmq 1systemctl status rabbitmq-server 3、启用 Web 管理插件 开放端口1234firewall-cmd --zone=public --add-port=5672/tcp --permanentfirewall-cmd --zone=public --add-port=15672/tcp --permanentfirewall-cmd --reload 4、Web 管理界面登录：http://localhost:15672 使用 guest/guest 账户登录控制台失败，点击登录显示错误 rabbitmq User can only log in via localhost原因：rabbitmq 从 3.3 版本之后默认禁止使用 guest/guest 进行远程登录，只能通过 localhost 本地登录，在远程服务器开启rabbitmq-server 后，使用默认账号登录会报错。 解决：增加远程登录账号 123456789101112131415161718192021# 添加远程账号# rabbitmqctl add_user username passwordrabbitmqctl add_user root 123456 # 为账号设置权限# rabbitmqctl set_user_tags username rolerabbitmqctl set_user_tags root administrator # 以下为role可选# administrator，超级管理员角色，可以登录控制台查看所有信息，并可以对用户、策略操作# monitoring，监控者角色，可以登录控制台查看rabbitmq节点相关信息，无法对策略管理# management，普通管理者角色，仅可以登录控制台，无法看到节点信息 # 查看账户列表rabbitmqctl list_users # 删除角色# rabbitmqctl delete_user username # 修改密码# rabbitmqctl change_password username password 软件包解压缩安装安装rpm工具1apt install rpm 安装准备： RabbitMQ 压缩包下载地址：发布 ·rabbitmq&#x2F;rabbitmq-server (github.com) Erlang 压缩包下载地址：Releases · rabbitmq&#x2F;erlang-rpm (github.com) 然后解压缩命令 123rpm -Uvh erlang-26.0.2-1.el8.x86_64.rpm --nodepsrpm -Uvh rabbitmq-server-3.12.4-1.el8.noarch.rpm --force --nodeps 启动 常用命令 启动 RabbitMQ 1sudo rabbitmq-server start 关闭 RabbitMQ 1sudo rabbitmq-server stop 重启 RabbitMQ 1sudo rabbitmq-server restart 查看 RabbitMQ 状态 1sudo rabbitmqctl status","tags":["Linux"],"categories":["技能"]},{"title":"Linux环境准备","path":"/2023/08/28/study/Linux环境准备/","content":"Ubuntu VMware 下载与安装VMware 虚拟机：https://www.52pojie.cn/thread-1804571-1-1.html 镜像文件：https://ubuntu.com/ 安装教程 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》https://www.bilibili.com/video/BV1KX4y1Y7q8/ 查看系统版本号1234567891011121314getconf LONG_BIT# 分别对应 linux内核版本号、gcc编译器版本号、Ubuntu版本号cat /proc/version# 显示linux的内核版本和系统是多少位的：X86_64代表系统是64位的uname -alsb_release -a# 显示如下# No LSB modules are available.# Distributor ID: Ubuntu //类别是ubuntu# Description: Ubuntu 20.04.1 LTS //20年4月发布的稳定版本，LTS是Long Term Support：长时间支持版本，支持周期长达三至五年# Release: 20.04 //发行日期或者是发行版本号# Codename: focal //ubuntu的代号名称 配置123456# 切换到 root 账户sudo su# 如果未设置 root 用户密码，需要先设置root密码sudo passwd root# 更新源列表sudo apt-get update 找不到 ifconfig 命令在 Ubuntu 18.04 LTS 版本中，ifconfig 命令不再默认安装。这是因为 ifconfig 命令已经被 ip 命令所代替，ip 命令相比 ifconfig 命令更为强大，功能更加全面，可以完成 ifconfig 命令的所有功能。因此，如果在 Ubuntu 18.04 LTS 版本中执行 ifconfig 命令会提示找不到命令。 可以使用下面的命令来安装 ifconfig 命令： 1sudo apt install net-tools 原文链接：https://www.python100.com/html/E932P133FQKT.html 可能会遇到的问题：每次开机都没有ip地址 ip地址可能被释放，需要重新设置成自动分配1234# 查看方式，如果是 enabled 说明已经被托管；如果是 disabled，说明网卡未加托管nmcli n# 解决方法nmcli n on 开启 SSH 服务安装 openssh-server 1234567# 检查 ssh 服务是否启动成功# 第一种sudo service ssh status# 第二种sudo ps -e | grep ssh# 如果有 sshd 则说明 ssh 服务已启动，如果没有启动，输入下边命令启动 ssh 服务sudo service ssh start 允许 root 用户登陆 ssh简言 新安装的 Ubuntu 系统中是不允许 root 用户通过 ssh 登录的 只能先登陆其他账号，在切换到 root 账号，略麻烦 我们可以通过简单修改即可实现 root 的 ssh 登陆 缺少 vim 编辑器1sudo apt install vim 修改方法 修改 ssh 的配置文件 找到配置参数 PermitRootLogin 去掉前边的 # ，后边修改为 yes。也可以直接添加一行 重启 ssh 记得要为 root 设置密码 防火墙安装与设置123456apt install firewalld# 启动systemctl start firewalld# 关闭systemctl stop firewalld 开放端口 1234firewall-cmd --zone=public --add-port=8848/tcp --permanentfirewall-cmd --reload# 查看开放的端口firewall-cmd --list-ports 基本使用 12345678# 查看状态systemctl status firewalld# 开机禁用systemctl disable firewalld# 开机启用systemctl enable firewalld","tags":["Linux"],"categories":["技能"]},{"title":"Java代码精简指南","path":"/2023/08/13/study/Java代码精简指南/","content":"Hutool guava AlbertShen Java代码精简之道开发工具类分享： Hutool guava 创建局部变量时应该尽可能得晚 利用三元表达式传统： 123456String title;if (isMember(phone))&#123; title = &quot;会员&quot;;&#125; else &#123; title = &quot;游客&quot;;&#125; 精简： 1String title = isMember(phone) ? &quot;会员&quot; : &quot;游客&quot;; 注意：对于包装类型的算术计算，需要注意避免拆包时的空指针问题。 利用 return 关键字利用 return 关键字，可以提前函数返回，避免定义中间变量。 if(condition1) return; if(condition2) return; if(condition3) return ; 将概率大的写在前面，尽可能快地进行 return ，不需要进行后续无谓的匹配 （抛出异常也是同理） 传统12345678910public static boolean hasSuper(@NonNull List&lt;UserDO&gt; userList) &#123; boolean hasSuper = false; for (UserDO user : userList) &#123; if (Boolean.TRUE.equals(user.getIsSuper())) &#123; hasSuper = true; break; &#125; &#125; return hasSuper;&#125; 精简12345678910public static boolean hasSuper(@NonNull List&lt;UserDO&gt; userList) &#123; for (UserDO user : userList) &#123; if (Boolean.TRUE.equals(user.getIsSuper())) &#123; reurn ture; &#125; &#125; return false;&#125; 减少if&#x2F;else嵌套看看反例： 1234567891011// 修改用户密码，这个例子只有3层嵌套，很温柔了public boolean modifyPassword(Integer userId, String oldPassword, String newPassword) &#123; if (userId != null &amp;&amp; StringUtils.isNotBlank(newPassword) &amp;&amp; SpringUtils.isNotBlank(oldPassword)) &#123; User user = getUserById(userId); if (user != null) &#123; if (user.getPassword().equals(oldPassword) &#123; return updatePassword(userId, newPassword) &#125; &#125; &#125;&#125; 看看正例： 1234567891011121314// 修改用户密码 Public Boolean modifyPassword(Integer userId, String oldPassword, String newPassword) &#123; if (userId == null || StringUtils.isBlank(newPassword) || StringUtils.isBlank(oldPassword)) &#123; return false; &#125; User user = getUserById(userId); if(user == null) &#123; return false; &#125; if(!user.getPassword().equals(oldPassword) &#123; return false; &#125; return updatePassword(userId, newPassword);&#125; 正例采用卫语句减少了嵌套，但是并非所有场景都适合这样改写。如果不适合，可以将关联性高的逻辑抽取成一个独立的方法减少嵌套。 try&#x2F;catch-资源回收 改造前123InputStream inputStream = new FileInputStream(new File(&quot;&quot;));....inputStream.close(); 改造后123try(InputStream inputStream = new FileInputStream(new File(&quot;&quot;))) &#123; .........&#125; 利用数组简化对于固定上下限范围的 if-else 语句，可以用数组+循环来简化。 普通： 123456789101112131415public static int getGrade(double score) &#123; if (score &gt;= 90.0D) &#123; return 1; &#125; if (score &gt;= 80.0D) &#123; return 2; &#125; if (score &gt;= 60.0D) &#123; return 3; &#125; if (score &gt;= 30.0D) &#123; return 4; &#125; return 5;&#125; 精简： 12345678910111213141516171819202122private static final ImmutableMap&lt;Predicate&lt;Integer&gt;, Integer&gt; predict_map = ImmutableMap.&lt;Predicate&lt;Integer&gt;, Integer&gt;builder() .put(num -&gt; num &gt;= 90, 1) .put(num -&gt; num &gt;= 80, 2) .put(num -&gt; num &gt;= 70, 3) .build();public static void main1(String[] args) &#123; int number = 80; Optional optional = predict_map.entrySet().stream() .filter(entry -&gt; &#123; return entry.getKey().test(number); &#125;) .map(entry -&gt; &#123; return entry.getValue(); &#125;) .findFirst(); if (optional.isPresent()) &#123; System.out.println(optional.get()); &#125;&#125; 利用 Map 简化对于映射关系的 if-else 语句，可以用Map来简化。此外，此规则同样适用于简化映射关系的 switch 语句。 普通： 12345678910111213public static String getBiologyClass(String name) &#123; switch (name) &#123; case &quot;dog&quot; : return &quot;animal&quot;; case &quot;cat&quot; : return &quot;animal&quot;; case &quot;lavender&quot; : return &quot;plant&quot;; ... default : return null; &#125;&#125; 精简： 12345678910private static final Map&lt;String, String&gt; BIOLOGY_CLASS_MAP = ImmutableMap.&lt;String, String&gt;builder() .put(&quot;dog&quot;, &quot;animal&quot;) .put(&quot;cat&quot;, &quot;animal&quot;) .put(&quot;lavender&quot;, &quot;plant&quot;) ... .build();public static String getBiologyClass(String name) &#123; return BIOLOGY_CLASS_MAP.get(name);&#125; 使用 Optional 保证值存在普通： 123456Integer thisValue;if (Objects.nonNull(value)) &#123; thisValue = value;&#125; else &#123; thisValue = DEFAULT_VALUE;&#125; 精简： 12Integer thisValue = Optional.ofNullable(value).orElse(DEFAULT_VALUE);Integer thisValue = MoreObjects.firstNonNull(value,DEFAULT_VALUE); 使用 Stream匹配集合数据普通： 1234567boolean isFound = false;for (UserDO user : userList) &#123; if (Objects.equals(user.getId(), userId)) &#123; isFound = true; break; &#125;&#125; 精简： 12boolean isFound = userList.stream() .anyMatch(user -&gt; Objects.equals(user.getId(), userId)); 过滤集合数据普通 123456List&lt;UserDO&gt; resultList = new ArrayList&lt;&gt;();for (UserDO user : userList) &#123; if (Boolean.TRUE.equals(user.getIsSuper())) &#123; resultList.add(user); &#125;&#125; 精简 123List&lt;UserDO&gt; resultList = userList.stream() .filter(user -&gt; Boolean.TRUE.equals(user.getIsSuper())) .collect(Collectors.toList()); 汇总集合数据普通 1234double total = 0.0D;for (Account account : accountList) &#123; total += account.getBalance();&#125; 精简 1double total = accountList.stream().mapToDouble(Account::getBalance).sum(); 转化集合数据普通 1234List&lt;UserVO&gt; userVOList = new ArrayList&lt;&gt;();for (UserDO userDO : userDOList) &#123; userVOList.add(transUser(userDO));&#125; 精简 12List&lt;UserVO&gt; userVOList = userDOList.stream() .map(this::transUser).collect(Collectors.toList()); 分组集合数据普通 12345Map&lt;Long, List&lt;UserDO&gt;&gt; roleUserMap = new HashMap&lt;&gt;();for (UserDO userDO : userDOList) &#123; roleUserMap.computeIfAbsent(userDO.getRoleId(), key -&gt; new ArrayList&lt;&gt;()) .add(userDO);&#125; 精简 12Map&lt;Long, List&lt;UserDO&gt;&gt; roleUserMap = userDOList.stream() .collect(Collectors.groupingBy(UserDO::getRoleId)); 分组汇总集合普通 123456Map&lt;Long, Double&gt; roleTotalMap = new HashMap&lt;&gt;();for (Account account : accountList) &#123; Long roleId = account.getRoleId(); Double total = Optional.ofNullable(roleTotalMap.get(roleId)).orElse(0.0D); roleTotalMap.put(roleId, total + account.getBalance());&#125; 精简 1roleTotalMap = accountList.stream().collect(Collectors.groupingBy(Account::getRoleId, Collectors.summingDouble(Account::getBalance))); 利用程序结构返回条件表达式条件表达式判断返回布尔值，条件表达式本身就是结果 普通 1234567public boolean isSuper(Long userId) &#123; UserDO user = userDAO.get(userId); if (Objects.nonNull(user) &amp;&amp; Boolean.TRUE.equals(user.getIsSuper())) &#123; return true; &#125; return false;&#125; 精简 1234public boolean isSuper(Long userId) &#123; UserDO user = userDAO.get(userId); return Objects.nonNull(user) &amp;&amp; Boolean.TRUE.equals(user.getIsSuper());&#125;","tags":["Java"],"categories":["技能"]},{"title":"SQL练习","path":"/2023/08/12/practice/SQL练习/","content":"MySQL 练习题与同学闲聊之余，知道了这一次的 MySQL 练习题，闲暇之余将前 18 道题完成了（按照作者的说法难度是依次递增的）。我使用的是 MySQL 8.0.33，练习题中用到了一些 8.0 的新特性 https://www.jianshu.com/p/476b52ee4f1bhttps://www.jianshu.com/p/476b52ee4f1b 查询” 01 “课程比” 02 “课程成绩高的学生的信息及课程分数 1234567select t3.*, t1.score, t2.scorefrom sc t1 join sc t2 on t1.SId = t2.SId join student t3 on t1.SId = t3.SIdwhere t1.CId = &#x27;01&#x27; and t2.CId = &#x27;02&#x27; and t1.score &gt; t2.score; 查询同时存在” 01 “课程和” 02 “课程的情况 12345select *from sc t1 join sc t2 on t1.SId = t2.SIdwhere t1.CId = &#x27;01&#x27; and t2.CId = &#x27;02&#x27;; 查询存在” 01 “课程但可能不存在” 02 “课程的情况(不存在时显示为 null ) 1234select *from sc t1 left join sc t2 on t1.SId = t2.SId and t2.CId = &#x27;02&#x27;where t1.CId = &#x27;01&#x27;; 查询不存在” 01 “课程但存在” 02 “课程的情况 123456select *from scwhere sc.SId not in (select SId from sc where sc.CId = &#x27;01&#x27;) and sc.CId = &#x27;02&#x27;; 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩 12345select avg(t1.score), t1.SId, t2.Snamefrom sc t1 join student t2 on t1.SId = t2.SIdgroup by t1.SIdhaving avg(t1.score) &gt;= 60; 查询在 SC 表存在成绩的学生信息 1234select t2.*from sc t1 join student t2 on t1.SId = t2.SIdgroup by t1.SId; 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null ) 1234select t1.SId, t1.Sname, count(t2.SId), sum(t2.score)from student t1 left join sc t2 on t1.SId = t2.SIdgroup by t1.SId, t1.Sname; 查有成绩的学生信息 12345select t1.*from student t1 left join sc t2 on t1.SId = t2.SIdwhere t2.SId is not nullgroup by t1.SId; 查询「李」姓老师的数量 123select count(1)from teacherwhere Tname like &#x27;李%&#x27;; 查询学过「张三」老师授课的同学的信息 123456select t1.*from student t1 join sc t2 on t1.SId = t2.SId join course t3 on t2.CId = t3.CId join teacher t4 on t3.TId = t4.TId and t4.Tname = &#x27;张三&#x27;group by t2.SId; 查询没有学全所有课程的同学的信息 12345select t1.*, count(t2.sid)from student t1 left join sc t2 on t1.SId = t2.SIdgroup by t1.SIdhaving count(t2.SId) &lt; (select count(1) from course); 查询至少有一门课与学号为” 01 “的同学所学相同的同学的信息 12345select t3.*from sc t2 join student t3 on t2.SId = t3.SIdwhere t2.cid in (select t1.CId from sc t1 where t1.SId = &#x27;01&#x27;)group by t3.SId; 查询和” 01 “号的同学学习的课程 完全相同的其他同学的信息 123456select group_concat(t1.CId order by t1.CId) as concat, t2.*from sc t1 join student t2 on t1.SId = t2.SIdwhere t1.SId &lt;&gt; &#x27;01&#x27;group by t1.SIdhaving concat = (select group_concat(CId order by CId) from sc where SId = &#x27;01&#x27;); 查询没学过”张三”老师讲授的任一门课程的学生姓名 12345678select *from studentwhere SId not in (select t1.SId from sc t1 join course t2 on t1.CId = t2.CId join teacher t3 on t2.TId = t3.TId where t3.Tname = &#x27;张三&#x27; group by t1.SId); 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 123456789select t1.SId, t2.Sname, avg(t1.score)from sc t1 join student t2 on t1.SId = t2.SIdwhere t1.SId in (select SId from sc where score &lt; 60 group by SId having count(SId) &gt;= 2)group by t1.SId; 检索” 01 “课程分数小于 60，按分数降序排列的学生信息 123456select t2.*, t1.scorefrom sc t1 join student t2 on t1.SId = t2.SIdwhere t1.CId = &#x27;01&#x27; and t1.score &lt; 60order by t1.score desc; 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩 123select t1.*, avg(t1.score) over (PARTITION BY t1.SId) as afrom sc t1order by a desc; 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率。及格为&gt;&#x3D;60，中等为：70-80，优良为：80-90，优秀为：&gt;&#x3D;90 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 12345678910111213select t1.CId, t2.Cname, max(t1.score), min(t1.score), avg(t1.score), sum(if(t1.score &gt;= 60, 1, 0)) / count(*) as 及格率, sum(if(t1.score &gt;= 70 and t1.score &lt; 80, 1, 0)) / count(*) as 中等率, sum(if(t1.score &gt;= 80 and t1.score &lt; 90, 1, 0)) / count(*) as 优良率, sum(if(t1.score &gt;= 90, 1, 0)) / count(*) as 优秀率from sc t1 join course t2 on t1.CId = t2.CIdgroup by t1.CIdorder by count(*) desc, t1.CId; 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺 123select CID, SID, score, rank() over (PARTITION BY CId order by score desc ) as rank1from scorder by CId, rank1; 没看懂他的写法 123456select a.cid, a.sid, a.score, count(b.score) + 1 as rank1from sc as a left join sc as b on a.score &lt; b.score and a.cid = b.cidgroup by a.cid, a.sid, a.scoreorder by a.cid, rank1; 按各科成绩进行排序，并显示排名， Score 重复时合并名次 123select CID, SID, score, dense_rank() over (PARTITION BY CId order by score desc ) as rank1from scorder by CId, rank1; 查询学生的总成绩，并进行排名，总分重复时保留名次空缺 123select SID, sum(score), rank() over (order by sum(score) desc)from scgroup by SId; 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺 123select SID, sum(score), dense_rank() over (order by sum(score) desc)from scgroup by SId; 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比 12345678910select t1.CId, t2.Cname, sum(if(t1.score &lt;= 100 and t1.score &gt; 85, 1, 0)) as &#x27;100-85&#x27;, sum(if(t1.score &lt;= 85 and t1.score &gt; 70, 1, 0)) as &#x27;85-70&#x27;, sum(if(t1.score &lt;= 70 and t1.score &gt; 60, 1, 0)) as &#x27;70-60&#x27;, sum(if(t1.score &lt;= 60 and t1.score &gt; 0, 1, 0)) as &#x27;60-0&#x27;, count(1)from sc t1 join course t2 on t1.CId = t2.CIdgroup by t1.CId, t2.Cname; 查询各科成绩前三名的记录 12345with a as (select SId, CId, score, rank() over (PARTITION BY CId order by score desc ) as rank1 from sc)select *from awhere a.rank1 &lt;= 3; SQL 日期区间查询 日期范围获取每天（截止结束日期） 123SELECT DATE_ADD(&#x27;2021-04-04&#x27;, INTERVAL CAST(help_topic_id AS signed INTEGER) DAY) AS `date`FROM mysql.help_topicWHERE help_topic_id &lt; DATEDIFF(&#x27;2021-07-04&#x27;, &#x27;2021-04-04&#x27;) + 1; 日期范围获取每月（截止结束日期所在月） 123SELECT DATE_FORMAT(DATE_ADD(&#x27;2021-04-04&#x27;, INTERVAL CAST(help_topic_id AS signed INTEGER) MONTH), &#x27;%Y-%m&#x27;) AS `month`FROM mysql.help_topicWHERE help_topic_id &lt; TIMESTAMPDIFF(MONTH, &#x27;2021-04-04&#x27;, &#x27;2021-07-04&#x27;) + 1; 本周每天（截止今日） 12345SELECT DATE_FORMAT( DATE_ADD(DATE_SUB(NOW(), INTERVAL WEEKDAY(NOW()) + 0 DAY), INTERVAL CAST(help_topic_id AS signed INTEGER) DAY), &#x27;%Y-%m-%d&#x27;) AS `date`FROM mysql.help_topicWHERE help_topic_id &lt;= WEEKDAY(NOW()); 近7日每天（截止今日） 1234SELECT DATE_FORMAT(DATE_ADD(DATE_ADD(NOW(), INTERVAL - 6 DAY), INTERVAL CAST(help_topic_id AS SIGNED INTEGER) DAY), &#x27;%Y-%m-%d&#x27;) AS `date`FROM mysql.help_topicWHERE help_topic_id &lt; 7; 本月每天（截止今日） 1234SELECT DATE_ADD(DATE_ADD(NOW(), INTERVAL - DAY(NOW()) + 1 DAY), INTERVAL CAST(help_topic_id AS signed INTEGER) DAY) AS `date`FROM mysql.help_topicWHERE help_topic_id &lt; DAY(NOW()); 近30日每天（截止今日） 1234SELECT DATE_FORMAT(DATE_ADD(DATE_ADD(NOW(), INTERVAL - 29 DAY), INTERVAL CAST(help_topic_id AS SIGNED INTEGER) DAY), &#x27;%Y-%m-%d&#x27;) AS `date`FROM mysql.help_topicWHERE help_topic_id &lt; 30; 本季度每月（截止所在月） 1234SELECT DATE_FORMAT(DATE_ADD(CONCAT(YEAR(NOW()), &#x27;-0&#x27;, ((QUARTER(NOW()) - 1) * 3 + 1), &#x27;-01&#x27;), INTERVAL CAST(help_topic_id AS SIGNED INTEGER) MONTH), &#x27;%Y-%m&#x27;) as `month`FROM mysql.help_topicWHERE help_topic_id &lt; MONTH(NOW()) % 3; 近半年每月（截止所在月） 1234SELECT DATE_FORMAT(DATE_ADD(DATE_ADD(NOW(), INTERVAL - 5 MONTH), INTERVAL CAST(help_topic_id AS SIGNED INTEGER) MONTH), &#x27;%Y-%m&#x27;) as `month`FROM mysql.help_topicWHERE help_topic_id &lt; 6; 本年每月（截止所在月） 1234SELECT DATE_FORMAT(DATE_ADD(CONCAT(YEAR(NOW()), &#x27;-01-01&#x27;), INTERVAL CAST(help_topic_id AS SIGNED INTEGER) MONTH), &#x27;%Y-%m&#x27;) as `month`FROM mysql.help_topicWHERE help_topic_id &lt; MONTH(NOW()); 近1年每月（截止所在月） 1234SELECT DATE_FORMAT(DATE_ADD(DATE_ADD(NOW(), INTERVAL - 11 MONTH), INTERVAL CAST(help_topic_id AS SIGNED INTEGER) MONTH), &#x27;%Y-%m&#x27;) as `month`FROM mysql.help_topicWHERE help_topic_id &lt; 12;","tags":["MySQL"],"categories":["练习"]},{"title":"大学上到现在终于明白的事","path":"/2023/08/09/other/大学上到现在终于明白的事/","content":"大学上到现在终于明白，为什么曾经可以一天上十几节课从早到晚都觉得天经地义，而现在一天三四节课就累得要死。 因为曾经的教室像半个家，我们总是说，我的水杯在教室，衣服在教室，笔记本在教室。而现在，几乎再也没有用过“回教室”这个词，而是变成了“去教室”。丢了的恐怕不是学习的动力，而是那半个家的归属感吧。想到关于那个小时代的一切就哽咽。 一次高考，考散了一拨人，可能这辈子都无法再见到。曾经无时无刻不想要挣脱的被自己在心里骂了一万遍的高中，现在发现却是我们再也回不去的天堂。 高中里喜欢你的人会冲你笑，大学里讨厌你的人会冲你笑； 高中里漂亮女生就是凭实力，大学里漂亮女生一半是画出来的； 高中里每天课很多，但仍然有时间做自己喜欢的事情，大学里每天课不多，但总没时间做自己喜欢的事情； 高中里教室一下课很热闹，大学里教室一下课很沉闷； 高中里大家不在乎当不当干部，大学里一堆人挺把当官当回事；高中里生活圈子小，朋友圈子大， 大学里生活圈子大，朋友圈子小； 高中里大家心胸很开阔，一点事过去就过去了，大学里有人心胸不开阔，为一点小事生半天气； 高中里觉得现在开放的孩子真多，大学里发现这代人传统的也不少； 高中里有特长的人受欢迎，大学里没有人真正受欢迎； 高中里对任何事大家会给出自己的第一反应，大学里对任何事大家会隐藏自己的第一反应； 高中里别人会正面回答你的问题，大学里别人会迂回回答你的问题； 高中里你开心不一定会去喝酒， 大学里你不开心一定想到喝酒； 高中里可以很多人一起玩，大学里却是分堆玩； 高中里你生病了会有人问你好点了没，大学里你跟身边的人嚷嚷我哪里不舒服也未必有人理你； 高中里一有空就想着去打球，大学里有事没事就想着去买什么吃； 高中里，累并快乐着，大学里忙里忙外却迷茫着； 高中里，我幻想着我的大学生活，大学里，我回忆着我们的高中； 高中里我盼着早点上大学，大学里我希望早点回家去看看久违的你们； 高中里，我几乎天天写日记；大学里，偶尔提起笔来写下的却还是曾经的我们； 高中里……大学里……在大学里，想念着高中…… We are always here.Come if you want. 这段文字的出处我已经找不到，只记得最开始看到是在一位同学的 QQ 空间，然后它就一直躺在我的备忘录里面了。现在大家几乎不发说说了，唯一了解同学们近况的渠道也断掉，仅剩几位要好的高中同学过年聚一聚。也许，以后不见面的日子，都要用年来计算了 就像离职之前的”散伙饭”一样。我们都知道，这顿饭之后，这辈子也不可能把在座的各位都聚在一起吃饭了。听着挺唬人的，但是仔细想想，高中毕业的时候，大学毕业的时候或许也说过这样的话。说这样的话，对后来的人生造成了什么影响了吗？并没有，吃饭不重要，重要的是我们静静的躺在对方的朋友圈里，看到你发关于生活的动态，不管是结婚、生子、晒娃..…我们都会会心一笑，然后点个赞，时不时的再评论一个。知道你过的好，这就够了。吃饭见面，都不必强求，缘分到了，自然水到渠成。","tags":["转载"],"categories":["杂文杂续"]},{"title":"博客美化","path":"/2023/07/28/base/博客美化/","content":"Stellar Hexo&nbsp;Stellar&nbsp;主题装修笔记 https://xaoxuu.com/wiki/stellar/#start本站博客所使用的主题 Gitee 创建不带二级目录的 pages通常我们创建博客仓库时，都是会起名 blog，但是当你使用 Gitee Pages 服务时，会发现分配的访问路径上会多了这个 blog，例如：https://coclong.gitee.io/blog/。这其实并没有什么，但是如果你因此而去设置了根目录下 _config.yml 中的 root 属性，像这样：（Hexo 文档中也有提到） 根目录/_config.yml12url: https://coclong.gitee.io/blog/root: /blog/ 接下来蛋疼的来了，你以为你在配置文件中指定的是根目录，但是你会发现，所有用到静态资源的地方都需要手动加上 /blog/ 前缀才能被正确引入，md 中使用也是如此 此时需要用到的写法1&lt;img src=&quot;/blogs/images/picture/20230711224927.jpg&quot; style=&quot;zoom:25%;&quot; title=&quot;配置图&quot; /&gt; 此时会失效的写法1&lt;img src=&quot;/images/picture/20230711224927.jpg&quot; style=&quot;zoom:25%;&quot; title=&quot;配置图&quot; /&gt; 虽然把根目录都写一遍确实可以解决问题，但感觉这样就很奇怪。经过多次尝试后，你会发现最好的解决方案还是让自己的域名不带二级目录去访问。 解决补充如果用 Gitee 去创建一个不带二级目录的域名那么现在回到标题指出的地方，我找到了 Gitee 的产品文档，如上图。需要注意的是 https://gitee.com/ipvb 这个指的是你的个人空间地址，进入个人首页，浏览器上方的链接就是了。你需要创建的应该是与这个空间地址的后缀相同的仓库，而不是你的用户名原文链接是： https://help.gitee.com/services/gitee-pages/intro#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98此时博客仓库已经建立了，不用删除，在仓库设置那里是可以改名的，把仓库名称和路径改了就好。博客配置中仓库相关的也要记得改 此时回到博客配置文件，你就不用再指定 root 值了，静态资源的引入也不用带前缀。这里贴一下我的博客文件目录： 123456789博客根目录/source/||____images| | ____picture| | ____图片a| |____posts | ____Project1 | ____a.md 引用本地图片时让md和网站同时显示图片在 front matter 中加入 typora-root-url: ../，自己根据实际情况配置 typora-root-url其原理是：文档中的引用优先满足网络路径（要使用相对路径），然后通过 typora-root-url 参数来改变本地访问路径。注意，这种只能影响到 md 原生的图片引入写法（支持 img 标签），其他诸如 Hexo 、主题所提供的引入资源方式是不支持的 这算是部署博客的一个小坑吧~ 开启文章推荐相关文章推荐，是优先通过文章分类，再文章标签相同来推荐的。 第一步需要先安装插件第二步在主题配置文件中开启：根目录/_config.stellar.yml12345article: # npm i hexo-related-popular-posts related_posts: enable: true title: 您可能感兴趣的文章结束开启后会在每篇文章的下方推荐相同类型的文章。 首先要知道，从这里开始，下面的操作或多或少都是要修改博客主题源码的，博客主题的目录通常是themes 文件夹中，所以如果你不是以源码方式引入的话，是不支持本次 diy 的 更多的装修、美化可以去看 Stellar ，多通读几遍就好，或者多多拜访使用相同主题的博客，你会发现很多惊喜。持续更新...","tags":["博客折腾"],"categories":["Hello World"]},{"title":"写作姿势","path":"/2023/07/16/base/写作姿势/","content":"Hexo Stellar 本文整理了一些 Stellar 主题常用的写作语法与美化，同时也对自己的文章创作做出一些规范 文章初始化 1、在博客根目录下新建文章 2、新建完成后进入 blog&#x2F;source&#x2F;_posts&#x2F; 中，xxx.md 就是本次我们要写作的文章内容 3、编辑 Front-matter，就是文件最上方以 --- 分割的区域。key: value 即 yaml 语法格式，冒号后都要带空格，这里给出一些常见参数，更多请参考：Stellar 配置选项 描述 title 文章标题，默认值为命令行指定的文件名 author 文章作者，默认值为根 _config.yml 中的 author date 建立时间 updated 更新日期 description 用于指定显示在首页中的文章描述，不会在文章中出现 sticky 置顶（数字越大越靠前） indent 段落是否缩进 categories 文章分类 tags 文章标签 cover 封面 banner 横幅，文章页面顶部区域显示长长的横幅图片 comments 开启文章的评论功能 如果只设置 cover 参数，则文章封面会显示 title 与 description 或者摘要，若想图片全显示，则加入 poster 参数，具体可看：文章封面 12345678---cover: # 封面poster: # 封面全显示 topic: # 标题上方的小字 headline: # 大标题 caption: # 标题下方的小字 color: # 字体颜色，默认white--- 设置参考链接 12345---references: - &#x27;[Stellar 每个人的独立博客](https://xaoxuu.com/wiki/stellar/#start)&#x27; - &#x27;[Hexo 文档](https://hexo.io/zh-cn/docs/)&#x27;--- 默认的一级标题是文章的 title，如果希望使用别的文字作为一级标题，可以指定 h1 字段： 123---h1: 快速开始--- 分类与标签 1234---categories: [设计开发, iOS开发]tags: [iOS, 心率]--- 在根目录下 scaffolds 文件夹中编辑 post.md 的 font-matter，既可使用 Hexo 自带模板实现命令行创建新文章时自动生成相关信息。 写作常用 标题相关hashtag 标签hashtag 标签：在文章的一级标题下，可以将本篇内容中的技术关键字，用 hashtag 标签高亮颜色可以选择与网站相关的颜色 Gitee Stellar 1&#123;% hashtag Gitee https://gitee.com/ color:red %&#125; quot 引用quot 引用：设置标题居中引用 我的第一篇博客 热门话题 热门话题 写法如下，此外，加上 el:h2/h3/h4/h5/h6 可以作为标题使用 1234&#123;% quot 我的第一篇博客 %&#125;&#123;% quot 热门话题 icon:hashtag %&#125;&#123;% quot 热门话题 icon:default %&#125;&#123;% quot 我的第一篇博客 el:h3 %&#125; 这是一个 icons.yml 配置的示例 这是一个 url 的示例 更多示例123&#123;% quot prefix:solar:planet-bold-duotone 这是一个 icons.yml 配置的示例 %&#125;&#123;% quot prefix:https://api.iconify.design/line-md:moon-alt-to-sunny-outline-loop-transition.svg 这是一个 url 的示例 suffix:https://api.iconify.design/solar:list-heart-minimalistic-line-duotone.svg %&#125; 图文并茂文本修饰与操作mark标记标签：支持多彩文本标记，包括：默认 红 橙 黄 绿 青 蓝 紫 浅 深 警告 错误 一共 12 种颜色。 1234567891011121314支持多彩文本标记，包括：&#123;% mark 默认 %&#125;&#123;% mark 红 color:red %&#125; &#123;% mark 橙 color:orange %&#125; &#123;% mark 黄 color:yellow %&#125;&#123;% mark 绿 color:green %&#125;&#123;% mark 青 color:cyan %&#125;&#123;% mark 蓝 color:blue %&#125;&#123;% mark 紫 color:purple %&#125;&#123;% mark 浅 color:light %&#125;&#123;% mark 深 color:dark %&#125;&#123;% mark 警告 color:warning %&#125;&#123;% mark 错误 color:error %&#125;一共 12 种颜色。 note 备注块note 备注块：第一个空格前面的是标题 title，后面的是正文 content。如果标题中需要显示空格，请使用 &amp;nbsp; 代替。 示例写法一共支持12种颜色，可以满足几乎所有的需求了。color 可设置 red、orange、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。1&#123;% note [title] content [color:color] %&#125; 123title: 标题（可选）content: 内容color: red/orange/yellow/green/cyan/blue/purple/light/dark/warning/error 带标题的备注块 示例写法这&nbsp;是一个带空格的标题这里才是正文 呼啊！1&#123;% note 这&amp;nbsp;是一个带空格的标题 这里才是正文 呼啊！ %&#125; copy 复制行copy 复制行：只适用于复制单行内容 示例代码 $ HTTPS ssh gh12345&#123;% copy curl -s https://sh.xaox.cc/install | sh %&#125;&#123;% copy curl -s https://sh.xaox.cc/install | sh prefix:$ %&#125;&#123;% copy git:https xaoxuu.com/hexo-theme-stellar prefix:HTTPS %&#125;&#123;% copy git:ssh xaoxuu.com/hexo-theme-stellar prefix:ssh %&#125;&#123;% copy git:gh xaoxuu.com/hexo-theme-stellar prefix:gh %&#125; 文本修饰标签集文本修饰标签集 这是 密码 标签 这是 下划线 标签 这是 着重号 标签 这是 波浪线 标签 这是 删除线 标签 这是 上角标 标签 这是 下角标 标签 这是 键盘样式 标签，试一试：⌘ + D 写法如下： 12345678- 这是 &#123;% psw 密码 %&#125; 标签- 这是 &#123;% u 下划线 %&#125; 标签- 这是 &#123;% emp 着重号 %&#125; 标签- 这是 &#123;% wavy 波浪线 %&#125; 标签- 这是 &#123;% del 删除线 %&#125; 标签- 这是 &#123;% sup 上角标 color:red %&#125; 标签- 这是 &#123;% sub 下角标 %&#125; 标签- 这是 &#123;% kbd 键盘样式 %&#125; 标签，试一试：&#123;% kbd ⌘ %&#125; + &#123;% kbd D %&#125; button 按钮button 按钮 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 探索 写法说明语法格式图标大全1&#123;% button 探索 https://xaoxuu.com/wiki/stellar/ icon:solar:documents-bold-duotone %&#125;123456789# &#123;% button text url [icon:key/src] [color:color] [size:xs] %&#125;# 必填text: 探索 # 显示文字url: # 跳转链接# 可选参数color: orange # theme, accent, red, orange, yellow, green, cyan, blue, purpleicon: solar:planet-bold-duotone # 显示图标，支持 icon.yml 中的文件名和外链图标size: xs # 按钮尺寸，目前只有两种尺寸：默认是普通大小， xs 是最小号icons.yml123456789101112131415161718192021222324252627282930313233solar:documents-bold-duotonesolar:chat-square-like-bold-duotonesolar:planet-bold-duotonesolar:notebook-bookmark-bold-duotonesolar:pin-linearsolar:hashtag-lineardefault:gobackdefault:searchdefault:rssdefault:bookmark.activedefault:leftbardefault:rightbardefault:pindefault:calendardefault:categorydefault:editdefault:upupdefault:tocommentdefault:themegithub:logogithub:repogithub:stargithub:forkgithub:tagshare:wechatshare:weiboshare:emailshare:linkph:seal-question-fill radio 单选radio 单选 示例代码写法没有勾选的单选框 已勾选的单选框12&#123;% radio 没有勾选的单选框 %&#125;&#123;% radio checked:true 已勾选的单选框 %&#125;12checked: true/falsecolor: red/orange/yellow/green/cyan/blue/purple checkbox 复选checkbox 复选 示例代码写法普通的没有勾选的复选框 普通的已勾选的复选框 显示为加号的绿色的已勾选的复选框 显示为减号的黄色的已勾选的复选框 显示为乘号的红色的已勾选的复选框12345&#123;% checkbox 普通的没有勾选的复选框 %&#125;&#123;% checkbox checked:true 普通的已勾选的复选框 %&#125;&#123;% checkbox symbol:plus color:green checked:true 显示为加号的绿色的已勾选的复选框 %&#125;&#123;% checkbox symbol:minus color:yellow checked:true 显示为减号的黄色的已勾选的复选框 %&#125;&#123;% checkbox symbol:times color:red checked:true 显示为乘号的红色的已勾选的复选框 %&#125;123checked: true/falsecolor: red/orange/yellow/green/cyan/blue/purplesymbol: plus/minus/times navbar 导航栏navbar 导航栏 文章内也可以插入一个导航栏： 1&#123;% navbar active:1 [文章](/) [项目](/wiki/) [留言](#comments) [GitHub](https://github.com/xaoxuu/) %&#125; 文章项目留言GitHub poetry 诗词poetry 诗词 示例代码游山西村陆游莫笑农家腊酒浑，丰年留客足鸡豚。山重水复疑无路，柳暗花明又一村。箫鼓追随春社近，衣冠简朴古风存。从今若许闲乘月，拄杖无时夜叩门。诗词节选12345678&#123;% poetry 游山西村 author:陆游 footer:诗词节选 %&#125;莫笑农家腊酒浑，丰年留客足鸡豚。**山重水复疑无路，柳暗花明又一村。**箫鼓追随春社近，衣冠简朴古风存。从今若许闲乘月，拄杖无时夜叩门。&#123;% endpoetry %&#125; paper 纸张标签paper 纸张标签 示例代码文言文出师表先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。后出师表先帝深虑汉、贼不两立，王业不偏安，故托臣以讨贼也。以先帝之明，量臣之才，固知臣伐贼，才弱敌强也。然不伐贼，王业亦亡。惟坐而待亡，孰与伐之？是故托臣而弗疑也。诸葛亮三国节选12345678910&#123;% paper style:underline title:文言文 author:诸葛亮 date:三国 footer:节选 %&#125;&lt;!-- line left --&gt;出师表&lt;!-- paragraph --&gt;先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。&lt;!-- line right --&gt;后出师表&lt;!-- paragraph --&gt;先帝深虑汉、贼不两立，王业不偏安，故托臣以讨贼也。以先帝之明，量臣之才，固知臣伐贼，才弱敌强也。然不伐贼，王业亦亡。惟坐而待亡，孰与伐之？是故托臣而弗疑也。&#123;% endpaper %&#125; 可选参数12345style: underline/无 # 是否带下划线title: # 标题author: # 作者date: # 日期footer: # 页脚信息 正文中可以设置行段落格式以显示不同的效果 12345678&lt;!-- section 小节标题 --&gt;小节标题，居中显示&lt;!-- paragraph --&gt;段落，首行缩进两个字符&lt;!-- line left --&gt;段落左对齐&lt;!-- line right --&gt;段落右对齐 reel 卷轴标签reel 卷轴标签 示例写法滕王阁序王勃时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。重九日节选12345678910&#123;% reel 滕王阁序 author:王勃 date:重九日 footer:节选 %&#125;时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。&#123;% endreel %&#125; 可选参数1234title: # 标题author: # 作者date: # 日期footer: # 页脚信息 图文表现emoji 表情emoji 表情：如下分别对应的表情为 表情速查表：Stellar内嵌blobcat小表情 1234&#123;% emoji 爱你 %&#125;&#123;% emoji blobcat ablobcatrainbow %&#125;&#123;% emoji blobcat ablobcatattentionreverse %&#125;&#123;% emoji tieba 滑稽 %&#125; 需要指定高度： 1&lt;center&gt;&#123;% emoji blobcat ablobcatrainbow height:1em %&#125;&#123;% emoji blobcat ablobcatrainbow height:2em %&#125;&#123;% emoji blobcat ablobcatrainbow height:3em %&#125;&#123;% emoji blobcat ablobcatrainbow height:2em %&#125;&#123;% emoji blobcat ablobcatrainbow height:1em %&#125;&lt;/center&gt; icon 图标标签icons.yml 中的图标：外链图标：指定颜色： 写法如下123icons.yml 中的图标：&#123;% icon solar:planet-bold-duotone %&#125;外链图标：&#123;% icon https://api.iconify.design/solar:link-circle-bold.svg %&#125;指定颜色：&#123;% icon ph:seal-question-fill color:purple %&#125; 配置默认颜色1234tag_plugins: icon: # 留空时，图标和文字颜色相同 default_color: accent # theme, accent, red, orange, yellow, green, cyan, blue, purple image 图片标签image 图片标签 示例写法1&#123;% image src [description] [download:bool/string] [width:px] [padding:px] [bg:hex] %&#125;123456src: 图片地址description: 图片描述download: href # 下载地址，如果下载地址为图片地址，可以设置为 true。如果下载链接与显示的图片地址不同，则可以设置此值width: 200px # 图片宽度padding: 16px # 图片四周填充宽度bg: &#x27;#ffffff&#x27; # 图片区域背景颜色，16进制 来自海南的 aurora. 使用 iPhone 13 拍摄。 1&#123;% image /images/photo/mmexport1689252462939.jpg 来自海南的 aurora. 使用 iPhone 13 拍摄。 download:true %&#125; 如果是小尺寸的图片，请参考 小尺寸图片优化 在任意 image 标签中增加 fancybox:true 参数即可为特定图片开启缩放功能 swiper 轮播容器swiper 轮播容器 默认一张图片是 50% 宽度，通过设置 width:min 设置为 25% 宽度，width:max 设置为 100% 宽度。 注意，一个页面只能设置一次，第一个 swiper 容器的效果全局生效。写法如下： 12345&#123;% swiper effect:cards %&#125;&#123;% image /images/picture/20230711224927.jpg 配置图 width:200px padding:16px fancybox:true %&#125;&#123;% image /images/picture/20230711225321.png 跑分图 fancybox:true %&#125;&#123;% image /images/picture/20230711225337.png 参数图 fancybox:true %&#125;&#123;% endswiper %&#125; 其他audio 音频标签 Your browser does not support the audio tag. 写法参数说明12345&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;&#123;% audio netease:2140626391 %&#125;&#123;% audio type:2 netease:570340213 autoplay:0 %&#125;123type: 2/0 # 歌曲/歌单 # 不设置默认为2歌曲模式netease: xxx # 歌曲/歌单 id ，具体 id 在网易云网页版的网址链接中寻找 autoplay: 1/0 # 自动播放/手动播放 # 不设置默认0手动播放 link 链接卡片link 链接卡片 效果演示语法格式https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/ https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/123&#123;% link href [title] [icon:src] [desc:true/false] %&#125;&#123;% link https://xaoxuu.com/blog/20221029/ %&#125; 参数含义： 1234href: 链接title: 可选，手动设置标题（为空时会自动抓取页面标题）icon: 可选，手动设置图标（为空时会自动抓取页面图标）desc: 可选，是否显示摘要描述，为true时将会显示页面描述 静态时间线静态时间线 2021 年 2 月 16 日主要部分功能已经开发的差不多了。2021 年 2 月 11 日今天除夕，也是生日，一个人在外地过年+过生日，熬夜开发新主题，尽量在假期结束前放出公测版。 1234567&#123;% timeline %&#125;&lt;!-- node 2021 年 2 月 16 日 --&gt;主要部分功能已经开发的差不多了。&#123;% image /images/photo/20230710192616.jpg width:300px %&#125;&lt;!-- node 2021 年 2 月 11 日 --&gt;今天除夕，也是生日，一个人在外地过年+过生日，熬夜开发新主题，尽量在假期结束前放出公测版。&#123;% endtimeline %&#125; okr 目标管理okr 目标管理 O1 2024年的小目标：完成 Volantis 6.0 并发布上线 来自2025年的复盘：已《基本》实现目标 正常 44% KR1 重构 tag-plugins 和 wiki 系统 当 KR 进度为 100% 时，标签默认显示为 已完成当 KR 未设置进度时，默认为 0%当 O 未设置进度时，则显示所有 KR 进度平均值 已完成 100% KR2 完成主要页面设计稿 小提示1小提示2您可以在 _config.yml 文件中修改标签的颜色和文案您可以在 _config.yml 文件中增加任意的标签配置 延期 90% KR3 完成前置准备工作（如果你知道答案，请在留言区帮帮我！🥹） 在咸水和海滩之间找一亩地求出圆周率后15位找出宇宙的终极逻辑去地狱里走两步 未完成 -12% KR-4 开发、测试和发布 支持嵌套插入图片等其它简单组件 风险 0% 写法如下123456789101112131415161718192021222324252627282930313233&#123;% okr o1 %&#125;2024年的小目标：完成 Volantis 6.0 并发布上线来自2025年的复盘：已《基本》实现目标 &#123;% emoji tieba 滑稽 %&#125;&lt;!-- okr kr1 percent:1 --&gt;重构 tag-plugins 和 wiki 系统- 当 &#123;% mark KR %&#125; 进度为 100% 时，标签默认显示为 &#123;% mark color:green 已完成 %&#125;- 当 &#123;% mark KR %&#125; 未设置进度时，默认为 &#123;% mark 0% %&#125;- 当 &#123;% mark O %&#125; 未设置进度时，则显示所有 &#123;% mark KR %&#125; 进度平均值&lt;!-- okr kr2 percent:0.9 status:off_track --&gt;完成主要页面设计稿&#123;% tabs align:left %&#125;&lt;!-- tab 小提示1 --&gt;您可以在 _config.yml 文件中修改标签的颜色和文案&lt;!-- tab 小提示2 --&gt;您可以在 _config.yml 文件中增加任意的标签配置&#123;% endtabs %&#125;&lt;!-- okr kr3 percent:-0.12 status:unfinished --&gt;完成前置准备工作（如果你知道答案，请在留言区帮帮我！🥹）&#123;% checkbox 在咸水和海滩之间找一亩地 %&#125;&#123;% checkbox 求出圆周率后15位 %&#125;&#123;% checkbox 找出宇宙的终极逻辑 %&#125;&#123;% checkbox 去地狱里走两步 %&#125;&lt;!-- okr kr-4 status:at_risk --&gt;开发、测试和发布&#123;% image /images/footer/qq32.svg 支持嵌套插入图片等其它简单组件 %&#125;&#123;% endokr %&#125; 善用容器123&#123;% box [title] [color:color] [child:codeblock/tabs] %&#125;...&#123;% endbox %&#125; box 盒子容器box 普通块容器：带标题，但是没有折叠项 Stellar v1.12.0因为原 noteblock 标签在升级到 hexo 6.0 之后跟官方库冲突了，官方一直没有解释原因，后不得不改名：noteblock -&gt; grid -&gt; border -&gt; ablock详情见：#172 1234567&#123;% box Stellar v1.12.0 color:warning %&#125;因为原 noteblock 标签在升级到 hexo 6.0 之后跟官方库冲突了，官方一直没有解释原因，后不得不改名：noteblock -&gt; grid -&gt; border -&gt; ablock详情见：[#172](https://github.com/volantis-x/hexo-theme-volantis/issues/712)&#123;% endbox %&#125; 彩色代码块彩色代码块：设置 child:codeblock 并设置 color:颜色枚举 可以实现 10 种不同颜色的代码块，彩色代码块一般可以用在代码正确与错误的示范对比场景。 推荐的写法123func test() &#123; // ...&#125; 不推荐的写法123func test() -&gt; () &#123; // ...&#125; 示例代码： 1234567&#123;% box color:red child:codeblock %&#125;```swiftfunc test() -&gt; () &#123; // ...&#125;```&#123;% endbox %&#125; 上文并排比较的代码示例： 1234567891011121314151617181920&#123;% grid %&#125;&lt;!-- cell --&gt;推荐的写法&#123;% box color:green child:codeblock %&#125;```swiftfunc test() &#123; // ...&#125;```&#123;% endbox %&#125;&lt;!-- cell --&gt;不推荐的写法&#123;% box color:red child:codeblock %&#125;```swiftfunc test() -&gt; () &#123; // ...&#125;```&#123;% endbox %&#125;&#123;% endgrid %&#125; 嵌套标签嵌套标签 图文混排示例代码个人电脑作为办公设备时，我们该如何保护隐私？公司一般都会强制安装安防软件，这些软件要求开机自启动，要求有屏幕录制权限、完全的磁盘访问权限包括相册图库。因此如果使用自己的 MacBook 作为办公设备，必须要把生活区和工作区完全独立开，安装在两个磁盘分区，并且对磁盘分区进行加密。1234567891011121314&#123;% box child:tabs %&#125;&#123;% tabs %&#125;&lt;!-- tab 图文混排 --&gt;&#123;% image /images/cover/xxx.6cyjbogyo1c0.webp 个人电脑作为办公设备时，我们该如何保护隐私？ download:true %&#125;公司一般都会强制安装安防软件，这些软件要求开机自启动，要求有屏幕录制权限、完全的磁盘访问权限包括相册图库。因此如果使用自己的 MacBook 作为办公设备，必须要把生活区和工作区完全独立开，安装在两个磁盘分区，并且对磁盘分区进行加密。&lt;!-- tab 示例代码 --&gt;```yaml# 这里可以放代码块```&#123;% endtabs %&#125;&#123;% endbox %&#125; 不想要切换功能的话，把 tab 标签相关的去掉就好 folding 折叠容器folding 折叠容器 示例写法123&#123;% folding title [codeblock:bool] [open:bool] [color:color] %&#125;content&#123;% endfolding %&#125;123codeblock: true/falseopen: true/falsecolor: red/orange/yellow/green/cyan/blue/purple/light/dark 彩色可折叠容器 默认打开的代码折叠框123func test() &#123; print(&quot;hello world&quot;)&#125; 代码如下： 123&#123;% folding child:codeblock open:true color:yellow 默认打开的代码折叠框 %&#125;代码块&#123;% endfolding %&#125; 默认打开的折叠框请不要打开这个 代码如下： 12345&#123;% folding child:tabs open:true color:blue 默认打开的折叠框 %&#125;请不要打开这个&#123;% endfolding %&#125; folders 多个折叠容器聚合folders 多个折叠容器聚合 题目1这是答案1题目2这是答案2题目3这是答案3 示例代码： 123456789101112&#123;% folders %&#125;&lt;!-- folder 题目1 --&gt;这是答案1&lt;!-- folder 题目2 --&gt;这是答案2&lt;!-- folder 题目3 --&gt;这是答案3&#123;% endfolders %&#125; tabs 分栏容器tabs 分栏容器 图片代码块表格12let x = 123print(&quot;hello world&quot;) a b c a1 b1 c1 a2 b2 c2 1234567891011121314151617181920&#123;% tabs active:2 align:center %&#125;&lt;!-- tab 图片 --&gt;&#123;% image /images/cover/xxx.6cyjbogyo1c0.webp width:300px %&#125;&lt;!-- tab 代码块 --&gt;```swiftlet x = 123print(&quot;hello world&quot;)```&lt;!-- tab 表格 --&gt;| a | b | c || ---- | ---- | ---- || a1 | b1 | c1 || a2 | b2 | c2 |&#123;% endtabs %&#125; 使用 align:center 可以让内容居中 设置默认展示的标签方式为 active:1 grid 网格分区容器 Unsplash PhotoThe Galactic Center is the rotational center of the Milky Way galaxy. Its central massive object is a supermassive black hole of about 4 million solar masses, which is called Sagittarius A*. Its mass is equal to four million suns. The center is located 25,800 light years away from Earth.Ōwhiro Bay, Wellington, New ZealandPublished on May 31, 2022SONY, ILCE-6000Free to use under the Unsplash License bg 为可选参数，默认没有背景，可设置为 box/card 两种样式，分别为普通块/卡片样式。更多用法：grid 网格分区容器 示例代码1234567891011121314151617&#123;% grid %&#125;&lt;!-- cell --&gt;&#123;% image /images/picture/luca-calderone-bcql6CtuNv0-unsplash.jpg download:https://unsplash.com/photos/bcql6CtuNv0/download?ixid=MnwxMjA3fDB8MXx0b3BpY3x8NnNNVmpUTFNrZVF8fHx8fDJ8fDE2Njg4NDAxMDI&amp;force=true %&#125;&lt;!-- cell --&gt;**[Unsplash Photo](https://unsplash.com/photos/bcql6CtuNv0)**The Galactic Center is the rotational center of the Milky Way galaxy. Its central massive object is a supermassive black hole of about 4 million solar masses, which is called Sagittarius A*. Its mass is equal to four million suns. The center is located 25,800 light years away from Earth.&gt; Ōwhiro Bay, Wellington, New Zealand&gt; Published on May 31, 2022&gt; SONY, ILCE-6000&gt; Free to use under the Unsplash License&#123;% endgrid %&#125; 社交friends 友链friends 友链 blog/source/_data/links/blog.yml12345- title: XAOXUU url: https://xaoxuu.com/ cover: https://bu.dusays.com/2022/10/23/63542895cfd29.png icon: https://bu.dusays.com/2021/09/24/2f74810ceb3d3.png description: XAOXUU 目前是一个 iOS 开发者，代表作品有：ProHUD、ValueX 等。在业余时间也开发了 Stellar 博客主题，更多的作品可以去项目主页查看，希望大家喜欢～ 在需要用到的地方： 1&#123;% friends blog %&#125; sites 网站卡片sites 网站卡片 blog/source/_data/links/study.yml12345- title: 阮一峰的个人网站 url: https://ruanyifeng.com/ cover: icon: https://ruanyifeng.com/favicon.ico description: 写一点读书笔记 在需要用到的地方（同友链）： 1&#123;% sites study %&#125; 渲染外部 markdown 文件md 渲染外部 markdown 文件 123&#123;% folding %&#125;&#123;% md https://raw.github.xaox.cc/xaoxuu/hexo-theme-stellar/main/README.md %&#125;&#123;% endfolding %&#125; ghcard 卡片ghcard 卡片 写法如下12&#123;% ghcard xaoxuu %&#125;&#123;% ghcard xaoxuu/hexo-theme-stellar theme:dark %&#125; banner 横幅容器banner 横幅容器 用于独立页面顶部 随记收藏 随记 写法如下123&#123;% banner 随记 bg:https://xaoxuu.com/assets/banner/notes.jpg %&#125;&#123;% navbar active:/more/ [随记](/more/) [收藏](/more) %&#125;&#123;% endbanner %&#125; 用于用户个人资料页 某某这是个人简介 写法如下12&#123;% banner 某某 这是个人简介 avatar:https://xaoxuu.com/assets/xaoxuu/avatar/rect-256@2x.png bg:https://xaoxuu.com/assets/banner/nebula.jpg %&#125;&#123;% endbanner %&#125; 用作文章摘要卡片博客进阶：自动化部署本文讲了如何利用脚本和 GitHub Actions 简化博客搭建和部署流程，提高效率。 12&#123;% banner 博客进阶：自动化部署 本文讲了如何利用脚本和 GitHub Actions 简化博客搭建和部署流程，提高效率。 bg:https://xaoxuu.com/assets/xaoxuu/blog/2022-1126a@2x.jpg link:/2023/07/16/base/写作姿势/ %&#125;&#123;% endbanner %&#125; 注意以上介绍的都是来自 Stellar 主题的标签插件，hexo 官方标签参考：https://hexo.io/zh-cn/docs/tag-plugins Stellar更新日志 写作规范 专有名词前后都要带空格，在特殊标签内使用除外；链接通常也建议前后带空格 图片目录：blog&#x2F;source&#x2F;imagescover：封面photo：照片，分享之类picture：截图类暂定：只有技术类图片上传OSS，其他图片使用本地存储 书写完毕后，通读一下博客，检查通顺，语义是否清楚 在标题上方或者下方使用分割线，具体视情况而定 写作思路 无论想到什么，先用手机写到备忘录里，当做随想，然后用电脑写作，将随想连贯起来，通读一遍，接着再用主题来美化，插入图片。有些时候会有很深刻的感慨，而让人害怕的就是感慨之后冲动之余却提笔忘字。通过文字和照片抵抗遗忘，当下的记录是为了增援未来的自己 不强迫自己写作，不定目标，一切只是为了分享记录。微信和QQ不适合发的，在这里都能尽情呈现","tags":["博客折腾","常用"],"categories":["Hello World"]},{"title":"常用软件","path":"/2023/07/11/base/常用软件/","content":"Google Baidu 起由这一切要从我的笔记本电脑-联想小新15坏了开始说起，屏幕开始出现数次的黑屏，每次只能强制重启，且重启后十几分钟内会再度黑屏。。无奈，换机 关于这次故障的事，网上也有爆料，无力吐槽 https://zhuanlan.zhihu.com/p/610874343?utm_id=0https://zhuanlan.zhihu.com/p/610874343?utm_id=0 过程刷了几天的咸鱼，真就咬咬牙上了台式机，还从卖家那拿了点其他东西，共计花了6600（朋友们都说买贵了😰），然后还有点其他的费用：请了半天的假去看电脑，把电脑搬回来打车也用了140 记录借着这次的机会，我将自己常用的一些软件整理了出来，以及一些配置步骤。想的是，以后上手新电脑的时候能最快的把电脑调成自己熟悉的样子，当然，很基础的操作就略过了。没有放出链接的，就是一搜就能搜到的东西，尽量找官网即可 日常 首先，自然就是安装软件，这里是日常会用到的： 谷歌浏览器：https://www.google.cn/chrome/index.html 浏览器插件，我整理了自己常用的链接：https://pan.baidu.com/s/1JV5Gq4_ynkp8jhHlOlnKNQ?pwd=c8zp提取码：c8zp CSDN&#x2F;知乎&#x2F;脚本之家&#x2F;博客园&#x2F;掘金免登录，去弹窗：https://github.com/027xiguapi/code-box firefox uTools 插件，装了密码管理器、本地搜索、OCR文字识别 Fences5：https://www.kexn.cn/28479.html EarTrumpet（音量合成器，win11自带） BandZip：http://www.bandisoft.com/ 专业版：https://www.423down.com/9735.html 火绒 Dism++（电脑优化）：https://github.com/Chuyu-Team/Dism-Multi-language/releases/tag/v10.1.1002.2 QQ 微信 PowerToys：https://github.com/microsoft/PowerToys/releases Clash for Windows：https://github.com/Fndroid/clash_for_windows_pkg/releases 汉化：https://github.com/BoyceLig/Clash_Chinese_Patch/releases Typora：2024-08-25：https://chumenx.com/typora.html picgo：https://github.com/Molunerfinn/picgo/releases ，图片上传云端（非必须） 配置一下阿里云OSS即可 可安装 super-prefix 插件（需要 NodeJs 环境）。安装之后还需配置一下，配置直接用它的提示配置即可，这样上传文件时会用日期来创建文件目录（YYYY&#x2F;MM&#x2F;DD&#x2F;），并用时间来重命名文件（YYYYMMDDHHmmss） Typora Plugin：https://github.com/obgnail/typora_plugin 下载插件源码的压缩包，并将其解压，粘贴进根目录下的 resource文件夹 打开 resource 文件夹下的 window.html 文件，搜索文件内容 1&lt;script src=&quot;./appsrc/window/frame.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt; 在其后加入 1&lt;script src=&quot;./appsrc/window/frame.js&quot; defer=&quot;defer&quot;&gt;&lt;/script&gt; 用户配置——进入 resources\\plugin\\global\\settings ，粘贴以下内容进 settings.user.toml 1234567891011############### test ###############[test]ENABLE = false[auto_number]# 禁用自动编号ENABLE = false[window_tab]# ctrl+w直接关闭TyporaWHEN_CLOSE_LAST_TAB = &quot;exit&quot; Typora Theme：https://theme.typora.io/ Sneh、LCARS、dyzj、Cobalt、Chocolate Box 安装教程：https://theme.typora.io/doc/Install-Theme/ 百度网盘 夸克网盘 阿里云盘 飞书 notepad++（可找其他替代）：https://notepad-plus.it.softonic.com/ 或 https://notepad-plus-plus.org/ 安装插件 jstool QQ音乐 网易云音乐 PDFgear：https://www.pdfgear.com/ Snipaste：https://www.snipaste.com/download.html TranslucentTB（任务栏透明工具）：https://github.com/TranslucentTB/TranslucentTB Telegram：https://desktop.telegram.org/ Steam UU加速器 PotPlayer：http://potplayer.tv/ VeryCapture（长截图）：https://verycapture.com/cn/index.html 向日葵 有道词典 语雀 坚果云 Joplin：https://joplinapp.org/ Xmind：https://www.wuhenge.com/23104.html drawio：https://github.com/jgraph/drawio-desktop/releases 雷电模拟器：想用最新的上官网即可，这里挂一份纯净版的：https://www.52pojie.cn/thread-1796969-1-1.html 迅雷（精简版）：https://www.52pojie.cn/thread-969313-1-1.html 小米电脑管家：https://www.bilibili.com/video/BV17F4m137ng/ 破解补丁：https://www.coolapk.com/feed/42297337 IDM：官网下载即可 激活：https://t.me/geekshare/2617 12345678910111213141516171819# Enable TLSv1.2 for compatibility with older clients[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [System.Net.SecurityProtocolType]::Tls12$DownloadURL = &#x27;https://raw.githubusercontent.com/lstprjct/IDM-Activation-Script/main/IAS_0.8.cmd&#x27;$FilePath = &quot;$env:TEMP\\IAS.cmd&quot;try &#123;Invoke-WebRequest -Uri $DownloadURL -UseBasicParsing -OutFile $FilePath&#125; catch &#123;Write-Error $_Return&#125;if (Test-Path $FilePath) &#123;Start-Process $FilePath -Wait$item = Get-Item -LiteralPath $FilePath$item.Delete()&#125; 1️⃣复制上方代码到 PowerShell 并运行，然后在弹窗输入 1 2️⃣输入自定义用户名再按回车，激活完毕输入 6 退出 3️⃣激活之后可以在 IDM 查看激活信息，支持检测更新 折腾完这些后，还要记得改下它们的设置，尤其是指定它们的文件保存目录，接下来进入工作学习方面的软件 工作学习 json 可视化网站：https://www.jsont.run/ nvm：https://github.com/coreybutler/nvm-windows/releases jdk：www.java.com 其他版本：https://www.oracle.com/java/technologies/ 安装 jdk1.8 时，无需安装最后的 jre CLASSPATH 变量并不需要配置 安装多个 jdk 版本并快速切换（有弊端，有时环境变量不会生效，需要重启电脑，但其实不重启而改用管理员cmd去查看java -version，你会发现环境变量也已生效。很奇怪，网上搜索无果，只能当作windows的bug看待了）：https://blog.csdn.net/HeyVIrBbox/article/details/125635535 Git：https://git-scm.com/download/win 环境变量会自动配置 配置用户名和邮箱 12345#配置用户名git config --global user.name &quot;hwl&quot;#配置邮箱git config --global user.email 2930811148@qq.com SSH 公钥登录：打开 git 窗口执行 ssh-keygen 命令，然后一路回车到命令执行完毕。执行完命令后电脑用户目录下会生成两个文件，公钥位于 id_rsa.pub 文件中(另一个文件则是私钥) 进入电脑用户目录，创建 .gitignore 文件，参考 https://blog.csdn.net/a15512138486/article/details/115672292 ，注意文件命名，然后执行如下命令 1git config --global core.excludesfile ~/.gitignore 查看git配置 1git config -l 更新git 12git update-git-for-windowsgit -v Git Commit 提交规范：https://blog.csdn.net/u014163312/article/details/129236306 Maven：https://maven.apache.org/download.cgi 新增变量 MAVEN_HOME ，值为 maven 的安装目录；然后在 Path 变量中新增值 %MAVEN_HOME%\\bin 进入 maven 安装目录下的 conf 文件夹，修改 setting.xml，主要是三个地方（需要找到对应的标签位置修改） 本地仓库位置修改 1&lt;localRepository&gt;E:\\apache-maven-3.9.3\\maven-repo&lt;/localRepository&gt; 修改maven默认的JDK版本 123456789101112&lt;profile&gt; &lt;id&gt;JDK-1.8&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.8&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt;&lt;/profile&gt; 删除原有的镜像，添加国内镜像源 123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt; 参考链接：https://blog.csdn.net/weixin_42460596/article/details/109479342 MySQL：https://dev.mysql.com/downloads/installer/ 如果要指定安装目录，第一步要选择 Custom。相关做法：https://blog.csdn.net/Z1366566161664/article/details/129105767 环境变量 path 增加值：E:\\Program Files\\MySQL Server 8.0\\bin Redis（Windows）：https://github.com/MicrosoftArchive/redis/releases 设置密码：修改 redis.windows.conf 下的 requirepass 项，然后创建 redis-server.exe 的快捷方式， 右键快捷方式属性，在目标后面增加 redis.windows.conf。需要手动指定一下 redis 按照修改后的 conf 运行 Another Redis Desktop Manager：https://github.com/qishibo/AnotherRedisDesktopManager/releases WindTerm：https://github.com/kingToolbox/WindTerm/releases Xshell+Xftp：https://www.xshell.com/zh/free-for-home-school/ DevToys：https://devtoys.app/ VS Code HBuilder X JetBrains Toolbox IDEA DataGrip WebStorm PyCharm anaconda（推荐用这种，如果追求轻便则可以用 miniconda）：https://www.anaconda.com/download 安装教程：https://blog.csdn.net/ABV09876543210/article/details/101194476 python：https://www.python.org/downloads/ 安装教程：https://blog.csdn.net/2201_75362610/article/details/129275182 卸载教程：https://www.python100.com/html/W19M1YZI186P.html Beyond Compare：https://www.ghxi.com/beyondcompare.html Navicat Premium：https://www.itqaq.com/index/610.html Apifox VMware：https://www.52pojie.cn/thread-1804571-1-1.html Docker Desktop：https://www.docker.com/products/docker-desktop/ 配置：Settings &#x3D;&#x3D;&#x3D;&gt; Docker Engine 123456789101112131415&#123; &quot;builder&quot;: &#123; &quot;gc&quot;: &#123; &quot;defaultKeepStorage&quot;: &quot;20GB&quot;, &quot;enabled&quot;: true &#125; &#125;, &quot;experimental&quot;: false, &quot;registry-mirrors&quot;: [ &quot;https://docker.m.daocloud.io&quot;, &quot;https://noohub.ru&quot;, &quot;https://huecker.io&quot;, &quot;https://dockerhub.timeweb.cloud&quot; ]&#125; Photoshop：https://baiyunju.cc/8619 Fiddler Everywhere（4.0.1版本） 安装文件使用：https://ztjun.fun/250.html 安装步骤严格按照：https://www.52pojie.cn/thread-1741621-1-1.html 第一步，下载安装后会自动打开，正常登录账号，同意更新（貌似也阻止不了） 第二步，移除已安装的 Fiddler，重新安装，最好先断个网，安装完后仍会自动打开，直接关掉 第三步，替换文件，两个 dll 文件，一个 js 文件 第四步，修改文件，禁止自动更新，重要！到此破解结束~ 经查，截止2023-07-07，网上找到的 Fiddler Everywhere 破解教程貌似还是停留在4.0.1 安装文件我自己也保存了一份：https://www.aliyundrive.com/s/1ZQDWncfnZe 提取码: kb43 JMeter：https://jmeter.apache.org/download_jmeter.cgi VisualVM：https://visualvm.github.io/ 使用指南：https://blog.csdn.net/weixin_43304253/article/details/129651817 实战：https://blog.csdn.net/xiaomin1991222/article/details/84907795 JetBrains 一个重要的网站：jetbra *.exe.vmoptions1234--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED-javaagent:E:\\jetbra\\ja-netfilter.jar=jetbrains IDEADataGripPycharmWebStormGoLand129VRVXKXEQ-eyJsaWNlbnNlSWQiOiIyOVZSVlhLWEVRIiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQ1dNUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNJIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQREIiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjMwOTE0UFNBWDAwMDAwNSIsImhhc2giOiJUUklBTDoxNjQ5MDU4NzE5IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-YKRuMTrLQcfyWisYF1q6RhCN+Ub13VOCayGGc6tklGA97oxRM1HCIR0oI5yfTjL7UQYDbNMokT0U0ZQ2obYaUx+MMf7+3FfUYp5dYzP7G9YrEehrGWQ4O8ENrDLDAClB8o8jud9cafW9WTx9hDNd9j2FfjwSaRibClwGBRdO5fSkWlKGhx4tV0K9IyotNYDQzT1QCDRWSxHYGqfDAQI2k+ZAqzNEHValupSM3TKw813kFGKIQndMfw57B6uMzgN6PvuuLpBlghdO3imrgKYj0Q59JYbuXRUpHhPnNLY1XmewdlfcJkvTiRwueCPMNEW/CQEh8X/Als92WCr2H3uFRA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD16E26WZCE14-eyJsaWNlbnNlSWQiOiI2RTI2V1pDRTE0IiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAxMjAyMzA5MTRQU0FYMDAwMDA1IiwiaGFzaCI6IlRSSUFMOi0yMDE0NjMyMjM1IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-V6xNxshWwoyNJwOrXQ3NAsVSEjxZFKTT+c52asybvhxtTKvMP0ApRwwSrhZYrxlaTeBhd5te25GXofZpBkn3/SbKmkkzFRfO0//m1rpBgeFAClJgeaG6Az2/lcLodHiM3x1amD+MJrAzg0o1rztQWOXJ4DhusfMHvqTbYKOsiUKRGyuFiKoYvgQqnvwAWAP8F8IiqKln/BlTxe9KoKi32HA5nnBhSJ66SZ5GM61t0mzgrkY3wqIe5PpJTOwn2sCo1QWs1YFABcqiCBQhC0w8HDmrdcpWJ91dYOhGim9K6IobE8xud3HGKrRS4Yo0s4p19xKkuDMYHT/rgJXK4T9XLA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD1T7USULHBNF-eyJsaWNlbnNlSWQiOiJUN1VTVUxIQk5GIiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFNJIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIzMDkxNFBTQVgwMDAwMDUiLCJoYXNoIjoiVFJJQUw6NzM4MzY4NjQ0IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-cjtPn2BDgvquYqMu8jD//otufahQs2q1uOxdPwcb0JAeMRa3dIeZ6u8FJd2L3VFU2Qc4187i7SwjPVh5Xx/D0in47mPvPqxp2lPtaBOYaVUKRrudBf+9WC49Ggw9SyKgx2XkGF429ZHD6OSAQnzy6RxlJNc0IHS3p2B9u9aYc5vLkOYEluUBjdctPDbrhWQmuAd/1qMj/LRGZzdOcCHIems7igEjJvaDH9zukxMrTYCtya63uivmRFCqG7frptThq4UI9HhAWfEIkFbJDoneU/6MGRR+4mDL+wEuetnZ1oPgGFkTpQs/OQLjXDKQgqpaD+hu5bmyZhpaaWgrHhR1Ig==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD1MOUGH5FKDV-eyJsaWNlbnNlSWQiOiJNT1VHSDVGS0RWIiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfV0sIm1ldGFkYXRhIjoiMDEyMDIzMDkxNFBTQVgwMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTE5MjAyMDQyODkiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-SyFXaP9+YSd0DAiRk/53HYJfAGdZkg0Ulwux2wvCAxuNocmHatN53wlQch3CYJlI2vPP6iHjxjSN84p+wS8jEfJhJRyP5HZ2SW+e0DwupGhiE3OScoJ2TQ9KlWojf2XwLj6slNkVDmlvYaySi33rUB/S0ReY69KoOIjEye1S7mqaFakRHS3T1/pIbpqIeEnQGSlxhfFWg3zB0WKX10zjeEVGXz5FG/0HBYlxiKqYGoLX/XfpU/bkRQm6o2Kci0UWjh1NthmSnjFWGDMBqeoKHUrqs93R5Cus7wY2rPlFYPcqGloepWAK+3lyv2/XmW6+WQk7LH+3scTY9h0/BUXfVw==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD17GC5726T07-eyJsaWNlbnNlSWQiOiI3R0M1NzI2VDA3IiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFNJIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIzMDkxNFBTQVgwMDAwMDUiLCJoYXNoIjoiVFJJQUw6MTgwNTI0OTc5MyIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-J1Q4R07G0iNZjbMTc0vLPT7NszraBLfLcYiscK+h1wq5EPTDgwgnFyU6Lu3rGFmHLETmcsIyQNbF6yXItJN4ccXgWYxWhezALkQcAnoH7wMOn5WVcKkdPVzN9ZiV9LC+VOJ8GFwh6PwBkxniyF/JIbxFYOLa71Yl0ivU+ASFpqtSKfSajO14O76J8HplVeA9cbhQdCKzZ0QkOfzVoREbgUhr68TkGW+j5wjAcGbcx+TPkQ6FQ81+kF9pfBcp7lTt3dWUzEmtTVjPrPbUYkLCKozfX+22GBZu5s3lh8lbj83lY146ifHf383LWrjwnQTJ9TDtPd7jMSHX5Kbfi71gMQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD GitToolBoxLeetCode Editor ProMyBatisCodeHelperPro (Marketplace)Rainbow BracketsSequenceDiagram CoreRestfulBox1PLX1JMXJ4Y-eyJsaWNlbnNlSWQiOiJQTFgxSk1YSjRZIiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiUEdJVFRPT0xCT1giLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfV0sIm1ldGFkYXRhIjoiMDEyMDIzMDkxNFBTQVgwMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTEyODI5MjQyMCIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-Xv71eN2f7ZJJPtPGDLO4OFl9TE5wJkXcVQsqwsx+6dQeJUOOy4mTTEYB+Z8YDwq29uw4MWV9b/7md8tycEt/MGZNTVn1XhiLv1iOPnVl7r70Zq3td/eEIgBwtWXlgz4SHzt742TgbC4QkNzip8wCTl/4LiO3fS/A068e4YstZeXypCVoY6KFGEx037VkbizfitRHnb6G//myuxVtkcLNP739GxJTaFKUAQhQqRLKx/73yKIYzqlciBU4Mq20Ml2u8Ko8bYgiv8Upg1LZ7C60bb1OlOM3v0IZC1bHf7qo/I3Lr+GvJgvBPgHZseyCqrnx47g0GIy1x6+NfljV2u/5jw==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD1DWQ7BVNE4T-eyJsaWNlbnNlSWQiOiJEV1E3QlZORTRUIiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiUExFUCIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9XSwibWV0YWRhdGEiOiIwMTIwMjMwOTE0UFNBWDAwMDAwNSIsImhhc2giOiJUUklBTDo0OTk2MTQ1ODkiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-Sq/PFWat6NqgnvUuTZlDqM0wU9AbdEvetVlXgPVUXV+hanfH7SzCnuWMb2/MeLhSNnerKILBzD02AYID/QAHx07l5MDrSSbJHNWe+mMUFixhLgj8j7Ct5qIg2/zBEh4qDISmFRRTr0Sfi4jg95kOST1A+sbz14LI4S1tPW8aazoetmYyYZufOcp1DbTPffKK0SwYeJGz6EEvDkc+qC6HzKBVzss7nAwruqVTeo3bU5IlAs+Z2ORyIxT9z5shkK29at7ofYhNTSTRJgVHLPGaARLv3UGGmHhJdbP7jJcUdbcS8WPVHHro6ZrTT06y3IDdg8yu3O89Oar0xoJFZlF3ug==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD14JIS9EREJV-eyJsaWNlbnNlSWQiOiI0SklTOUVSRUpWIiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiUEZBU1RSRVFVRVNUIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUE1ZQkFUSVNIRUxQRVIiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQUkVESVMiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfV0sIm1ldGFkYXRhIjoiMDEyMDIzMDkxNFBTQVgwMDAwMDUiLCJoYXNoIjoiVFJJQUw6MzgwNzc3MjA2IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-JC8MO1K1jzXiHMkadkyCsokgB6ku202PnoY9sT180u9EgED0Vsej5h/1WWY7IFy0ZBlFwVKI4mU5gL4lHjnSUVzzHVhmCWSKPXUjnnj/tYy69P5lOH+1n61z4ZRgCkL4ZPKdC37SanVeNjFJyqm51rBWnz9ztg6XeMFYduzFWNm82LSyZEN/AnA6uEwEV1i2th9qTh7emouM862uSHlAkrFPltZCuYdlK8DAryzc7azQZtW0hl9ITXaXbaJ0nkCLD0wf3NTzyhtKfeQ+wDkrwndAn1g3eExexRvWWzK1/P2LsHJhb1J6GAo/wgSajKCTZcjneE/i8yX6GxH1o3U8gQ==-MIIETDCCAjSgAwIBAgIBDzANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMTAxMDE2MDU0NFoXDTI0MTAxMTE2MDU0NFowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMjEwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/W3uCpU5M2y48rUR/3fFR6y4xj1nOm3rIuGp2brELVGzdgK2BezjnDXpAxVDw5657hBkAUMoyByiDs2MgmVi9IcqdAwpk988/Daaajq9xuU1of59jH9eQ9c3BmsEtdA4boN3VpenYKATwmpKYkJKVc07ZKoXL6kSyZuF7Jq7HoQZcclChbF75QJPGbri3cw9vDk/e46kuzfwpGftvl6+vKibpInO6Dv0ocwImDbOutyZC7E+BwpEm1TJZW4XovMBegHhWC04cJvpH1u98xoR94ichw0jKhdppywARe43rGU96163RckIuFmFDQKZV9SMUrwpQFu4Z2D5yTNqnlLRfAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQU5FZqQ4gnVc+inIeZF+o3ID+VhcEwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBANLG1anEKid4W87vQkqWaQTkRtFKJ2GFtBeMhvLhIyM6Cg3FdQnMZr0qr9mlV0w289pf/+M14J7S7SgsfwxMJvFbw9gZlwHvhBl24N349GuthshGO9P9eKmNPgyTJzTtw6FedXrrHV99nC7spaY84e+DqfHGYOzMJDrg8xHDYLLHk5Q2z5TlrztXMbtLhjPKrc2+ZajFFshgE5eowfkutSYxeX8uA5czFNT1ZxmDwX1KIelbqhh6XkMQFJui8v8Eo396/sN3RAQSfvBd7Syhch2vlaMP4FAB11AlMKO2x/1hoKiHBU3oU3OKRTfoUTfy1uH3T+t03k1Qkr0dqgHLxiv6QU5WrarR9tx/dapqbsSmrYapmJ7S5+ghc4FTWxXJB1cjJRh3X+gwJIHjOVW+5ZVqXTG2s2Jwi2daDt6XYeigxgL2SlQpeL5kvXNCcuSJurJVcRZFYUkzVv85XfDauqGxYqaehPcK2TzmcXOUWPfxQxLJd2TrqSiO+mseqqkNTb3ZDiYS/ZqdQoGYIUwJqXo+EDgqlmuWUhkWwCkyo4rtTZeAj+nP00v3n8JmXtO30Fip+lxpfsVR3tO1hk4Vi2kmVjXyRkW2G7D7WAVt+91ahFoSeRWlKyb4KcvGvwUaa43fWLem2hyI4di2pZdr3fcYJ3xvL5ejL3m14bKsfoOv12D6KYM1JBY-eyJsaWNlbnNlSWQiOiIyRDZLWU0xSkJZIiwibGljZW5zZWVOYW1lIjoiZ3VyZ2xlcyB0dW1ibGVzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IiIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiUFJBSU5CT1dCUkFDS0VUIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX1dLCJtZXRhZGF0YSI6IjAxMjAyMzA5MTRQU0FYMDAwMDA1IiwiaGFzaCI6IlRSSUFMOjEwNDM0OTY4MSIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-L60vKhmgHi5F6U4L6FiYg5s4LnpqnRDacakchM2ZNORtF0q/jai5O0Leir5dnAqjjot24y/3rCqoWVI4K0QF72GLX5esdIDZyxplCqEAu+vY9GeUQC11F1uGM6TNNPYGgQk3bh9DAFhw4eZfkKFB+nOYHqEtolWfdAtQEmSqWPpKYVzH3sK0N3RGZ4HItauzWHlHeKr9HZFnifeczqme1S14DOeSRZKmbcE9QNEXu62ccp5V+mUAmJ9tnaNYvxVQF+kyEvu9FEZaZ7690SLM38NAJOXibQjhs/7LQmt5YDOHwVNDh1FjBff4pep5Q0MOThUeBjJqAAsSw27hC68VKw==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD1H6G8IF1AUP5NHYT-eyJsaWNlbnNlSWQiOiJINkc4SUYxQVVQNU5IWVQiLCJsaWNlbnNlZU5hbWUiOiJtZW5vcmFoIHBhcmFwZXQiLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBTRVFVRU5DRURJQUdSQSIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9XSwibWV0YWRhdGEiOiIwMjIwMjQwNzAyUFNBWDAwMDAwM1giLCJoYXNoIjoiMTIzNDU2NzgvMC05NDA1MTExNzIiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwidHJpYWwiOmZhbHNlLCJhaUFsbG93ZWQiOnRydWV9-MemiK2o1ECVDjsAnM795ponK/LCU6w8O4IJA3/1M7xkvcieOWdzBOqDn748c4iSXDg15GpdqTIitRJcBQAKjTe4MvLEHnWVFt4Vo3SIOvN/1lLuASau7WOYaF+RaNLiXatQM0bm7MXQUFFwotln6KNTW4MFLW+46kaIid+txEhdl4Wj27Cw6bXrNNmBgqHv2WZLVAqfnOFlwyZ9BWccAM2aShoJ/1EL/R3vQAwis7PRDPPwYtuWlBBtJxZX/umLrCNBoA8f5a9A4+LH9CJ2K/TVZ4MFABP7E2FsOs0egCgaNYl2JnGmKIN4b+Xb/kO5kEBB4qe6fSmqMV7ntrHCqiw==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD1QXKFWA4KT1RGOFS-eyJsaWNlbnNlSWQiOiJRWEtGV0E0S1QxUkdPRlMiLCJsaWNlbnNlZU5hbWUiOiJtZW5vcmFoIHBhcmFwZXQiLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBSRVNUS0lUIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX1dLCJtZXRhZGF0YSI6IjAyMjAyNDA3MDJQU0FYMDAwMDA1WCIsImhhc2giOiIxMjM0NTY3OC8wLTE4MjYzMTEwNzQiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwidHJpYWwiOmZhbHNlLCJhaUFsbG93ZWQiOnRydWV9-JqPKeVdH+2PpvCUkC8VbBVg7x1+Cizb873nhKFIjb/ovSj1msVSdmoqWK9XhppgAsOEVIRyWwhe7Osbfj8ZKsEya9CqQaSgZc40/MFquWk6PlaklxW4VCjfkagJeP28vilXrtHLHdmcNKYjWvqXGEz1EmiaT0CxZod/eaU+iyZrUUY8+6e4KPby8QjOgUC5IaOfilWy5i8Q+yjRPrNfhakieIlM+Mw9tY8g9XWMQiZletIwM6xqn3AOih25fvfNvisIS5GT3y70SgECcZHixYpZsd6UZDQqLFV1SO1R2RIk4Q1dQarkns0FJcHZNIB/jlZmtEA5KVl0uK2r+tU2zsQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD IDEA插件Debug Variable ExtractorGit Commit Message HelperGiteeGitToolBoxGsonFormatPlusJrebel and XRebelJRebel mybatisPlus extensionJump to LineLeetCode Editor ProMario Progress BarMaven HelperMyBatisCodeHelperPro (Marketplace Edition)Rainbow BracketsRestfulBox - APISequenceDiagram CoreSequenceDiagram JavaTONGYI LingmaTranslationvo2dtoXcode-Dark ThemeDataGrip插件Nyan Progress BarRainbow BracketsTranslationPycharm插件.ignoreCSV EditorGit Commit Message HelperGitToolBoxIndent RainbowPokemon ProgressRainbow BracketsTranslationWebStorm插件Git Commit Message HelperGitToolBoxRainbow BracketsSonic Progress BarTranslation 热编译插件注册机地址12345678910111213https://jrebel.ltbk.net/http://jrebel-license.jiweichengzhu.com/http://jrebel.kongyouyou.com/http://jrebel.cicoding.cn/# 选择版本下载地址，截至2023-09-08可激活的最后版本停留在2023.2.0https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel/versions# 本地激活参考链接https://blog.csdn.net/m0_74315688/article/details/132801135 吾爱破解 这里是收集的一些来自吾爱的有趣软件（链接与软件可能会存在失效或者不适用） 男同志掌勺神器——下厨房app，来源：https://www.52pojie.cn/thread-1842090-1-1.html Knots 3D v8.3.7打绳结教学工具：https://www.52pojie.cn/thread-1839750-1-1.html 微信视频号视频下载：https://www.52pojie.cn/thread-1843505-1-1.html win10&#x2F;11一键去右键重叠：https://www.52pojie.cn/thread-1848054-1-1.html 微信QQ防撤回软件：https://www.52pojie.cn/thread-1848006-1-1.html 网速测试工具：https://www.52pojie.cn/thread-1856167-1-1.html 微软翻译APP：https://www.52pojie.cn/thread-1897039-1-1.html 其他 Gihosoft TubeGet Pro：中文pj，专注于下载 YouTube 超高清视频的油管视频下载工具，https://www.4fb.cn/soft/pc/1553.html 一个可以将旧手机变成麦克风的APP，把音频信号传入电脑或其他设备，无线、USB、蓝牙皆可：https://wolicheng.com/womic/index.html","tags":["常用"],"categories":["Hello World"]},{"title":"Hexo搭建博客之路","path":"/2023/06/18/base/Hexo搭建博客之路/","content":"Hexo Stellar Gitee 序一些讲在最前面的话。​自己老早就想搭一个自己的博客，从零到一的那种。为此准备了很久很久？各种材料（优秀的博客网站，搭建视频，整理需求…）也一直在整理🤣，试想一下哪个理工男没有过这种浪漫呢，用自己开发的语言写一个自己的操作系统，上面运行着一个自己的虚拟机，奈何我等普通人只能退而求其次，追求一个自己的博客网站就好。 其实也认真想过，前后端全栈完全由自己开发部署，这样的好处自然是高度自由，只要能力够🙃。但随着踏入社会参加工作，这种想法对于一个上班族来说，要付出巨大的代价，我害怕折腾到最后还把自己的那点热情都折进去了。于是乎，我选择了 Hexo ，主题是 Stellar，部署在 Gitee 上，图床则用了阿里云的 OSS 存储，写博客的工具则是 Typora，与之搭配的是 PicGo，它是用来上传图片给我的博客提供一个远程路径的。至于 Typora + PicGo，可以参考 http://www.360doc.com/content/23/0427/11/11604731_1078338038.shtmlhttp://www.360doc.com/content/23/0427/11/11604731_1078338038.shtml 不同的是我用的是软件，他用的是命令行，此外我的软件还装了个 super-prefix 插件，这样上传文件时会用日期来创建目录，用时间来为文件重命名，也方便后续的整理。 我的第一篇博客 开始其实搭建一个博客系统非常简单，当然这里说的是那种用文字记录生活技术的博客，Hexo 已经为我们完成了太多，巨人的肩膀上甚至还支撑着我们的改造计划。 1.安装Node.js首先自然是要安装 Node.js，Hexo官方文档已经很贴心的为我们列出了步骤，再不济的话网上也有各种资料。这里要说一下 Windows 墙裂推荐用 nvm 安装，不用配环境变量后续也能随时切换 Node.js 版本，NVM下载地址 安装 nvm 很简单，安装好后在 nvm 的目录下找到 settings.txt 文件，添加下面两行代码设置淘宝镜像 setting.txt12nvm node_mirror https://npm.taobao.org/mirrors/node/nvm npm_mirror https://npm.taobao.org/mirrors/npm/ 用这种效果也是一样的 setting.txt12node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/ 1.1.开始使用1nvm list available # 显示可以安装的所有node.js的版本 Node.js 各版本查看 安装 LTS 那一栏有值的版本号即可，我选了一个16的，一个14的，安装命令如下： 123456nvm install &lt;version&gt; # 安装node.js的命名 version是版本号 例如：nvm install 8.12.0nvm uninstall &lt;version&gt; # 卸载node.js的命令，卸载指定版本的nodejs，当安装失败时卸载使用nvm ls # 显示所有安装的node.js版本nvm use &lt;version&gt; # 切换到使用指定的nodejs版本nvm uninstall &lt;version&gt; # 删除对应版本 注意：使用 nvm 安装 node 之后，但是如果在终端检测不到 node找到 NVM_SYMLINK 变量并手动创建该值所指向的目录即可（变量值最后的 nodejs 不用创建，该文件夹会由 nvm 来创建，实际上这是一个指向 node 真正安装目录的快捷方式） 1.2.检查一下12node -vnpm -v 2.安装GitGit下载地址 懒得折腾就改下安装目录，一路next就好。环境变量会自动配置，我们需要做的就是配置用户名和邮箱 12345#配置用户名git config --global user.name &quot;hwl&quot;#配置邮箱git config --global user.email 2930811148@qq.com 2.1.配置SSH公钥登录 打开 git 窗口执行 ssh-keygen 命令，然后一路回车到命令执行完毕。执行完命令后电脑用户目录下会生成两个文件，公钥位于 id_rsa.pub 文件中(另一个文件则是私钥) 我用的是 gitee，在个人设置中配置 ssh 公钥，就是将 id_rsa.pub 文件中的全部内容复制到右侧的框中, 并点击确定即可 在本地执行命令，测试一下即可 1ssh -T git@gitee.com 2.2.配置全局忽略文件夹进入电脑用户目录，创建 .gitignore 文件（自己注意文件命名，与下面的命令保持一样即可），文件内容可参考文章，然后在当前目录执行如下命令 1git config --global core.excludesfile ~/.gitignore 再查看当前目录 .gitconfig 配置文件里的内容验证下即可 2.3.Git版本更新这里多记录一下，windows 更新 Git 到最新版本的命令 123git update-git-for-windowsgit -v 3.安装Hexo12npm install -g hexo-clihexo -v 3.1.初始化Hexo进入一个你指定的博客目录，执行初始化命令 1hexo init blog 至于博客的主题我用的是 Stellar，访问GitHub 1234cd blog# 安装主题npm i hexo-theme-stellar 自定义安装12345678910# 自定义版需要一定的动手和学习能力，但通常能够做到更加自主# 1.git 初始化git init# 2.把 Stellar 主题仓库 fork 到您的 GitHub 账号下# 3.把您 fork 的 Stellar 主题仓库添加为博客仓库的子模块，其中 Godlike-long 替换为自己的 GitHub 账号名git submodule add https://github.com/Godlike-long/hexo-theme-stellar.git themes/stellar# 4.测试，往后获取最新的主题更新需先在github仓库上同步，然后在stellar目录下执行命令cd .\\themes\\stellar\\git pull 在 blog/_config.yml 文件中找到并修改（冒号后面带个空格） theme: stellar 运行博客 12345# 生成静态文件hexo g# 启动hexo s 3.2.部署在 Gitee 上创建一个自己的仓库，复制下仓库的 SSH 地址。打开 blog 目录下的 _config.yml 文件，编辑 deploy 模块，内容如下： 1234deploy: type: git repo: git@gitee.com:coclong/coclong.git branch: master 还需要安装一个扩展，这样才可以一键远程部署 1npm install hexo-deployer-git --save 部署 1hexo d 而如果想要看到部署后的页面，则还需要开通 Git Pages 服务：进入 Gitee 上的仓库主页，点击服务选项卡，选择 Gitee Pages，进入的页面中会看到一个网站地址，这个就是未来的访问地址，我们需要勾选强制使用HTTPS，再点击开启/更新（这个功能需要实名认证）。稍等片刻后，使用刚刚看到的网站地址即可看到效果了。 注意：每次修改本地的 Hexo 工程目录之后通过 hexo d 命令即可将更新后的工程部署到 Gitee。但是，这个时候你通过浏览器看到的 Hexo 博客页面并不会更新… 你需要再次执行在 Gitee Pages上的开通/更新按钮。千万不要忘了！！ 3.3.绑定域名日后再说 4.Hexo入门我们先来看一下 blog 的目录结构： 1234567+ blog + public //静态资源文件夹，内容会推送到代码库 + scaffolds //模板文件夹，新建文章时，Hexo会根据模板来建立文件 + source //资源文件夹，Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去 + themes //主题文件夹，Hexo会根据主题来生成静态页面 - _config.yml //网站的配置信息，可以在此配置大部分的参数 - package.json //应用程序的信息和依赖关系 方便起见，我们把网站的语言设置为中文，编辑 blog 目录下的 _config.yml 文件，将 language 这一项设置为 language: zh-CN，将 url 这一项设置为 url: http://yourname.com（你购买的域名，若未购买可以用 http://yourname.gitee.io 代替），其他配置项请根据自己的需要进行设置。 接下来新建一篇文章： 1hexo new [layout] &lt;title&gt; layout 可选值有：draft（草稿）、page（页面）、post（文章），对应模板文件夹中的3个文件，如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数（默认值 post ）代替。若标题包含空格，请使用引号括起来。 现在，我们来新建一篇名为 test 的文章，输入以下命令： 1hexo new test 结果在 source&#x2F;_posts 目录下生成了 test.md 文件，内容如下： 12345---title: testdate: 2023-07-08 21:04:11tags:--- 这里给出 Front-matter 的概念，Front-matter 是文件最上方以 --- 分隔的区域，用于指定文件的变量。 常见参数：title（标题）、date（创建日期）、tags（标签）、categories（分类），只有文章（post）支持标签和分类参数，建议文章分类只写一个，标签可以有多个，写法为 tags: [tag1,tag2,tag3] ，注意每个参数的冒号后面都应该有一个空格，这一点同样体现在 _config.yml 文件中 编辑 test.md 文件，内容如下： 1234567---title: testdate: 2023-07-08 21:04:11tags: [tag1,tag2,tag3]categories: java---文章正文 保存后刷新页面，通常情况下页面会自动更新，若修改没有生效，则需要重新执行以下命令： 12hexo ghexo s 这里再介绍一个命令： 1hexo clean 它的作用是清除缓存文件 (db.json) 和已生成的静态文件 (public) 。在某些情况下（尤其是更换主题后），如果你发现对站点的更改无论如何也不生效，你可能需要运行该命令。 打开网站首页并刷新，你会看到刚才设置的标签和分类生效了 发现首页 Hello World 这篇文章的内容被折叠起来了吗，很简单，只需要在文章正文合适的地方加上下面这行代码就搞定了（上下各要留一个空行）。 1&lt;!--more--&gt; 4.1.总结最后，我们来总结一下发布文章的流程： 第一步，hexo new &lt;title&gt; 生成一篇文章，这里的 title 指文件名，不建议使用中文 第二步，编辑文章，修改 title、tags 等参数，这里的 title 指文章标题，可以使用中文 第三步，hexo s 本地预览效果，不满意继续修改 第四步，hexo g 生成静态文件 第五步，hexo d 将静态文件推送至代码库 第四步和第五步可以合并成一条命令，hexo d -g ，表示部署之前预先生成静态文件。修改配置与发布文章的流程相似，最后都需要执行第三四五步。 https://www.jianshu.com/p/85f455afcfcfhttps://www.jianshu.com/p/85f455afcfcf 至此，博客的搭建就算完成，博客的美化则需要按照 Stellar 主题文档来使用。 迁移Hexo 这里在多记录一个小节，换电脑后迁移 Hexo： 删除原博客项目的 node_modules 文件夹，然后把剩余的文件全部备份 新电脑准备好必需环境后，将备份文件转移到新电脑上 进入项目目录，重新安装依赖 下载 hexo 的 git 工具 下载完以后，就可以在新电脑上正常使用了hexo cleanhexo d接下来就是正常写博客了 不要害怕问题，百度是可以解决初级程序员90%的问题的。 结束写博客是一件需要长期坚持的事情，其实也不是非得搭建一个系统才去写，更多的方式有手机的备忘录，公众号，各类社交平台，专门的博客平台等等。在此之前，我的过去学习之旅中就一直在写笔记，直到投入工作中才停歇下来。时代在发展，除了学生提笔写字的机会都是越来越少，也许有一天，我们连码字都不需要呢~ 最后，我想以这么一段文字结尾，它是我在一个即将关闭的服务器商官网看到的对成立于2009年9月的 Yculer 来说，停止商业化运营是一个艰难但经过慎重考虑后作出的决定。Yculer 成立之初，是一个面向个人博客提供免费主机赞助的项目，资金来源完全是我个人的工资收入。即便在公司实体化商业运营后，Yculer 也从未刻意去追求利润——事实上，做主机托管服务，赚钱也是很难的，强如阿里云，2020年还在烧钱和整体亏损。但利润并不是 Yculer 停止商业化的主要原因，有很多个人博客网站，已经先于 Yculer 消失。举个可能不太恰当的例子，当人们习惯了看几十秒钟的短视频所带来的互动、娱乐，你已经不太可能安静地在网络上看一篇长文，也不会花上一个小时码字写博客，或者和其他的博主交换“友链”……即便你仍是一个人热爱码字的人，写作的场景也应该是在微信公众号了吧？当你不再去写，也不会去读博客的时候，Yculer 和你的博客一样都应该成为“过去时”。另一个原因是，行业变了，硬件和网络的成本越来越低，但技术支持的成本越来越高。服务器的硬件升级了，网络优化了，但对用户的支持做不到以前的快速响应。因此，我选择让 Yculer 回归公益，继续为非赢利的网站提供免费的主机托管服务——但请注意，这将完全是个人行为。因为是免费的，所以大家将来遇到问题需要协助时，请不要苛求我能够立即回复和解决。我会在完成本职工作后，努力保持服务的稳定。Yculer 曾为数以千计的博主提供高质量的主机托管服务，即便今天已经没人写博客了（我自己也不写了），但回顾过去，我仍然觉得做了一件有价值的事情。感谢。来自歪酷人管理员的话 来自广东的 sentry 使用 小米 12 Pro 拍摄。","tags":["博客折腾"],"categories":["Hello World"]},{"path":"/more/index.html","content":"森这世界挺有意思的，没意思的是我，但我会去找有意思的 简介音乐游戏影视海内存知己，天涯若比邻 男，24岁，不抽烟不喝酒不烫头不打架，好玩好运动好色，没房没车没钱。非常独立的一个人 喜欢象棋，玩游戏，跑步，骑单车，打篮球，没有特别喜欢的东西，只是很喜欢那些运动的感觉，但从来不会去保持它们。平时的娱乐活动很少，但很会自娱自乐 看过的动漫都挺喜欢，也喜欢幻想成一个英雄或者独特的人 几乎不挑食，但对水产会有偏见 身体健康，早睡早起，作息偶尔乱一下，锻炼身体有点随缘，喜欢折腾但是怕麻烦的体质。学习方面有的时候够自律，但放纵的时候也是无可救药 大人眼里的我是个问题少年，不光是身上的问题多，平日也喜欢问东问西，让他们最省心是我，最操心的也能是我。生活方面基本没啥追求，啥都能将就，啥都无所谓(ˉ▽ˉ；)… 待人真实，棱角分明，内心充满正义，这是我对自己的要求。最讨厌和虚伪的人打交道，还有睡觉被打扰了，不喜欢别人过很久才回消息。。。喜欢自由，常做的事是模仿别人，最害怕的应该是别人的冷漠 龙文章是我的信仰，喜欢迷龙这样的家伙，老爸是我敬佩的人，喜欢龙猫，偶像是稚晖君 我的初心是——记住每一个记住我的人，对身边的事、物保持一定的好奇 其实以前从不听音乐的，是高一喜欢个女孩子，她带着我听音乐，信息课还会去下载歌。 现在也很少会去刻意地听音乐，也不喜欢长时间听，更喜欢被动地听到音乐，当心烦意燥的时候会去听一些怀旧的歌，听歌主打一个随缘，不喜欢戴耳机英雄联盟、部落冲突、皇室战争、荒野乱斗 玩物丧志，已卸载 现在的娱乐只剩玩蚂蚁庄园，蚂蚁森林，看B站是指给我印象深刻的，完完整整，仔仔细细看过的，或者没来得及看，没看完的。有些一时想不起来，想起来会陆续记录到这里🤣 我的团长我的团 烈日灼心 深海 成龙历险记 中华小子 寻梦环游记 心灵奇旅 环太平洋 星际穿越 白日梦想家 喜剧之王 抓娃娃 龙猫 成长日志 人生的很多事都是在上班的夹缝中完成的，千万不要抑郁地度过那段时间。我就觉着，记录一些关键的时间节点吧~未来指不定会是个什么样 2018 年 6 月 17 日第一次向喜欢的女孩子告白，不过是在QQ上，所以——也是告别。当前的情书，我找到了2018 年 9 月 8 日第一次一个人出远门第一次到长沙第一次坐高铁第一次到南京2019 年 8 月 7 日参加兵检结果：体检不合格2020 年 5 月 17 日拥有自己的第一台电脑——联想小新15 2020款锐龙版2020 年 9 月 25 日第一次面试，见识到未来的工作环境2020 年 11 月 10 日开始我的第一次实习在南京，工作还算轻松，但生活并不愉快。2020 年 11 月 12 日拥有第一辆山地车2021 年 8 月 5 日来到东莞之后，毕业参加的第一份工作2021 年 12 月 1 日中间发生了很多插曲，但是至此工作正式进入正轨2022 年 6 月 13 日换了一部小米12 pro。这台使用长达四年的荣耀play正式宣告退役2023 年 6 月 29 日拥有自己的台式电脑2023 年 10 月 24 日拿到C1驾照2024 年 1 月 11 日跳槽，换工作2024 年 1 月 19 日第一次进KTV2024 年 1 月 21 日笔记本换新——机械师曙光162024 年 4 月 16 日第一次刮胡子(•_•)2024 年 6 月 29 日第一次骑上公路车2024 年 6 月 30 日失落╯︿╰于是购入第一辆公路车，自由的半径开始变大2024 年 8 月 2 日第一次去水上乐园第一次喝醉…2024 年 9 月 3 日第一次听音乐会呀2024 年 9 月 15 日中秋节假期，我的第一次长距离骑行（东莞长安—广州番禺，80公里 中间还有两次轮渡）2024 年 9 月 16 日第一次去动物园（广州动物园）2024 年 9 月 29 日刮彩票第一次中奖咯！2024 年 10 月 5 日第一次去海边（也许是第二次）2024 年 10 月 20 日想看瀑布来着（大岭山森林公园）。中间摔车了😨…幸好只是擦掉点皮2024 年 11 月 24 日我好开心，因为我收获了一个独一无二的评价！2024 年 12 月 8 日第一次爬山（阳台山）2024 年 12 月 22 日第一台运动相机2025 年 1 月 22 日第一次坐商务座（一点小插曲）2025 年 3 月 3 日第一次吃海底捞"},{"title":"钢七连","path":"/wiki/commander/soldiersSortie.html","content":"想要和得到，中间还有两个字，就是要做到 没有功德圆满，没有一步登天"},{"title":"高性能MySQL","path":"/wiki/mysql/index.html","content":"以下讲解如未特殊说明则均基于 InnoDB 存储引擎 什么是索引在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。 能实现快速定位数据的一种存储结构，其设计思想是以空间换时间。 常见索引数据结构和区别 二叉树、红黑树、B树 、B+树 区别：树的高度影响获取数据的性能（每一个树节点都是一次磁盘I&#x2F;O) 二叉树 特点：每个节点最多有两个子节，大在右，小在左，数据随机性情况下树杈越明显。如果数据是按顺序依次进入，树的高度则会很高（极端的情况下就是一个链表结构），此时元素的查找效率就等于链表查询O(n)，数据检索效率将极为低下。 红黑树（平衡二叉树）虽通过自旋平衡，子节点会自动分叉为2个分支，从而减少树的高度，当数据有序插入时比二叉树数据检索性能更佳。但是如果数据量过大，节点个数就越多，树高度也会增高（也就是树的深度越深），会增加磁盘I&#x2F;O次数，影响查询效率。 B树B树的出现可以解决树高度的问题。之所以是B树，而并不是名称中”xxx二叉树”，就是它不再限制一个父节点中只能有两个子节点，而是允许 M 个子节点（M &gt; 2）。不仅如此，B树的一个节点可以存储多个元素，相比较于前面的那些二叉树数据结构又将整体的树高度降低了。 B树的节点可以包含有多个子节点，所以B树是一棵多叉树，它的每一个节点包含的最多子节点数量的称为B树的阶。 查找流程对比解析先从根节点出发，判断7在4和8之间，根据P2存储指针6的节点，判断7大于6，最后指针找到叶子节点，也就找到有匹配7的键值上图是一颗3阶的B树查找“7”这个的元素时的流程。可以发现一颗3阶的B树在查找叶子节点时，由于树高度只有3，所以查找过程最多只需要3次的磁盘I&#x2F;O操作。数据量不大时可能不太真切。但当数据量大时，节点也会随着增多；此时如果还是前面的自平衡二叉树的场景下，由于二叉树只能最多2个叶子节点的约束，也只能纵向的去扩展子节点，树的高度会很高，意味着需要更多的操作磁盘I&#x2F;O次数。而B树则可以通过横向扩展节点从而降低树的高度，所以效率自然要比二叉树效率更高。（直白说就是变矮胖了）看到这，相信你也知道如果B树这么适合，也就没有接下来B+树的什么事了。的确，B树其实已经满足了我们最前面所要满足的条件，减少磁盘I&#x2F;O操作，同时支持按区间查找。但注意，虽然B树支持按区间查找，但并不高效。举个例子，B树能高效的通过等值查询 15 这个值，但不方便查询出一个区间内 3~10 所有数的结果。因为当B树做范围查询时需要使用中序遍历，那么父节点和子节点也就需要不断的来回切换，涉及了多个节点会给磁盘I&#x2F;O带来很多负担。 B+tree索引B+tree 是在B树基础上的一种优化，其更适合做存储索引结构。在 B+tree 中，非叶子节点上仅存储键值，不存储数据；而所有数据记录均存储在叶子节点上，并且数据是按照顺序排列的。此外在 B+tree 中各个数据页之间是通过双向链表连接的。结构图如下： Mysql为什么要选择B+树作为默认索引的数据结构B+tree 结构实现数据索引具有如下优点： 非叶子节点上可以存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树也就会变得更矮更胖。这样一来查找数据进行磁盘I&#x2F;O的次数就会大大减少，数据查询的效率也会更快。 所有数据记录都有序存储在叶子节点上，就会使得范围查找，排序查找，分组查找以及去重查找变得异常简单。 数据页之间、数据记录之间都是通过链表链接的，有了这个结构的支持就可以方便的在数据查询后进行升序或者降序操作。 索引的分类在 MySQL 中索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。常见的索引分类如下： 按「数据结构」分类：B+tree索引、Hash索引、Full-text索引 按「物理存储」分类：聚集索引（聚簇索引）、非聚集索引（非聚簇索引&#x2F;二级索引&#x2F;辅助索引） 按「字段特性」分类：主键索引(PRIMARY KEY)、唯一索引(UNIQUE)、普通索引(INDEX)、全文索引(FULLTEXT) 按「字段个数」分类：单列索引、联合索引（也叫复合索引&#x2F;组合索引） Hash索引哈希索引（hash index）基于哈希表实现。哈希索引通过 Hash 算法将数据库的索引列数据转换成定长的哈希码作为 key，将这条数据的行的地址作为 value 一并存入 Hash 表的对应位置。 在 MySQL 中，只有 Memeory 引擎显式的支持哈希索引，这也是 Memory 引擎表的默认索引结构，Memeory 同时也支持 B-Tree 索引。并且，Memory 引擎支持非唯一哈希索引，如果多个列的哈希值相同（或者发生了 Hash 碰撞），索引会在对应 Hash 键下以链表形式存储多个记录地址。 哈希索引的特点： 哈希索引不支持部分索引列的匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。例如，在数据列（A，B）上建立哈希索引，如果查询只有数据列A，则无法使用该索引。 哈希索引具有哈希表的特性，因此只有精确匹配所有列的查询对于哈希索引才有效，比如 =、&lt;&gt;、IN (因为数据的存储是无序的)，且无法使用任何范围查询。 因为数据的存储是无序的，哈希索引还无法用于排序。 对于精确查询，则哈希索引效率很高，时间复杂度为O(1)，除非有很多哈希冲突（不同的索引列有相同的哈希值），如果发生哈希冲突，则存储引擎必须遍历链表中的所有数据指针，逐行比较，直到找到所有符合条件的行。哈希冲突越多，代价就越大！ 索引覆盖索引覆盖（Index Covering）是指通过在索引中包含查询语句中所需的列，可以避免对表中的数据进行额外的访问，从而提高查询效率。(避免了回表操作) 例如，对于一个查询语句1SELECT col1, col2, col3 FROM table WHERE col1 = x AND col2 = y如果在 table 表中建立了一个索引，包含 col1、col2 和 col3 三列，那么 MySQL 可以通过索引定位到符合条件的数据，并在索引中提取 col1、col2 和 col3 列的值，无需对表中的数据进行额外的访问。这种方式就叫做索引覆盖。 索引覆盖能够显著提高查询效率，因此在建立索引时应尽量考虑包含查询语句中所需的所有列。 索引下推索引下推（INDEX CONDITION PUSHDOWN，简称 ICP）是在 MySQL 5.6 针对扫描二级索引的一项优化改进。总的来说是通过把索引过滤条件下推到存储引擎，来减少 MySQL 存储引擎访问基表的次数以及 MySQL 服务层访问存储引擎的次数。ICP 适用于 MYISAM 和 INNODB，本篇的内容只基于 INNODB。 索引下推的使用条件 ICP 目标是减少全行记录读取，从而减少 IO 操作，只能用于非聚簇索引。聚簇索引本身包含的表数据，也就不存在下推一说 只能用于 range、 ref、 eq_ref、ref_or_null 访问方法 where 条件中是用 and 而非 or 的时候 ICP 适用于分区表 ICP 不支持基于虚拟列上建立的索引，比如说函数索引 ICP 不支持引用子查询作为条件 ICP 不支持存储函数作为条件，因为存储引擎无法调用存储函数 查看索引下推123456# 查看索引下推是否开启select @@optimizer_switch# 开启索引下推set optimizer_switch=&quot;index_condition_pushdown=on&quot;;# 关闭索引下推set optimizer_switch=&quot;index_condition_pushdown=off&quot;; 索引合并索引合并密码nfyq（index merge）是从 MySQL5.1 开始引入的索引优化机制，在之前的 MySQL 版本中，一条 sql 多个查询条件只能使用一个索引，但是引入了索引合并机制之后，MySQL 在某些特殊的情况下会扫描多个索引，然后将扫描结果进行合并 结果合并分为下面三种情况： 取交集（intersect） 取并集（union） 排序后取并集（sort-union） 举一个例子，在表中为 name 和 age 各自分别创建一个二级索引 idx_name 和 idx_age 取交集查看下面 sql 执行计划 1explain select * from `user` where name = &#x27;赵六&#x27; and age= 22; type 是 index_merge，并且 possible_key 和 key 都是 idx_name 和 idx_age，说明使用了索引合并，并且 Extra 有 Using intersect(idx_age,idx_name)，intersect 就是交集的意思。 整个过程大致是这样的，分别根据 idx_name 和 idx_age 取出对应的主键id，之后将主键id取交集，那么这部分交集的id一定同时满足查询 name &#x3D; ‘赵六’ and age&#x3D; 22 的查询条件，之后再根据交集的id回表 不过要想使用取交集的联合索引，需要满足各自索引查出来的主键id是排好序的，这是为了方便可以快速的取交集 比如下面这条 sql 就无法使用联合索引 1explain select * from `user` where name = &#x27;赵六&#x27; and age &gt; 22; type 是 ref，key 是 idx_name 只能用 name 这个索引，因为 age &gt; 22 查出来的id是无序的 取并集取并集就是将前面例子中的 and 换成 or（所以用 or 不一定会导致索引失效） 1select * from `user` where name = &#x27;赵六&#x27; or age = 22; 前面执行的情况都一样，根据条件到各自的索引上去查，之后对查询的id取并集去重，之后再回表 同样地，取并集也要求各自索引查出来的主键id是排好序的，如果查询条件换成 age &gt; 22 时就无法使用取并集的索引合并 排序后取并集虽然取并集要求各自索引查出来的主键id是排好序的，但是如果遇到没排好序的情况，mysql 会自动对这种情况进行优化，会先对主键id排序，然后再取并集，这种情况就叫 排序后取并集（sort-union）。 比如上面提到的无法直接取并集的 sql 就符合排序后取并集（sort-union）这种情况 1select * from `user` where name = &#x27;赵六&#x27; or age &gt; 22; 会导致索引失效的一些情况 使用 like 并且是左边带 %， 右边可以会走索引（但是并不绝对） 隐式类型转换，索引字段与条件或关联字段的类型不一致。（比如字段是 int，用字符串方式去查询会导致索引失效） 在 where 条件里面对索引列计算或者使用函数。 使用 OR 且存在非索引列 在 where 条件中两列做比较会导致索引失效 使用 IN 可能不会走索引（MySQL 环境变量 eq_range_index_dive_limit 的值对 IN 语法有很大影响，该参数表示使用索引情况下 IN 中参数的最大数量。MySQL 5.7.3 以及之前的版本中，eq_range_index_dive_limit 的默认值为 10，之后的版本默认值为 200。我们拿 MySQL8.0.19 举例，eq_range_index_dive_limit&#x3D;200 表示当 IN (...) 中的值 &gt;200 个时，该查询一定不会走索引。&lt;&#x3D;200 则可能用到索引。） 使用非主键范围条件查询时，部分情况索引失效。 使用 order by 可能会导致索引失效 is null is not null ≠ 可能会导致索引失效 通过索引排序的内部流程首先 mysql 会为每一个线程都分配一个固定大小的 sort buffer 用于排序。它是一个具有逻辑概念的内存区域，我们可以通过 sort_buffer_size 参数来控制，默认值是 256kb。 12// 输入查看最，小可以设置为 32K，最大可以设置为 4G。show variables like &#x27;sort_buffer_size&#x27;; 由于 sort buffer 大小是固定的，但是待排序的数据量不是，所以根据它们之间的一个差值分为了内部排序和外部排序 当待排序的数据量小于等于 sort buffer 时，那 sort buffer 就能够容纳，MySQL 就可以直接在内存里面排序，内部排序使用的排序算法是快排 当待排序的数据量大于 sort buffer 时，那 sort buffer 就会不够用。这个时候 MySQL 就得要借助外部文件来进行排序了。将待排序数据拆成多个小文件，对各个小文件进行排序，最后再汇总成一个有序的文件，外部排序使用的算法是归并排序 row_id排序在 MySQL 中专门控制用户排序的行数据长度参数 max_length_for_sort_data，默认是 4096，也就是说如果超过了这个长度 MySQL 就会自动升级成 row_id 算法。 12// 默认max_length_for_sort_data的大小为4096字节show variables like &#x27;max_length_for_sort_data&#x27;; row_id 排序的思想就是把不需要的数据不放到 sort_buffer 中，让 sort_buffer 中只存放需要排序的字段。 我们前面说到了 sort buffer，在 sort buffer 里面进行排序的数据是我们 select 的全部字段，所以当我们查询的字段越多，那么 sort buffer 能容纳的数据量也就越小。而通过 row_id 排序就只会存放 row_id 字段和排序相关的字段。其余的字段等排序完成之后通过主键ID进行回表拿。 InnoDB和MyISAM的区别InnoDB 和 MyISAM 都是使用的B+树实现的，但是 InnoDB 使用的是聚簇索引而 MyISAM 使用的是非聚簇索引，聚簇索引根据主键创建一颗B+树，叶子节点则存放的是数据行记录，也可以把叶子结点称为数据页。通俗点来说就是把数据和索引存在同一个块，找到了索引也就找到了数据。 因为叶子结点将索引和数据放在一起，就决定了聚簇索引的唯一性，一张表里面只能有一个聚簇索引。 InnoDB 引擎默认将主键设置为聚簇索引，但如果没有设置主键，那么 InnoDB 将会选择非空的唯一索引作为代替，如果没有这样的索引，InnoDB 将会定一个隐式主键（隐藏行）作为聚簇索引。 因为聚簇索引特殊的物理结构所决定，叶子结点将索引和数据存放在一起，在获取数据的速度上是比非聚簇索引快的。 聚簇索引数据的存储是有序的，在进行排序查找和范围查找的速度也是非常快的。 也正因为有序性，在数据插入时按照主键的顺序插入是最快的，否则就会出现页分裂等问题，严重影响性能。对于 InnoDB 我们一般采用自增作为主键ID。 主键最好不要进行更新，修改主键的代价非常大，为了保持有序性会导致更新的行移动，通常设置为主键不可更新。 聚簇索引的缺点是，对数据进行修改或删除操作时需要更新索引树，会增加系统的开销。 而非聚簇索引是将索引和数据分开存储，那么在访问数据的时候就需要至少2次查找。InnoDB 是先查找辅助索引树，再查找聚簇索引树（这个过程也叫回表）。而 MyISAM 的主键索引叶子结点的存储的部分还是有所区别。InnoDB 中存储的是索引和主键ID，但是 MyISAM 中存储的是索引和数据行的地址，只要定位就可以获取到。 在物理存储上： InnoDB 的数据文件分为 .frm 和 .idb 两种，分别存储的是 表结构 和 表索引+数据 MyISAM 的数据文件分为 .frm 和 .MYD、MYI 三种，分别对应 表结构 、表数据、表索引 为什么普遍会认为MyISAM查询效率比InnoDB快呢？对于两者存储引擎的的性能分析不能只看主键索引，我们也要看看辅助索引，前头我们介绍过 InnoDB 辅助索引会存在一个回表的过程。而 MyISAM 的辅助索引和主键索引的原理是一样的，并没有什么区别，可以直接定位到数据。InnoDB 对 MVCC 的支持，事务是比较影响性能的，而 MyISAM 这块却没有这方面的影响 总结： 1、InnoDB 是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高，但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，否则其他索引也会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。 2、InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败。 3、InnoDB 在 MySQL 5.6 之前不支持全文索引，而 MyISAM 一直都支持，如果用的是老版本，查询效率上 MyISAM 要高。 4、InnoDB 锁粒度是行锁，而 MyISAM 是表锁。 5、InnoDB 支持事务，MyISAM 不支持，对于 InnoDB 每一条 SQL 语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条 SQL 语言放在 begin 和 commit 之间，组成一个事务。 6、InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而 MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快，但如果上述语句还包含了 where 子句，那么两者执行效率是一样的。"},{"title":"锁理论","path":"/wiki/mysql/lock/lock.html","content":"MySQL锁机制对数据库的操作有读、写，组合起来就有：读读、读写、写读、写写。读读不存在安全问题，安全问题加锁都可以解决，但所有的操作都加锁太重了，只有写写必须要求加锁，读写、写读可以用 MVCC。MySQL 的默认隔离级别是 RR，但是 RR 在 MVCC 的加持下还是存在幻读，这时候就还是需要加锁，间隙锁就是用来在 RR 级别下解决幻读的问题。 共享锁、排他锁共享锁（shared lock ）也叫读锁、S锁，数据被某个事务获取了共享锁之后，还可以被其它事务获取共享锁，但是不能被其它事务获取排他锁。 排他锁（exclusive Lock）也叫写锁、X锁，数据被某个事务获取之后就不能被其它事务获取任何锁。 总结：共享锁和共享锁之间不冲突，排他锁和共享锁、排他锁都冲突。默认 select 的时候是不加锁的，更新、添加、删除的时候会加排他锁。 强制加锁1234-- 强制加共享锁select * from my_table where id = 1 lock in share mode;-- 强制加排他锁select * from my_table where id = 1 for update; 意向锁：意向共享锁、意向排他锁加锁的时候可能锁某一行或几行的数据，也可能锁整个表，但上面共享锁只能和共享锁兼容，排他锁和两者都不兼容。 虽然锁表的场景很少，如果要用共享锁锁表不得一行行去遍历看看数据有没有被排他锁锁过，如果要用排它锁锁表就得一行行去遍历看是否存在数据被共享锁或排他锁占用。 实际上是不可能遍历的，代价太大，所以在对某些数据加共享锁的时候，就会给表加上 意向共享锁，对某些数据加排他锁的时候就会对表加上 意向排他锁。 这样再对表加锁的时候只需要判断是否有对应的意向锁就好了，而不需要遍历。意向锁之间是不冲突的。 共享锁（S）、排他锁（X）、意向共享锁（IS）、意向排他锁（IX）的兼容关系 X IX S IS X ❌ ❌ ❌ ❌ IX ❌ ✅ ❌ ✅ S ❌ ❌ ✅ ✅ IS ❌ ✅ ✅ ✅ 记录锁、间隙锁、临键锁记录锁（Record Locks）：记录锁是基于索引记录上的锁，它锁定的行数是固定的、明确的，根据情况它可以是共享锁、排他锁。 间隙锁（Gap Locks）：间隙锁的目的是在 RR 级别下，防止幻读，幻读的产生是当前事务多次的查询结果数量上不一致，间隙锁的目的就是保证当前范围内的数据不会被更改，所以它会锁住某些个区间的数据。 临键锁（Next-key Locks）：等于 记录锁+间隙锁，所以我们只需要知道这两个锁的定义就好了，MySQL 默认级别是 RR，默认锁上临键锁。 锁总结锁都是基于索引去找到数据记录再加锁的，而索引的规则是通过其它索引找到主键索引，所以： 没有使用索引做更新相关操作会锁表。 通过唯一&#x2F;主键索引等值加锁，只会锁具体的行，非唯一索引则不一定，SQL 优化器会基于数据分布选择记录锁，或临键锁。 只有在 RR 级别下才有间隙锁，目的是为了解决幻读，如果操作的数据是跨多个范围，就会加多个区间的间隙锁。 MySQL 默认的锁就是【临键锁】，所以在执行 SQL 的时候，记录锁和间隙锁是会同时存在的，范围是左开右闭的区间。 在 SQL 查询的时候，我们知道是先通过索引去找数据的，其实加锁也是基于索引的，通过索引找到对应的数据然后把相关的数据行都锁上，如果没有使用索引就会扫描全表，也就会锁表。"},{"title":"Redis高频面试题","path":"/wiki/redis/index.html","content":"Redis的数据结构与应用场景五种基本数据类型1、字符串 string：最基本的数据结构，它能存储任何类型的数据，包括二进制数据，序列化后的数据，最大512M。Redis分布式锁的实现就利用了这种数据结构，还包括可以实现计数器、Session共享、分布式ID 2、列表 list：简单的字符串列表，按照插入顺序排序，元素可以重复。可以添加一个元素到列表的头部（左边）或者尾部（右边），底层是个链表结构。通过命令的组合，既可以当做栈，也可以当做队列来使用。可以用来缓存类似微信公众号、微博等消息流数据 3、集合 set：无序不可重复集合，可以进行交集、并集、差集操作， 从而可以实现类似——我和某人共同关注的人、朋友圈点赞等功能 4、有序集合 zset（sorted set）：和集合 set 一样也是string类型元素的无序不可重复集合。不同的是 zset 的每个元素都会关联一个分数（分数可以重复），redis 通过分数来为集合中的成员进行从小到大的排序。可以用来实现排行榜功能 5、哈希表 hash：可以用来存储一些key-value对，更适合用来存储对象 三种特殊数据类型JavaGuide 1、位图 Bitmap 应用场景：需要保存状态信息（0&#x2F;1 即可表示）的场景。举例：用户签到情况、活跃用户情况、用户行为统计（比如是否点赞过某个视频）。 2、基数统计 HyperLogLog 应用场景：数量量巨大（百万、千万级别以上）的计数场景。举例：热门网站每日&#x2F;每周&#x2F;每月访问 ip 数统计、热门帖子 uv 统计、 3、地理位置 Geospatial 应用场景：需要管理使用地理空间数据的场景。举例：附近的人。 数据类型 说明 Bitmap 你可以将 Bitmap 看作是一个存储二进制数字（0 和 1）的数组，数组中每个元素的下标叫做 offset（偏移量）。通过 Bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 Bitmap 本身会极大的节省储存空间。 HyperLogLog Redis 提供的 HyperLogLog 占用空间非常非常小，只需要 12k 的空间就能存储接近2^64个不同元素。不过，HyperLogLog 的计数结果并不是一个精确值，存在一定的误差（标准误差为 0.81% ）。 Geospatial index Geospatial index（地理空间索引，简称 GEO） 主要用于存储地理位置信息，基于 Sorted Set 实现。 Redis线程模型：单线程快的原因 Redis 基于 Reactor 模式开发了网络事件处理器，这个处理器叫做文件事件处理器 file event handler。 这个文件事件处理器，它是单线程的，所以 Redis 才叫做单线程模型。它采用IO多路复用机制来同时监听多个套接字（Socket），根据套接字上的事件类型来关联不同的事件处理器。 当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。 文件事件处理器既实现了高性能的网络通信模型，又可以很好地跟内部其他单线程方式运行的模块进行对接，保证了 Redis 内部的线程模型的简单性。 文件事件处理器的结构包含4个部分：多个Socket（客户端连接）、IO多路复用程序（支持多个客户端连接的关键）、文件事件分派器（将 socket 关联到相应的事件处理器）、事件处理器 （连接应答处理器、命令请求处理器、命令回复处理器）。 Redis 服务器是一个事件驱动程序，服务器需要处理两类事件：文件事件(file event) ：用于处理 Redis 服务器和客户端之间的网络 IO。时间事件(time eveat) ：Redis 服务器中的⼀些操作（比如 serverCron 函数）需要在给定的时间点执行，而时间事件就是处理这类定时操作的我们接触最多的还是文件事件（客户端进行读取写入等操作，涉及一系列网络通信）。 多个 Socket 可能并发的产生不同的操作，每个操作对应不同的文件事件，但是IO多路复用程序会监听多个 Socket，会将 Socket 放入一个队列中排队，每次从队列中取出一个 Socket 给事件分派器，事件分派器把 Socket 给对应的事件处理器。然后一个 Socket 的事件处理完之后，IO多路复用程序才会将队列中的下一个 Socket 给事件分派器。 文件事件分派器会根据每个 Socket 当前产生的事件，来选择对应的事件处理器来处理。 Redis 启动初始化时，将连接应答处理器跟 AE_READABLE 事件关联。若一个客户端发起连接，会产生⼀个 AE_READABLE 事件，然后由连接应答处理器负责和客户端建立连接，创建客户端对应的 socket，同时将这个 socket 的 AE_READABLE 事件和命令请求处理器关联，使得客户端可以向主服务器发送命令请求。当客户端向 Redis 发请求时（不管读还是写请求），客户端 socket 都会产生⼀个 AE_READABLE 事件，触发命令请求处理器。处理器读取客户端的命令内容， 然后传给相关程序执行。当 Redis 服务器准备好给客户端的响应数据后，会将 socket 的 AE_WRITABLE 事件和命令回复处理器关联，当客户端准备好读取响应数据时，会在 socket 产生⼀个 AE_WRITABLE 事件，由对应命令回复处理器处理，将准备好的响应数据写入 socket，供客户端读取。命令回复处理器全部写完到 socket 后，就会删除该 socket 的 AE_WRITABLE 事件和命令回复处理器的映射。 单线程快的原因： 1）纯内存操作，数据结构简单 2）核心是基于非阻塞的IO多路复用机制 3）单线程反而避免了多线程的频繁上下文切换带来的性能问题 过期键的删除策略过期策略就是指当 Redis 中缓存的 key 过期了，Redis 如何处理。 惰性删除：只有当访问一个 key 时，才会判断该 key 是否已过期，过期则清除。该策略可以最大化地节省 CPU 资源，却对内存非常不友好。极端情况可能出现大量的过期 key 没有被再次访问，从而不会被清除，占用大量内存。 定期删除：每隔一定的时间（默认100毫秒），会扫描一定数量的数据库的 expires 字典中一定数量的 key，并清除其中已过期的 key。该策略是⼀个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得 CPU 和内存资源达到最优的平衡效果。 expires 字典（可以看作是 hash 表）会保存所有设置了过期时间的 key 的过期时间数据。其中，key 是指向键空间中的某个键的指针，value 是该键的毫秒精度的 UNIX 时间戳表示的过期时间。键空间是指该 Redis 集群中保存的所有键。 Redis 中同时使用了惰性过期和定期过期两种过期策略。 仅仅通过给 key 设置过期时间还是有问题的，因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样可能导致大量过期 key 堆积在内存里，然后就 Out of memory 了。这个时候就需要引入 Redis 内存淘汰机制。 内存淘汰机制配置文件中123maxclients 10000 # 最大客户端数量maxmemory 100mb # 设置最大内存限制为100Mmaxmemory-policy noeviction # 内存达到限制值的处理策略 Redis提供的数据淘汰策略1、volatile-lru：从设置了过期时间的 key 中使用 LRU 算法进行淘汰 2、volatile-ttl：在设置了过期时间的 key 中，根据 key 的过期时间进行淘汰，越早过期的越优先被淘汰 3、volatile-random：从设置了过期时间的 key 中随机淘汰 4、allkeys-lru：从所有 key 中使用 LRU 算法进行淘汰（最常用） 5、allkeys-random：从所有 key 中随机淘汰数据 6、noeviction (默认策略)：对于写请求不再提供服务，直接返回错误（DEL 请求和部分特殊请求除外） 当使用 volatile-lru、volatile-ttl、volatile-random 这三种策略时，如果没有 key 可以被淘汰，则和 noeviction 一样返回错误 获取当前内存淘汰策略：config get maxmemory-policy 通过命令修改淘汰策略：config set maxmemory-policy allkeys-lru 4.0 版本后增加以下两种7、volatile-lfu（least frequently used）：从已设置过期时间的数据集中挑选最不经常使用的数据淘汰8、allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key 常见的缓存淘汰算法FIFO（First In First Out，先进先出）根据缓存被存储的时间，离当前最远的数据优先被淘汰LRU（Least Recently Used，最近最少使用）是一种缓存置换算法。在使用内存作为缓存的时候，缓存的大小一般是固定的。当缓存被占满，这个时候继续往缓存里面添加数据，就需要淘汰一部分老的数据，释放内存空间用来存储新的数据。使用 LRU 算法进行内存淘汰的核心思想是：如果一个数据在最近一段时间没有被用到，那么将来被使用到的可能性也很小，所以就可以被淘汰掉。 LFU（LeastFrequentlyUsed，最不经常使用）在一段时间内，缓存数据被使用次数最少的会被淘汰 什么是RDB和AOF Redis 的持久化机制：RDB 和 AOF RDB：Redis DataBase，默认的持久化策略，将某一个时刻的内存快照（Snapshot），以二进制的方式写入磁盘。在指定时间间隔内，redis 服务执行指定次数的写操作，会自动触发一次持久化操作。即在指定目录下生成一个 dump.rdb 文件。Redis 重启会通过加载 dump.rdb 文件来恢复数据。 手动触发： save 命令，使 Redis 处于阻塞状态，直到 RDB 持久化完成，才会响应其他客户端发来的命令，所以在生产环境一定要慎用 bgsave 命令，fork 出⼀个子进程执行持久化，主进程只在 fork 过程中有短暂的阻塞，子进程创建之后，主进程就可以响应客户端请求了 自动触发： save m n ：在 m 秒内，如果有 n 个键发生改变，则自动触发持久化，通过 bgsave 执行，如果设置多个、只要满足其一就会触发，配置文件有默认配置 flushall：用于清空 redis 所有的数据库，flushdb 清空当前 redis 所在库数据(默认是0号数据库)，会清空 RDB 文件，同时也会生成 dump.rdb，内容为空 shutdown：也能触发 RDB 持久化机制 主从同步：全量同步时会自动触发 bgsave 命令，生成 rdb 发送给从节点 优点：整个Redis数据库将只包含⼀个文件 dump.rdb，方便持久化。容灾性好，方便备份。性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能。相对于大数据集时，比 AOF 的启动效率更高。 缺点：数据安全性低。RDB 是间隔⼀段时间进行持久化，如果持久化之间 redis 发生故障，最后一次持久化后的数据可能丢失。所以这种方式更适合数据要求不严谨的时候由于 RDB 是通过 fork 子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务较长时间 AOF：Append Only File，以日志的形式记录服务器所处理的每⼀个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文文件看到详细的操作记录。当 Redis 重启时，可以加载 AOF 文件进行数据恢复 优点：数据安全，Redis中提供了3种同步策略，即每秒同步（默认）、每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率也是非常高的，所差的是⼀旦系统出现宕机现象，那么这⼀秒钟之内修改的数据将会丢失。而每修改同步，我们可以将其视为同步持久化，即每次发生的数据变化都会被立即记录到磁盘中，最多丢一条。不同步：由操作系统控制，可能丢失较多数据通过 append 模式写文件，即使中途服务器宕机也不会破坏已经存在的内容，可以通过 redis-check-aof 工具解决数据⼀致性问题。AOF 机制的 rewrite 模式。定期对 AOF 文件进行重写，以达到压缩的目的 缺点：AOF 文件比 RDB 文件大，且恢复速度慢。数据集大的时候，比 RDB 启动效率低。运行效率没有 RDB 高 AOF 重写可以产生⼀个新的 AOF 文件，这个新的 AOF 文件和原有的 AOF 文件所保存的数据库状态⼀样，但体积更小在执行 BGREWRITEAOF 命令时，Redis 服务器会维护⼀个 AOF 重写缓冲区，该缓冲区会在子进程创建新 AOF 文件期间，记录服务器执行的所有写命令。当子进程完成创建新 AOF 文件的工作之后，服务器会将重写缓冲区中的所有内容追加到新 AOF 文件的末尾，使得新的 AOF 文件保存的数据库状态与现有的数据库状态一致。最后，服务器用新的 AOF 文件替换旧的 AOF 文件，以此来完成 AOF 文件重写操作 AOF 文件比 RDB 更新频率高，优先使用 AOF 还原数据，RDB 性能比 AOF 好， 如果两个都配了优先加载 AOF。 简述Redis事务实现1、事务开始 MULTI 命令的执行，标识着⼀个事务的开始。MULTI 命令会将客户端状态的 flags 属性中打开 REDIS_MULTI 标识来完成。 2、命令入队 当⼀个客户端切换到事务状态之后，服务器会根据这个客户端发送来的命令来执行不同的操作。如果客户端发送的命令为 MULTI、EXEC、DISCARD 、WATCH 中的一个，立即执行这个命令，否则将命令放入⼀个事务队列里面，然后向客户端返回 QUEUED 回复 如果客户端发送的命令为 MULTI、EXEC、DISCARD 、WATCH 四个命令的其中⼀个，那么服务器立即执行这个命令。 如果客户端发送的是四个命令以外的其他命令，那么服务器并不立即执行这个命令。 首先检查此命令的格式是否正确，如果不正确，服务器会在客户端状态（redisClient）的 flags 属性关闭 REDIS_MULTI 标识，并且返回错误信息给客户端。如果正确，将这个命令放入一个事务队列里面，然后向客户端返回 QUEUED 回复 事务队列是按照 FIFO 的方式保存入队的命令 3、事务执行 客户端发送 EXEC 命令，服务器执行 EXEC 命令逻辑。 如果客户端状态的 flags 属性不包含 REDIS_MULTI 标识，或者包含 REDIS_DIRTY_CAS 或者 REDIS_DIRTY_EXEC 标识，那么就直接取消事务的执行。 否则客户端处于事务状态（flags 有 REDIS_MULTI 标识），服务器会遍历客户端的事务队列，然后执行事务队列中的所有命令，最后将返回结果全部返回给客户端 Redis 不支持事务回滚机制，但是它会检查每⼀个事务中的命令是否错误。 Redis 事务不支持检查那些程序自己的逻辑错误。例如对 String 类型的数据库键执行对 HashMap 类型的操作！ MULTI 命令用于开启⼀个事务，它总是返回 OK。MULTI 执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当 EXEC 命令被调用时，所有队列中的命令才会被执行。 EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。当操作被打断时，返回空值 nil 。 通过调用 DISCARD，客户端可以清空事务队列，并放弃执行事务，并且客户端会从事务状态中退出。 WATCH 命令是⼀个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到 EXEC 命令。 UNWATCH 命令可以取消 watch 对所有 key 的监控。 主从复制的流程1、集群启动时，主从库间会先建立连接，为全量复制做准备 2、主库将所有数据同步给从库。从库收到数据后，在本地完成数据加载，这个过程依赖于内存快照 RDB 3、在主库将数据同步给从库的过程中，主库不会阻塞，仍然可以正常接收请求。否则，redis 的服务就被中断了。但是，这些请求中的写操作并没有记录到刚刚生成的 RDB 文件中。为了保证主从库的数据一致性，主库会在内存中用专门的 replication buffer，记录 RDB 文件生成之后收到的所有写操作。 4、最后，也就是第三个阶段，主库会把第二阶段执行过程中新收到的写命令，再发送给从库。具体的操作是，当主库完成 RDB 文件发送后，就会把此时 replocation buffer 中修改操作发送给从库，从库再执行这些操作。这样⼀来，主从库就实现同步了 5、后续主库和从库都可以处理客户端读操作，但写操作只能交给主库处理，主库接收到写操作后，还会将写操作发送给从库，实现增量同步 主从复制的核心原理通过执行 slaveof 命令或设置 slaveof 选项，让一个服务器去复制另一个服务器的数据。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而⼀个从数据库只能拥有一个主数据库。 全量复制：主节点通过 bgsave 命令 fork 子进程进行 RDB 持久化，该过程是非常消耗 CPU、内存(页表复制)、硬盘IO的主节点通过网络将 RDB 文件发送给从节点，对主从节点的带宽都会带来很大的消耗从节点清空老数据、载入新 RDB 文件的过程是阻塞的，无法响应客户端的命令；如果从节点执行 bgrewriteaof，也会带来额外的消耗 部分复制：复制偏移量：执行复制的双方，主从节点，分别会维护一个复制偏移量 offset复制积压缓冲区：主节点内部维护了一个固定长度的、先进先出(FIFO)队列作为复制积压缓冲区， 当主从节点 offset 的差距过大超过缓冲区长度时，将无法执行部分复制，只能执行全量复制。服务器运行ID(runid)：每个Redis节点，都有其运行ID，运行ID由节点在启动时自动生成，主节点会将自己的运行ID发送给从节点，从节点会将主节点的运行ID存起来。 从节点Redis断开重连的时候，就是根据运行ID来判断同步的进度：如果从节点保存的 runid 与主节点现在的 runid 相同，说明主从节点之前同步过，主节点会继续尝试使用部分复制（到底能不能部分复制还要看 offset 和复制积压缓冲区的情况）；如果从节点保存的 runid 与主节点现在的 runid 不同，说明从节点在断线前同步的 Redis 节点并不是当前的主节点，只能进行全量复制。 集群策略Redis提供了三种集群策略： 主从模式：这种模式比较简单，主库可以读写，并且会和从库进行数据同步。这种模式下，客户端直接连主库或某个从库，但是当主库或从库宕机后，客户端需要手动修改IP，另外，这种模式也比较难进行扩容，整个集群所能存储的数据受到某台机器的内存容量限制，所以不可能支持特大数据量 哨兵模式：这种模式在主从的基础上新增了哨兵节点。当主库节点宕机后，哨兵会首先发现，然后在从库中选择⼀个库作为新的主库，另外哨兵也可以做集群，从而可以保证当某⼀个哨兵节点宕机后，还有其他哨兵节点可以继续工作，这种模式可以比较好的保证Redis 集群的高可用， 但是仍然不能很好的解决 Redis 的容量上限问题。 Cluster 模式：Cluster 模式是用得比较多的模式，它支持多主多从，这种模式会按照 key 进行槽位的分配，可以使得不同的 key 分散到不同的主节点上，利用这种模式可以使得整个集群支持更大的数据容量，同时每个主节点可以拥有自己的多个从节点，如果该主节点宕机，会从它的从节点中选举⼀个新的主节点。 对于这三种模式，如果 Redis 要存的数据量不大，可以选择哨兵模式；如果 Redis 要存的数据量大，并且需要持续的扩容，那么选择Cluster 模式。 哨兵机制(sentinel)的原理Redis 哨兵机制是通过在独立的哨兵节点上运行特定的哨兵进程来实现的。这些哨兵进程监控主从节点的状态，并在发现故障时自动完成故障发现和转移，并通知应用方，实现高可用性。 以下是哨兵机制的工作原理a. 哨兵选举：在启动时，每个哨兵节点会执行选举过程，其中一个哨兵节点被选为领导者（leader），负责协调其他哨兵节点。选举过程每个在线的哨兵节点都可以成为领导者，每个哨兵节点会向其它哨兵发送 is-master-down-by-addr 命令，征求判断并要求将自己设置为领导者；当其它哨兵收到此命令时，可以同意或者拒绝它成为领导者；如果哨兵发现自己在选举的票数大于等于 num(sentinels)&#x2F;2+1 时，将成为领导者，如果没有超过，继续选举。b. 监控主从节点：哨兵节点通过发送命令周期性地检查主从节点的健康状态，包括主节点是否在线、从节点是否同步等。如果哨兵节点发现主节点不可用，它会触发一次故障转移。c. 故障转移：一旦主节点被判定为不可用，哨兵节点会执行故障转移操作。它会从当前的从节点中选出一个新的主节点，并将其他从节点切换到新的主节点。这样，系统可以继续提供服务而无需人工介入。故障转移过程由 Sentinel 节点定期监控发现主节点是否出现了故障：sentinel 会向 master 发送心跳 PING 来确认 master 是否存活，如果 master 在“一定时间范围”内不回应 PONG 或者是回复了一个错误消息，那么这个 sentinel 会主观地(单方面地)认为这个 master 已经不可用了。确认主节点：过滤掉不健康的（下线或断线），没有回复过哨兵 ping 响应的从节点选择从节点优先级最高的选择复制偏移量最大，此指复制最完整的从节点当主节点出现故障， 由领导者负责处理主节点的故障转移。d. 客户端重定向：哨兵节点会通知客户端新的主节点的位置，使其能够与新的主节点建立连接并发送请求。这确保了客户端可以无缝切换到新的主节点，继续进行操作。此外，哨兵节点还负责监控从节点的状态。如果从节点出现故障，哨兵节点可以将其下线，并在从节点恢复正常后重新将其加入集群。 客观下线 当主观下线的节点是主节点时，此时哨兵节点会通过指令 sentinel is-masterdown-by-addr 寻求其它哨兵节点对主节点的判断，当超过 quorum（选举）个数，此时哨兵节点则认为该主节点确实有问题，这样就客观下线了，大部分哨兵节点都同意下线操作，也就是客观下线。 redis 哨兵的作用： 监控主数据库和从数据库是否正常运行。 主数据库出现故障时，可以自动将从数据库转换为主数据库，实现自动切换。 Redis分布式锁底层是如何实现的1、首先利用 setnx 来保证：如果 key 不存在才能获取到锁，如果 key 存在，则获取不到锁 2、然后还要利用 lua 脚本来保证多个 redis 操作的原子性 3、同时还要考虑到锁过期，所以需要额外的⼀个看门狗定时任务来监听锁是否需要续约 4、同时还要考虑到 redis 节点挂掉后的情况，所以需要采用红锁的方式来同时向N&#x2F;2+1个节点申请锁，都申请到了才证明获取锁成功，这样就算其中某个 redis 节点挂掉了，锁也不能被其他客户端获取到 性能优化Redis bigkey简单来说，如果一个 key 对应的 value 所占用的内存比较大，那这个 key 就可以看作是 bigkey。有一个不是特别精确的参考标准：string 类型的 value 超过 10 kb，复合类型的 value 包含的元素超过 5000 个（对于复合类型的 value 来说，不一定包含的元素越多，占用的内存就越多）。 如何发现 bigkey？ 1、使用 Redis 自带的 --bigkeys 参数来查找 这个命令会扫描(Scan) Redis 中的所有 key ，会对 Redis 的性能有⼀点影响。并且，这种方式只能找出每种数据结构 top 1 bigkey（占用内存最大的 string 数据类型，包含元素最多的复合数据类型） 2、分析 RDB 文件 借助网上现成的代码&#x2F;工具 大量key集中过期定期删除执行过程中，如果突然遇到大量过期 key 的话，客户端请求必须等待定期清理过期 key 任务线程执行完成，因为这个定期任务线程是在 Redis 主线程中执行的。这就导致客户端请求没办法被及时处理，响应速度会比较慢。 如何解决 1、给 key 设置随机过期时间。 2、开启 lazy-free（惰性删除&#x2F;延迟释放） 。lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程。 缓存预热、缓存击穿、缓存雪崩、缓存穿透缓存预热：当系统上线后，提前将相关的缓存数据直接加载到缓存系统。用户直接查询事先被预热的缓存数据！ 缓存中存放的大多都是热点数据，目的就是保证请求可以直接从缓存中获取到数据，而不用访问数据库。 缓存击穿：相较于缓存穿透，缓存击穿的目的性更强，一个存在的 key，在缓存过期的一刻同时有大量的请求，这些请求都会击穿到DB，造成瞬时 DB 请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个 key 的缓存不可用而导致击穿，但是其他的 key 依然可以使用缓存响应。比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。解决方案有 设置热点数据永不过期 但是当 Redis 内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。 加互斥锁(分布式锁) 在访问 key 之前，采用 SETNX（set if not exists）来设置另一个短期 key 来锁住当前 key 的访问，访问结束再删除该短期 key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。 缓存雪崩：如果缓存中某一时刻大批热点数据同时过期，造成瞬时 DB 请求量大、压力骤增，引起雪崩。解决办法有 搭建⼀个高可用的 Redis 集群 合理的过期时间。为缓存的过期时间引入随机值，分散缓存过期时间，避免大规模同时失效。或者是粗暴的设置热点数据永不过期 多级缓存。使用多级缓存架构，如本地缓存 + 分布式缓存，提高系统的容错能力 限流降级。在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待。 数据预热。在正式部署之前，把可能的数据预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key，并设置不同的过期时间，让缓存失效的时间点尽量均匀。 缓存穿透：在默认情况下用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找。数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）都没有命中缓存的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击，被称为洪水攻击。解决方案有 布隆过滤器 使用布隆过滤器。对所有可能查询的参数以 Hash 的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。如果它认为⼀个 key 不存在，那么这个 key 就肯定不存在 缓存空对象。一次请求若在缓存和数据库中都没找到，就在缓存中放一个空对象用于处理后续这个请求。 这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间。即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。 参数校验。在接收到请求之前进行参数校验，判断请求参数是否合法。 Redis和数据库如何保证数据一致语雀 先更新数据库，再删除 Redis。如果删除 Redis 失败，会导致数据不一致 先删除 Redis 缓存数据，再更新数据库（日常开发中都会选这种）。再次查询的时候会将数据添加到缓存中，这种方案能解决上面的问题，但是在高并发下性能较低，而且仍然会出现数据不一致的问题，比如线程1删除了 Redis 缓存数据，正在更新数据库（出现网络延迟），此时出现另外一个查询，那么就会把数据库中的老数据又缓存到 Redis 中 因为写和读是并发的，没法保证顺序,就会出现缓存和数据库的数据不一致的问题 延时双删。步骤是：先删除 Redis 缓存数据，再更新数据库，延迟几百毫秒再删除 Redis 缓存数据。这样就算在更新数据库时，有其他线程读了数据库，把老数据缓存到了 Redis 中，那么也会被删除掉，从而把数据保持一致 队列+重试机制 异步更新缓存(基于订阅binlog的同步机制)。 使用阿里的一款开源框架 canal，通过该框架可以对 MySQL 的 binlog 进行订阅，而 canal 正是模仿了 mysql 的 slave 数据库的备份请求，使得 Redis 的数据更新达到了相同的效果。"},{"title":"实现事务","path":"/wiki/mysql/work/work.html","content":"InnoDB辅助索引访问数据总是需要二次查找，非聚簇索引都是辅助索引，像复合索引、前缀索引、唯⼀索引， 辅助索引叶子节点存储的不再是行的物理位置，而是主键值 MyISM 使用的是非聚簇索引，没有聚簇索引，非聚簇索引的两棵B+树看上去没什么不同，节点的结构完全⼀致只是存储的内容不同而已，主键索引B+树的节点存储了主键，辅助键索引B+树存储了辅助键。 表数据存储在独立的地方，这两颗B+树的叶子节点都使用⼀个地址指向真正的表数据，对于表数据来 说，这两个键没有任何差别。由于索引树是独立的，通过辅助键检索无需访问主键的索引树。 如果涉及到大数据量的排序、全表扫描、count之类的操作的话，还是MyISAM占优势些，因为索引所占空间小，这些操作是需要在内存中完成的。 什么是MVCCMVCC 全称是 Multi-Version Concurrency Control，即多版本并发控制。它是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。MVCC 的核心思想是，为每个数据修改保存一个版本，版本与事务时间戳相关联。读操作只读取该事务开始前的数据库快照。这样，即使有其他事务对数据进行修改，也不会影响当前事务的读取结果。同时，由于读操作不需要加锁，也就避免了锁的开销和等待。 MVCC机制MVCC 只在 READ COMMITTED 和 REPEATABLE READ 两个隔离级别下工作。其他两个隔离级别和 MVCC 不兼容, 因为 READ UNCOMMITTED 总是读取最新的数据行，而不是符合当前事务版本的数据行。而 SERIALIZABLE 则会对所有读取的行都加锁。 undo log 与 ReadView 合作可以实现多版本并发控制 MVCC。已提交读和可重复读的区别就在于它们生成 ReadView 的策略不同。 undo 日志版本链是指一行数据被多个事务依次修改过后，在每个事务修改完后，MySQL 会保留修改前的数据 undo 回滚日志，并且用两个隐藏字段 trx_id 和 roll_pointer 把这些 undo 日志串联起来形成一个历史记录版本链 聚簇索引记录中有两个必要的隐藏列trx_id：用来存储每次对某条聚簇索引记录进行修改的时候的事务id。roll_pointer：每次对哪条聚簇索引记录有修改的时候，都会把老版本写入 undo 日志中。这个 roll_pointer 就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上⼀个版本的记录信息。（注意插入操作的 undo 日志没有这个属性，因为它没有老版本） 已提交读隔离级别下的事务在每次查询的开始都会生成⼀个独立的 ReadView，而可重复读隔离级别则在第⼀次读的时候生成⼀个 ReadView，之后的读都复用之前的 ReadView。这个视图由执行查询时所有未提交事务id数组（数组里最小的id为 min_id）和已创建的最大事务id（max_id）组成，事务里的任何sql查询结果需要从对应版本链里的最新数据开始逐条与 read-view 做对比，从而得到最终的快照结果。 版本链对比规则开始事务时创建 readview，readView 维护当前活动的事务id，即未提交的事务id，排序生成一个数组访问数据，获取数据中的事务id（获取的是事务id最大的记录），对比 readview如果在 readview 的左边（比 readview 小），可以访问（在左边意味着该事务已经提交）如果在 readview 的右边（比 readview 大）或者就在 readview 中，不可以访问；获取 roll_pointer，取上一版本重新对比（在右边意味着，该事务在 readview 生成之后出现，在 readview 中意味着该事务还未提交）如果落在中间，包括两种情况若事务id在视图数组中，表示这个版本是由还没有提交的事务生成的，不可见（若数据的事务id就是当前自己的事务，则是可见的）若事务id不在视图数组中，表示这个版本是已经提交的事务生成的，可见 对于删除的情况可以认为是 update 的特殊情况，会将版本链上的最新的数据复制一份，然后将 trx_id 需改成删除操作的 trx_id，同时在该条记录的头信息（record header）里的 deleted_flag 标记位写上 true，来表示当前记录已经被删除，在查询时按照上面的规则查到对应的记录，如果 delete_flag 标记位为 true，意味着记录已经被删除，则不返回数据。 注意：begin &#x2F; start transaction 命令并不是一个事务的起点，在执行到他们之后的第一个修改操作表的语句，事务才会真正启动，才会向 mysql 申请事务id，mysql 内部是严格按照事务的启动顺序来分配事务id的。 Innodb是如何实现事务的Innodb 通过 Buffer Pool 缓存机制，LogBuffer，Redo Log，Undo Log 来实现事务，以一个 update 语句为例 一张图足以说明 为什么 MySQL 不直接更新磁盘上的数据而是设置一套这么复杂的机制来执行sql？如果来一个请求就直接对磁盘文件进行随机读写，然后更新磁盘文件里的数据，由于磁盘随机读写的性能非常差，所以直接更新磁盘文件是不能让数据库抗住很高并发的。MySQL 这套机制看起来复杂，但它可以保证每个更新请求都是更新内存 BufferPool，然后顺序写日志文件，同时还能保证各种异常情况下的数据一致性。更新内存的性能是极高的，然后顺序写磁盘上的日志文件的性能也是非常高的，要远高于随机读写磁盘文件。正是通过这套机制，MySQL 才能实现高性能 1、为什么磁盘文件就是随机读写？ 可能会进行更新、删除等操作；可能不在同一个数据页 2、redo log 日志为什么是有顺序的？ 因为redo是按顺序写，不会删除 3、为什么要写 undo log 日志？ 一个事务开始，进行增删改的时候，需要把原数据写到 undo log 日志，方便在事务失败的时候，进行数据回滚（这里主要是回滚 BufferPool 缓存池的数据）。"},{"title":"优化方法","path":"/wiki/mysql/optimize/optimize.html","content":"通过Explain干预执行计划Explain 是 SQL 分析工具中非常重要的一个功能，它可以模拟优化器执行查询语句，帮助我们理解查询是如何执行的；分析查询执行计划可以帮助我们发现查询瓶颈，优化查询性能。 Explain语句返回列的各列含义 列名 含义 id 每个select都有一个对应的id号，并且是从1开始自增的 select_type 查询语句执行的查询操作类型 table 表名 partitions 表分区情况 type 查询所用的访问类型 possible_keys 可能用到的索引 key 实际查询用到的索引 key_len 所使用到的索引长度 ref 使用到索引时，与索引进行等值匹配的列或者常量 rows 预计扫描的行数（索引行数或者表记录行数） filtered 表示符合查询条件的数据百分比 Extra SQL执行的额外信息 Explain返回列详解密码nfyq"},{"title":"雨季","path":"/wiki/yhbuster/SILVERriver/雨季.html","content":"之前说要给你写一封信，和你说一说生活近况。我想了一些画面，想起以前语文老师给我们上“寒暄”——刚好我这儿下着雨呢——我坐在宿舍一楼台阶上，一边看着外面光线蒙蒙的灯柱，一边擦掉自行车上的雨水。下雨天没什么人出门，端坐在这的我应该不会让同事觉得奇怪吧？我挺喜欢蹲在家门口看雨的日子的。 我之前没有雨季这个概念，因为家里雨总是下下停停停停下下的，没有连绵不断的气势。它总是和农具联系在一起，给人一种明亮的、丰满的、动情的感受。比如仲春的时候，雨水散在刚插过早稻秧的水田里，杉树竹子都舒发开新生的叶子，爷爷就从这山脚田边的小路回来，戴蓑笠斗篷，穿一双硬胶黄拖鞋，雨蒙蒙里叼一根烟。 夏天一下雨，菌子就特别多。比如大棚里养的白菌子，雨季就长的更快，农贸市场出得多；松奶菌是有名的山珍，松树林里好像特别容易找到，黄褐色的伞盖就像烧熟的鸡块，炖汤色浓味又鲜；我采得最多的是一种叫做“雷公菌”的玩意，就在我小学的操场（一块未怎么打理的大草地）上，夏天一有雷鸣下起雨来，操场上就生出这种碎泥一样的深褐带绿色的菌类出来。需要费不少的功夫才能拾一塑料袋，里面又混有很多的草梗、碎叶，乍一看真的很想一堆半干的烂牛粪，让人不禁疑惑：这玩意也能吃！？但是如果花上更多的功夫，把这些草梗碎叶择洗干净，加点猪板肉和红辣椒丝同炒，入口的美味真能让你瞠目结舌！我总是没有耐心多拾些，雷雨过后的操场上也多是些女生。各种颜色的伞就和她们一样弯腰慢走在夏天的绿草地上，伴着一点势头已去的蒙蒙小雨，天是深蓝色的。 秋天晚上看动画之前，我总要准点拨到湖南台的天气预报，如果明天晴天的话，那要继续晒谷子晒花生，可不能让雨淋潮了。如果在肖剑家里玩得太晚，我也总抱着“反正已经晚了不如多玩一会把他家天气预报看了”这样的想法，虽然奶奶嘱咐我天黑前要回家。天气预报总是不准，明明预报的大晴，却总有黑云赶着我抢收天顶上晒着的干谷。总会有一些谷子被雨水淋潮生芽的，花生更容易。雨水的味道就是发芽谷物的味道。 黄昏的村庄，雨水的村庄，万里无云如同我的悲伤。"},{"title":"近况","path":"/wiki/yhbuster/SILVERriver/近况.html","content":"收到你的信好久了，最近厂房工作比较多，下班以后总是休息或者玩耍去了，一直没有给你回复，真是抱歉。 最近宁波持续高温，我已经好一阵子没有外出骑自行车了，烈日炎炎似火烧，感觉车胎都要晒爆了！不知道你那边天气怎么样，或者说你是夜骑的？怎么样？骑车的感觉还不错吧！之前看你发照片，似乎还有很多骑友，感觉很棒呢！我外出骑车一般都是自己一个人骑的，一方面身边没有什么同好，另一方面，我也挺喜欢这种自己按照自己的节奏在路上晃悠的感觉。不骑车的同事们听到我骑到这里或者那里去了，里程数总让他们感到诧异：“吓？骑了多久啊？”我却不怎么关心时间，骑行的过程本身就挺好玩的。在学校上学的时候，外出南京的景点玩一趟，在交通上要花上一两个小时，这总让我觉得很烦；但是骑车的时候花上好几个小时，我却乐此不疲。大概是因为把到达的过程也当做了游玩的一部分吧！ 听你说起，似乎最近比较受打击？是遇到了工作上的烦恼吗？还是遇到了感情上面的问题？是什么又使你感到了迷茫吗？ 最近我还有一个好消息，可能是关系到未来个人职业发展的一个很好的机会：我们国网新源公司下属的技术研究院最近似乎在搞一个特别的内部招聘，具体的策划还没有出，但是似乎采用的是推荐制的形式。负责这个工作的前辈恰好是我学校的师兄，他找我们学院的潘老师推荐几个在系统内工作的河海毕业生，老师推荐了我。研究院在北京那边也，而且不需要倒班，如果顺利能够调到那边工作的话，应该会很不错！不过大概也会遇到一些问题吧，因为我才工作两年，而且和目前的单位还签有劳动合同，要服务满五年呢，不知道后续具体的策划会怎么样？得之我幸，不得我命，稍微怀有点期待啦！（顺便让你看看我给新安全帽做的贴纸！）"},{"title":"方向","path":"/wiki/yhbuster/sentry/方向.html","content":"江Sir，说来惭愧，写信被我一直拖着了。 6月30号，偶提车了。没戳，没带任何犹豫，直接拿下那台特斯拉93。倒也不是一眼就相中了它，更多的原因。。还是因为被打击了，被上文说到的那个测试妹子无形中打击的吧，很是失落，还有一种被欺骗的感觉。也罢，我就想着，不如让自己过得舒服点，自由点~ 提车的第一周，我是真的爱不释手，每天中午骑，下午骑，顶着巨大的太阳也要出去骑，同事都说我就跟换了个老婆一样开心呢🤣。我也不知道为啥，只知道自己是一个路痴，外边的东西对我来说大多都有新鲜感，当我将记忆里的各条路串起来的时候，我会感觉莫名的舒畅——即使每次出去都是在漫无目的地飘。其实我很害怕这种的，因为这时的我是一个没有归属的人，此时唯一能指引我的，只有红绿灯，哪里亮了走哪里。 这段时间去了很多很多地方，走到哪就打开地图看看周边，传说中的贵族学校，vivo总部，oppo的研发中心，小天才的制造中心以及数不清的公园，广场。周末还挑战了下自己，骑车蹬回了老妈那，全程四十六公里，路上九十多个红绿灯，耗时俩个多小时，均速二十公里，感觉不错呢→_→ 老妈说我晒黑了，还瘦了😂。返程的时候悲剧了，骑太猛，车胎爆了，有点无奈。。东莞的路况太糟，有些下水道井盖比地面低太多。叫了货拉拉到最近的补胎点，果真——骑行者的好帮手。得救后，修车师傅检查得很认真，发现口子很大，只能临时补下让我骑回去，后面还是得换内胎🙃。一番操作后，重新启程，此时天色已黑，几乎没有路灯…第一次骑了二十公里的夜路。 我喜欢跟不同的人打交道，很乐意去倾听，还自认为情绪控制是很好的了，但这次，无疑给我来了一记闷棍，世界的参差远不止如此，这还仅仅只是离我最近的。我的想法，过于天真。有位知情的姐姐安慰我：没必要~一些东西我们改变不了，那就改变自己，过上想要的生活。希望我可以稍微强势一点，不然容易被欺负… 你说，我们的天性，我们的初心。在此之前，我其实就已经写过博客，问了自己，我的初心是——记住每一个记住我的人，对身边的事、物保持一定的好奇。江Sir，你呢？ 自行车让我度过了悲惨而又抑郁的青年大半时间，但我知道，我不能一直依赖骑行，独在异乡为异客，我需要找到方向。游戏我已经碰的很少了，明知时间珍贵，但又总是近乎报复性地浪费。工作之余倒是也看完了几本书，工作技能相关的，上了大学后，才明白什么是真正的学无止境。聊点题外话吧，AI，我相信，AI将是下一个改变世界的契机，如今更是潜移默化（我为自己曾经的不屑一顾感到羞耻）未来我打算将大部分时间都投入到这方面上来，很多知名大厂已经为普通人提供了免费易用的模型，而我是有这种条件的，我应该抓住机会，改变自己~最后，我想以一句很经典的话来结束： 房价大幅上涨不会创造财富，而是重新分配财富。它还有一个副作用，就是让继承和运气变得比教育和努力工作更重要 ​ ——《阮一峰的网络日志》"},{"title":"记忆里","path":"/wiki/yhbuster/sentry/记忆里.html","content":"SILVERriver！你的姓氏很独特，很容易就联想到柯南里面的赤井秀一，银色子弹真的很酷！那晚看到你发动态，便径直联系了你，或许有点唐突😉 记忆带点模糊，我们于初二结交，这年14岁，特意去翻了下QQ的加好友时间，对于我来说，最好的时光莫过于初中和高一呢，那里都是未长大的我们。同时代的我们，还有谢震，都是班上的活宝。其实老同学们，我都记着，我还记着毕业照上我们2025的约定，能看到老朋友发关于生活的动态，真的再好不过了。我其实并不是一个怀旧的人，只是更喜欢将新旧事物联想在一起。已经过了这么久呢，我的性格比起之前也带点变化了哦~ 小的时候我很喜欢看作文书，但，最讨厌写风景的作文了，修饰的词语太多，看的眼睛疼🤣。如今出来工作后，你所提起的故乡的雨季，是啊，它总是下下停停停停下下的，现在看来真的会不厌其烦，可为什么以前没有这种概念呢？给爷爷打电话，我们的开场白通常都是天气怎么样啊，然后带着一点轻描淡写的叙述，听到最多的大抵就是，又下雨了。故乡的天气真的很糟，变化无常，爷爷奶奶那时也总是守点蹲着湖南台的天气预报，再为明天的出行做点规划，其实绝大多数时候，他们都会照常出动。我是在城里长大的，关于农村的记忆并不多，无非就是周末去走下亲戚，挖笋，帮忙扯花生。当时没有交通，路途很远，也是稀烂的，换做现在我还是不知道它有多远，只记得以前坐船过去可以抄点近路。直到上初中后我学会了骑车，可以和弟弟用单车载着成果到城里，他们才不必用扁担挑。爷爷他们步行，一路走走停停，每次都会花掉我们一整天的时间。 奶奶说，我们脚大，以后是走四方的人。男孩子或许都这样吧，从不轻易想家，真正想家了也会嘴硬一番。我也一直都是这种想法，只有在南京实习的那段时间，最孤独无助的时候，我才会想家。我大概，能体会到现在你的感受吧。我知道，你也在不停地拥抱新事物，不妨下次聊聊近况吧！ 当下的我们，都陷入了一种状态，正如你所说，生活完全过的下去，但是感觉没有什么色彩，很单调，也没有目标。未来很大概率，这种状态都不会被打破，我们应该都是那种擅长自娱自乐的人，某些行为，可能表现得很另类，或者幼稚，但其实无所谓，没有人会在乎你，他们只会觉得你很活泼，事实是我们放大了别人的想法。 我们行走人世间，总会碰到比自己年轻的人，用天真守望天真，是人世间最美好的情谊之一。 回复 2024年5月22日(周三) 上午8:30 怎么会唐突呢！不知道你在南京实习，之前我实习的地方离南京很近！ 平时的生活其实挺简单的，要不我拍点照片让你看看今天怎么过的？一个人的单调在另一个人看来或许就是新鲜了，不过最近没有什么好玩的事情。咦，周末去工会联谊好像有点意思，感觉可以写写"},{"title":"军人之命，与国同殇","path":"/wiki/commander/index.html","content":"世间太多孟烦了，却不见龙文章。 我们行走人世间，总会碰到比自己年轻的人，用天真守望天真，是人世间最美好的情谊之一。 龙文章（死啦死啦） 我想让事情是它本来该有的样子 最好的都不信，干吗信最坏的啊 人死了也就死了，尸骨都发寒了，用不着活人心再寒 他只是焦虑太过了，焦虑太过了！可总好过那些没心没肺的醉生梦死吧？一尘不染的事情是没有的，我们都在吸进灰尘，可不妨碍我们做的好一点啊。没有人经得起别人的挑剔 我很想把命交给你，那是件多么省心的事，只要你别把它当成路边的马粪 以营对团全无敬意，忠孝信悌礼义廉耻挂在嘴上踩在脚底 我们总说，我们是最能吃苦耐劳的民族，吃苦耐劳不光是挨饿吧？ 自封的优点，会害死我们 用恐惧的东西跟他们打 我是有毛病，我毛病大了。可我和你不一样啊，我是一身的毛病，身上的身，你是一生的毛病，人生的生，明白吗？我有毛病我可以改，我改了就好，你呢？一个没改接着第二个第三个第四个，谁像你这么夸张，你tm到底有完没完啊 虞啸卿（虞师座） 你有逆流而上的勇气，也有漏船载酒的运气，做人倒做得如此晦气，何不赚个爽快？ 孟烦了（烦啦、小太爷） 南天门下就是怒江，上面有座桥，叫行天渡。过了行天渡就是禅达，是我们来的地方 没有上过战场的人，容易把自己想象得英勇无畏 有人不想活，可没人不怕死 瞧你那德行，软塌塌的跟路边牛粪似的，我真奇了怪了我们这些人怎么就偏偏把命都交给你这样的人了 有的时候卧薪尝胆也是一种鸦片 有人不喜欢自由，因为自由意味着人必须对自己的命运负责。他宁愿把自己的命运交给别人控制，这样可以活得轻松一些 永远不要在人前调侃你的理想，你为它付出的是生命 阿瑟.麦克鲁汉（麦师傅） 从来没有一只耳朵被嘴巴真正的说服！ 疯子，要看清马蜂窝的构造，不用把脑袋伸进马蜂窝 林译（阿译） 他有罪。可是，如果我三生有幸，如果我三生有幸，也能够犯下他所犯的那些罪行，吾也宁死啊。我死也不要成为他…他们那样子的活法，脑袋瓜子里面乱糟糟，一天到晚浑浑噩噩，完全是满脑袋瓜掏糨糊嘛！我经常在想，我就是要做，也真的，想做成龙文章那样的人。如果，如果真的，没有可能成为他那样子的人，吾宁死乎 郝希川（兽医） 才二十四岁，你就跟人比烂了 小书虫 我们民族的创造力、勇敢、智慧，哪去了？？我居然要看书才知道，我们曾经那么辉煌，无畏，开阔，包容世界，不拘一格。禅达人， 没有桥，也修了和顺镇，我们祖先没有榜样 可走了整整五千年。可我却要读书才知道，不是从你身上看到的，也不是从我身上看到的，这就是问题！！！有问题怎么办？要改！"},{"title":"随便写点东西","path":"/notes/index.html","content":"OKR O1 未来的计划：虽然工作很忙，但好歹要有个规划 能不能鞭策下自己啊 正常 -4% KR1 AI绘画（然而并不清楚接触这个能给自己带来什么，算丰富下生活吧） 从零开始的AI绘画入门教程生成现实人物图片编辑一款酷炫的背景图生成工具记住比美照更有杀伤力的，是照片的生命力 正常 10% KR2 微信聊天报告制作 教程我相信，它终究会有用的 延期 10% KR3 智能家居——拜托！这可是在老爸面前夸下的海口！ 杯面_白https://space.bilibili.com/2102238259?spm_id_from=333.999.0.0还想学学装修 正常 0% KR4 修养身心 必要的阅读自己动手做游戏MySQL45讲《Java并发编程之美》《高性能MySQL》知识星球游戏开发探索 未完成 -30% KR5 老是被搁置的计划。。 重学pythonLinux学习吾爱破解——逆向拓展一种编程语言发展一门副业trojan代理服务器 未完成 -12% KR6 职业生涯 考证必要软考高级架构师提升学历 风险 0% 愿望单无人机 鼠标 键盘 PDF阅读器 Switch 电脑主机 笔记本电脑 游戏手柄 耳机 智能家居 飞科剃须刀 充电宝 公路车 一些值得遵守的事 每个月的16号是迷茫日，这一天可以尽情摆烂，但是要看一部电影 每天争取提交一次代码 朋友圈XAOXUU那个码农阿超风丶宇花未眠LittleDonkey友人C纸鹿本鹿 技术加油站 吾爱破解吾爱破解论坛致力于软件安全与病毒分析的前沿，丰富的技术版块交相辉映，由无数热衷于软件加密解密及反病毒爱好者共同维护阮一峰的个人网站写一点读书笔记 一些有趣的网站 发明创造 - CodeNewscodenews 是一个国人分享技术工具的社区程序员搜索emm..好像对国内还没开放算法库号称GitHub最大的开源算法库Easy ExcelEasyExcel官方文档Flet中文网Flet中文网·flet最全教程·Qt最强平替代码随想录刷题和八股文必备代码在线运行也许-能解个燃眉之急TenAPI工具网站免费提供各类API服务图片压缩网站小而美图片压缩网站-谷歌英文，无需魔法标准地图服务系统标准地图服务系统广东省公共地图服务广东省标准地图服务子系统"},{"title":"近况","path":"/wiki/yhbuster/sentry/近况.html","content":"有段时间没联系了。没错，很忙！ 算了，说忙是假的，其实总抽得出时间来，无非是静不下心来罢了。我倒是不刷手机，但也不懂得利用时间。工作之余很多的碎片化时间，都被拿来娱乐了，台球，乒乓球，偶尔还散下步，骑会车。不过近期任务确实很重，还是时不时需要干到深夜，同事们倒还夸我，到底是年轻啊，生龙活虎的，跟他们相比，没有负担简直天大的优势了。工作节奏确实太快，很多任务都是强压过来，赶鸭子上架，已经有同事耐不住提离职了，我也喘不过气来，但我清楚外面的就业环境，毕竟经历过一次，再者这里的确能给我很大的锻炼机会。也能理解，大环境不好，公司效益不高，处处降本增效。。竞争只会愈演愈烈 哦不，够了！我不敢散播焦虑的，管它未来怎么样，我只知道，得实现自己的一个个小目标，要以乐此不疲的姿态~ 写信，我居然无意中把它当成一种仪式一样的，不应该那么注重。这不是写博客，没必要斟酌我的文字，只需当唠家常好了。这种信，可以给江哥，也可以给任何人，算是一段时间的内心沉淀，投递出去就好了 说起来，最近跟个公司的测试妹子聊的火热，同桌怂恿我约她出来，我还真试过，但是被拒了，其实我也清楚，言语之间对方家庭的优渥。。原来，真的有这种心理落差啊。在我坐公交、蹬单车的时候，她们出行已经纯自驾了，当升学的时候，她们有考虑出国留学，而我是没有选择的，家里忙不过来会请保洁阿姨，而我的老妈就是做家政工作的…令我疑惑的是，尽管如此，她们也还是会莫名的焦虑，一种自己都说不清，道不明的焦虑。相比之下，我的生活，单调但是轻松啊 跟女生聊天也是种锻炼😁，我才不是为了把妹呢。嗯，下阶段的目标，就是找个在乎自己的人吧，我可不想沦落到被家里逼着相亲的地步，那样好没出息…"},{"title":"八月","path":"/wiki/yhbuster/sentry/八月.html","content":"七月结束，真的是自己状态最糟的一个月了，自己终究还是败在感情上面，未来更应该专注自己。这段时间，自行车一直陪着我，提车至今，短短的四十天里，已经爆过四次胎，叫过两次货拉拉了。。自己得把补胎换胎这个技能给学会，不然每次都是一番折腾。 我这边天气倒不错，时不时来场恰到好处的雨，自己每天都能骑车，也经常夜骑，这边离深圳很近，时不时就窜过去。其实我并没有骑友，那些都是路上偶遇的，身边的同志们对骑车并不太感冒，他们对我的里程数也是带点吃惊。原来你是按照自己的节奏在路上晃悠，这个不错呦！我每次出去，都有点茫然，都是打开高德地图选个看起来不错的地名再跑过去，不知为何，真的很怕这种漫无目的地飘。自由的半径的确变大了，去过很多地方，拍了很多照片，虽然小众，但都是自己想去的。骑行的过程，大抵就是可以认真感受每一次踏动，放空心灵，换来耳边的呼呼声，随心所欲去自己想去的地方，但是，它是一项孤独的运动。。每次想到这，都有种伤感。B站上关注了很多骑友，他们分享的骑行经历，我想买一个运动相机，毕竟骑行的时候有很多有趣的事，我想把它们录下来，做点从来没做过的事。 看到江哥带来的好消息啦！真为老朋友感到开心o(*￣▽￣*)ブ 机会一定要把握住呀，漂泊在外，为的就是一个好的发展。至于劳动合同，时间这么长啊，不过问题不大~人总是要面临选择的。说起来，北京，是我学生时代最向往的城市了，我也说不清，为何对它那么的痴迷。今年是我工作第三年，职业生涯感觉很难走的下去，虽然目前安逸，但明眼人都知道公司在走下坡路，这些，无所谓了。期待，你的更好消息呢！！ 唠点其他的，上上周，公司组织团建，我们科室去了广州长隆水上乐园玩，我是第一次去玩水上乐园，真的无比兴奋，各个项目都打头阵！我的世界太小，同龄人在此之前已经去过很多这种地方了，珠海长隆，海底世界，迪士尼…我在很积极的融入他们，纵使那些经历是我所缺失的，这种集体出行活动，的确很有意义。以后，一定要带自己最重要的人再来玩一次。当天晚上还聚餐了，也许是兴奋过头了，我喝的烂醉。。头一次喝这么多，回程全程被搀扶着，后面还吐了。哇，喝酒的滋味真难受！ 八月，让我们准备好迎接秋天吧"},{"title":"回复","path":"/wiki/yhbuster/SILVERriver/回复.html","content":"最近我们单位也比较忙，刚好是到送点的里程碑式工作，大家都忙前忙后的。昨天高强度上了个夜班，脑袋晕晕乎乎的（虽然我也没什么活，但是一直精神紧绷坐一晚上也真累人啊）。说起来感觉好一阵子没出去骑车了，平时时间也是打游戏居多，天天睡得很晚，时间感觉很充沛又很稀缺。 降本增效真是个讨厌的词语，我们公司也说这个来着，以后的战略就是要区域化集团化，降本增效……不就是俩人干三人活省钱吗，说得这么好听。现在好多讨厌的词都包装换一个新名字又出现（忽然想看历史性的书了）。话说那个测试的妹子也是你们单位的嘛？平时见面机会很多？有心理落差很正常哇，我感觉大部分人面对这样的情况都会有类似的想法吧，一点点自卑之类的。之前在学校我和一个女同学关系也比较亲密，学业又非常好，保研了浙大；后面清明节我去杭州见表姐的时候，她约我去她家那边玩一玩，发现她家境也很好，唉，当时和你类似的心情吧。 感觉很多时候也甘于平凡了，又不知道自己要追求什么，似乎自己没太多想追求的，但是看见别人女生身上的“学业好”“家境好”这样的点有会觉得自卑。这是为什么呢？ 你最近有没有看见那个新闻，就是一个中专的女生在阿里数学竞赛拿了全球性名次来着。一方面我感叹真天才啊，一方面又想，也有许多人带着天赋被埋没了吧？假设把我置身于她那样的情况，我可能也不会去想参加什么大赛，可能也会在心里否定自己？在我们所受的教育里，很多时候学业学历就和这个人的优秀与否强绑定在一起了，很多人的才能，如果没有极端到掩盖不住的程度，大概就都这样被埋没了吧？天生我材必有用，我们有什么样的才能呢？ 最近我又读了几页书，读到庖丁解牛。 良庖岁更刀， 割也； 族庖月更刀， 折也。庖丁用刀十九年， “所解数千牛矣， 而刀刃若新发于硎。”我想，以这把刀的视角来看，庖丁一定是一个很好的主人。刀刃切割经络，避开骨质，游刃有余，这不也就是顺应了刀的“天性”？感觉道家也未必是消极的，顺应人的天性，你我的天性是什么呢？"}]